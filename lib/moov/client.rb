# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'faraday/retry'
require 'sorbet-runtime'
require_relative 'sdk_hooks/hooks'
require_relative 'utils/retries'

module Moov
  extend T::Sig

  class Client
    extend T::Sig

    attr_accessor :accounts, :adjustments, :apple_pay, :bank_accounts, :branding, :capabilities, :cards, :disputes, :fee_plans, :files, :payment_links, :payment_methods, :representatives, :scheduling, :sweeps, :account_terminal_applications, :support, :transfers, :underwriting, :wallets, :wallet_transactions, :avatars, :end_to_end_encryption, :enriched_address, :enriched_profile, :industries, :institutions, :issuing_transactions, :card_issuing, :authentication, :onboarding, :ping, :receipts, :terminal_applications

    sig do
      params(
        client: T.nilable(Faraday::Connection),
        retry_config: T.nilable(::Moov::Utils::RetryConfig),
        timeout_ms: T.nilable(Integer),
        security: T.nilable(Models::Components::Security),
        security_source: T.nilable(T.proc.returns(Models::Components::Security)),
        x_moov_version: T.nilable(::String),
        server_idx: T.nilable(Integer),
        server_url: T.nilable(String),
        url_params: T.nilable(T::Hash[Symbol, String])
      ).void
    end
    def initialize(client: nil, retry_config: nil, timeout_ms: nil, security: nil, security_source: nil, x_moov_version: nil, server_idx: nil, server_url: nil, url_params: nil)
      ## Instantiates the SDK configuring it with the provided parameters.
      # @param [T.nilable(Faraday::Connection)] client The faraday HTTP client to use for all operations
      # @param [T.nilable(::Moov::Utils::RetryConfig)] retry_config The retry configuration to use for all operations
      # @param [T.nilable(Integer)] timeout_ms Request timeout in milliseconds for all operations
      # @param [T.nilable(Models::Components::Security)] security: The security details required for authentication
      # @param [T.proc.returns(T.nilable(Models::Components::Security))] security_source: A function that returns security details required for authentication
      # @param [T.nilable(::String)] x_moov_version: Configures the x_moov_version parameter for all supported operations
      # @param [T.nilable(::Integer)] server_idx The index of the server to use for all operations
      # @param [T.nilable(::String)] server_url The server URL to use for all operations
      # @param [T.nilable(::Hash<::Symbol, ::String>)] url_params Parameters to optionally template the server URL with

      connection_options = {
        request: {
          params_encoder: Faraday::FlatParamsEncoder
        }
      }
      connection_options[:request][:timeout] = (timeout_ms.to_f / 1000) unless timeout_ms.nil?

      client ||= Faraday.new(**connection_options) do |f|
        f.request :multipart, {}
        # f.response :logger, nil, { headers: true, bodies: true, errors: true }
      end
      
      if !server_url.nil?
        if !url_params.nil?
          server_url = Utils.template_url(server_url, url_params)
        end
      end

      server_idx = 0 if server_idx.nil?

      globals = {
        'parameters': {
          'queryParam': {
          },
          'pathParam': {
          },
          'header': {
            'x_moov_version': x_moov_version,
          }
        }
      }
      hooks = SDKHooks::Hooks.new
      @sdk_configuration = SDKConfiguration.new(
        client,
        hooks,
        retry_config,
        timeout_ms,
        security,
        security_source,
        server_url,
        server_idx,
        globals
      )
      @sdk_configuration = hooks.sdk_init(config: @sdk_configuration)
      init_sdks
    end

    sig { void }
    def init_sdks
      @accounts = Accounts.new(@sdk_configuration)
      @adjustments = Adjustments.new(@sdk_configuration)
      @apple_pay = ApplePay.new(@sdk_configuration)
      @bank_accounts = BankAccounts.new(@sdk_configuration)
      @branding = Branding.new(@sdk_configuration)
      @capabilities = Capabilities.new(@sdk_configuration)
      @cards = Cards.new(@sdk_configuration)
      @disputes = Disputes.new(@sdk_configuration)
      @fee_plans = FeePlans.new(@sdk_configuration)
      @files = Files.new(@sdk_configuration)
      @payment_links = PaymentLinks.new(@sdk_configuration)
      @payment_methods = PaymentMethods.new(@sdk_configuration)
      @representatives = Representatives.new(@sdk_configuration)
      @scheduling = Scheduling.new(@sdk_configuration)
      @sweeps = Sweeps.new(@sdk_configuration)
      @account_terminal_applications = AccountTerminalApplications.new(@sdk_configuration)
      @support = Support.new(@sdk_configuration)
      @transfers = Transfers.new(@sdk_configuration)
      @underwriting = Underwriting.new(@sdk_configuration)
      @wallets = Wallets.new(@sdk_configuration)
      @wallet_transactions = WalletTransactions.new(@sdk_configuration)
      @avatars = Avatars.new(@sdk_configuration)
      @end_to_end_encryption = EndToEndEncryption.new(@sdk_configuration)
      @enriched_address = EnrichedAddress.new(@sdk_configuration)
      @enriched_profile = EnrichedProfile.new(@sdk_configuration)
      @industries = Industries.new(@sdk_configuration)
      @institutions = Institutions.new(@sdk_configuration)
      @issuing_transactions = IssuingTransactions.new(@sdk_configuration)
      @card_issuing = CardIssuing.new(@sdk_configuration)
      @authentication = Authentication.new(@sdk_configuration)
      @onboarding = Onboarding.new(@sdk_configuration)
      @ping = Ping.new(@sdk_configuration)
      @receipts = Receipts.new(@sdk_configuration)
      @terminal_applications = TerminalApplications.new(@sdk_configuration)
    end

    sig { params(base_url: String, url_variables: T.nilable(T::Hash[Symbol, T.any(String, T::Enum)])).returns(String) }
    def get_url(base_url:, url_variables: nil)
      sd_base_url, sd_options = @sdk_configuration.get_server_details

      if base_url.nil?
        base_url = sd_base_url
      end

      if url_variables.nil?
        url_variables = sd_options
      end

      return Utils.template_url base_url, url_variables
    end
  end
end
