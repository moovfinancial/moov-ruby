# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class RequirementError
        extend T::Sig
        include Crystalline::MetadataFields

        # The unique ID of what the requirement is asking to be filled out.
        field :requirement, Models::Components::RequirementID, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('requirement'), required: true, 'decoder': Utils.enum_from_string(Models::Components::RequirementID, false) } }

        field :error_code, Crystalline::Nilable.new(Models::Components::RequirementErrorCode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('errorCode'), 'decoder': Utils.enum_from_string(Models::Components::RequirementErrorCode, true) } }

        sig { params(requirement: Models::Components::RequirementID, error_code: T.nilable(Models::Components::RequirementErrorCode)).void }
        def initialize(requirement:, error_code: nil)
          @requirement = requirement
          @error_code = error_code
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @requirement == other.requirement
          return false unless @error_code == other.error_code
          true
        end
      end
    end
  end
end
