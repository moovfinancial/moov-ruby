# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Account
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for this account.
        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }
        # The operating mode for an account.
        field :mode, Models::Components::Mode, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mode'), required: true, 'decoder': Utils.enum_from_string(Models::Components::Mode, false) } }
        # The type of entity represented by this account.
        field :account_type, Models::Components::AccountType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::AccountType, false) } }

        field :display_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('displayName'), required: true } }
        # Describes a Moov account profile. A profile will have a business, individual, or guest depending on the account's type.
        field :profile, Models::Components::Profile, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('profile'), required: true } }
        # Describes identity verification status and relevant identity verification documents.
        field :verification, Models::Components::Verification, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('verification'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
        field :metadata, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata') } }
        # Describes the acceptance of the Terms of Service.
        field :terms_of_service, Crystalline::Nilable.new(Models::Components::TermsOfService), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('termsOfService') } }

        field :capabilities, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::AccountCapability)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('capabilities') } }
        # Optional alias from a foreign/external system which can be used to reference this resource.
        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }
        # User-provided information that can be displayed on credit card transactions for customers to use when
        # contacting a customer support team. This data is only allowed on a business account.
        field :customer_support, Crystalline::Nilable.new(Models::Components::CustomerSupport), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('customerSupport') } }
        # User provided settings to manage an account.
        field :settings, Crystalline::Nilable.new(Models::Components::Settings), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('settings') } }

        field :disconnected_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disconnectedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(account_id: ::String, mode: Models::Components::Mode, account_type: Models::Components::AccountType, display_name: ::String, profile: Models::Components::Profile, verification: Models::Components::Verification, created_on: ::DateTime, updated_on: ::DateTime, metadata: T.nilable(T::Hash[Symbol, ::String]), terms_of_service: T.nilable(Models::Components::TermsOfService), capabilities: T.nilable(T::Array[Models::Components::AccountCapability]), foreign_id: T.nilable(::String), customer_support: T.nilable(Models::Components::CustomerSupport), settings: T.nilable(Models::Components::Settings), disconnected_on: T.nilable(::DateTime)).void }
        def initialize(account_id:, mode:, account_type:, display_name:, profile:, verification:, created_on:, updated_on:, metadata: nil, terms_of_service: nil, capabilities: nil, foreign_id: nil, customer_support: nil, settings: nil, disconnected_on: nil)
          @account_id = account_id
          @mode = mode
          @account_type = account_type
          @display_name = display_name
          @profile = profile
          @verification = verification
          @created_on = created_on
          @updated_on = updated_on
          @metadata = metadata
          @terms_of_service = terms_of_service
          @capabilities = capabilities
          @foreign_id = foreign_id
          @customer_support = customer_support
          @settings = settings
          @disconnected_on = disconnected_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @mode == other.mode
          return false unless @account_type == other.account_type
          return false unless @display_name == other.display_name
          return false unless @profile == other.profile
          return false unless @verification == other.verification
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @metadata == other.metadata
          return false unless @terms_of_service == other.terms_of_service
          return false unless @capabilities == other.capabilities
          return false unless @foreign_id == other.foreign_id
          return false unless @customer_support == other.customer_support
          return false unless @settings == other.settings
          return false unless @disconnected_on == other.disconnected_on
          true
        end
      end
    end
  end
end
