# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpsertUnderwriting
        extend T::Sig
        include Crystalline::MetadataFields


        field :geographic_reach, Crystalline::Nilable.new(Models::Components::GeographicReach), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('geographicReach'), 'decoder': Utils.enum_from_string(Models::Components::GeographicReach, true) } }

        field :business_presence, Crystalline::Nilable.new(Models::Components::BusinessPresence), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('businessPresence'), 'decoder': Utils.enum_from_string(Models::Components::BusinessPresence, true) } }

        field :pending_litigation, Crystalline::Nilable.new(Models::Components::PendingLitigation), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pendingLitigation'), 'decoder': Utils.enum_from_string(Models::Components::PendingLitigation, true) } }

        field :volume_share_by_customer_type, Crystalline::Nilable.new(Models::Components::VolumeShareByCustomerType), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('volumeShareByCustomerType') } }

        field :collect_funds, Crystalline::Nilable.new(Models::Components::CollectFunds), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('collectFunds') } }

        field :money_transfer, Crystalline::Nilable.new(Models::Components::MoneyTransfer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('moneyTransfer') } }

        field :send_funds, Crystalline::Nilable.new(Models::Components::SendFunds), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sendFunds') } }

        field :submission_intent, Crystalline::Nilable.new(Models::Components::SubmissionIntent), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('submissionIntent'), 'decoder': Utils.enum_from_string(Models::Components::SubmissionIntent, true) } }

        sig { params(geographic_reach: T.nilable(Models::Components::GeographicReach), business_presence: T.nilable(Models::Components::BusinessPresence), pending_litigation: T.nilable(Models::Components::PendingLitigation), volume_share_by_customer_type: T.nilable(Models::Components::VolumeShareByCustomerType), collect_funds: T.nilable(Models::Components::CollectFunds), money_transfer: T.nilable(Models::Components::MoneyTransfer), send_funds: T.nilable(Models::Components::SendFunds), submission_intent: T.nilable(Models::Components::SubmissionIntent)).void }
        def initialize(geographic_reach: nil, business_presence: nil, pending_litigation: nil, volume_share_by_customer_type: nil, collect_funds: nil, money_transfer: nil, send_funds: nil, submission_intent: nil)
          @geographic_reach = geographic_reach
          @business_presence = business_presence
          @pending_litigation = pending_litigation
          @volume_share_by_customer_type = volume_share_by_customer_type
          @collect_funds = collect_funds
          @money_transfer = money_transfer
          @send_funds = send_funds
          @submission_intent = submission_intent
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @geographic_reach == other.geographic_reach
          return false unless @business_presence == other.business_presence
          return false unless @pending_litigation == other.pending_litigation
          return false unless @volume_share_by_customer_type == other.volume_share_by_customer_type
          return false unless @collect_funds == other.collect_funds
          return false unless @money_transfer == other.money_transfer
          return false unless @send_funds == other.send_funds
          return false unless @submission_intent == other.submission_intent
          true
        end
      end
    end
  end
end
