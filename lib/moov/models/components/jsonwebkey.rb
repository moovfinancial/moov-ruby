# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes an [RFC7517](https://datatracker.ietf.org/doc/html/rfc7517) web key.
      class JSONWebKey
        extend T::Sig
        include Crystalline::MetadataFields

        # The cryptographic algorithm family used with the key (e.g., 'RSA', 'EC', 'oct').
        field :kty, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('kty'), required: true } }
        # The intended use of the key. 'sig' for signature, 'enc' for encryption.
        field :use, Crystalline::Nilable.new(Models::Components::Use), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('use'), 'decoder': Utils.enum_from_string(Models::Components::Use, true) } }
        # The permitted operations for the key, e.g., 'sign', 'verify', 'encrypt', 'decrypt'.
        field :key_ops, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('key_ops') } }
        # The algorithm intended for use with the key, e.g., 'RS256' or 'ES256'.
        field :alg, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('alg') } }
        # A unique identifier for the key.
        field :kid, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('kid') } }
        # The curve for Elliptic Curve keys, e.g., 'P-256', 'P-384', or 'P-521'.
        # 
        # This field is required when `kty` is 'EC'.
        field :crv, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('crv') } }
        # The x coordinate for Elliptic Curve keys.
        # 
        # This field is required when `kty` is 'EC'.
        field :x, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('x') } }
        # The y coordinate for Elliptic Curve keys.
        # 
        # This field is required when `kty` is 'EC'.
        field :y, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('y') } }
        # The modulus value for RSA keys.
        # 
        # This field is required when `kty` is 'RSA'.
        field :n, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('n') } }
        # The exponent value for RSA keys.
        # 
        # This field is required when `kty` is 'RSA'.
        field :e, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('e') } }

        sig { params(kty: ::String, use: T.nilable(Models::Components::Use), key_ops: T.nilable(T::Array[::String]), alg: T.nilable(::String), kid: T.nilable(::String), crv: T.nilable(::String), x: T.nilable(::String), y: T.nilable(::String), n: T.nilable(::String), e: T.nilable(::String)).void }
        def initialize(kty:, use: nil, key_ops: nil, alg: nil, kid: nil, crv: nil, x: nil, y: nil, n: nil, e: nil)
          @kty = kty
          @use = use
          @key_ops = key_ops
          @alg = alg
          @kid = kid
          @crv = crv
          @x = x
          @y = y
          @n = n
          @e = e
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @kty == other.kty
          return false unless @use == other.use
          return false unless @key_ops == other.key_ops
          return false unless @alg == other.alg
          return false unless @kid == other.kid
          return false unless @crv == other.crv
          return false unless @x == other.x
          return false unless @y == other.y
          return false unless @n == other.n
          return false unless @e == other.e
          true
        end
      end
    end
  end
end
