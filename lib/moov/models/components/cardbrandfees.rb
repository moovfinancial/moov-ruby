# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A detailed breakdown of fees for a specific card brand.
      class CardBrandFees
        extend T::Sig
        include Crystalline::MetadataFields

        # Total fees for this card brand.
        field :total, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total'), required: true } }
        # Details of interchange fees.
        field :interchange, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('interchange') } }
        # A list of interchange program fees.
        field :interchange_programs, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::BillingInterchangeProgramFee)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('interchangePrograms') } }
        # Details of network passthrough fees.
        field :network_passthrough, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('networkPassthrough') } }
        # Details of completed domestic online transactions.
        field :completed_domestic_online, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedDomesticOnline') } }
        # Details of completed domestic in-person transactions.
        field :completed_domestic_in_person, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedDomesticInPerson') } }
        # Details of completed international online transactions.
        field :completed_international_online, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedInternationalOnline') } }
        # Details of completed international in-person transactions.
        field :completed_international_in_person, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedInternationalInPerson') } }
        # Details of declined transactions.
        field :declines, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('declines') } }
        # Details of refunded transactions.
        field :refunds, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refunds') } }

        sig { params(total: Models::Components::BillingCountAndAmount, interchange: T.nilable(Models::Components::BillingCountAndAmount), interchange_programs: T.nilable(T::Array[Models::Components::BillingInterchangeProgramFee]), network_passthrough: T.nilable(Models::Components::BillingCountAndAmount), completed_domestic_online: T.nilable(Models::Components::BillingCountAndAmount), completed_domestic_in_person: T.nilable(Models::Components::BillingCountAndAmount), completed_international_online: T.nilable(Models::Components::BillingCountAndAmount), completed_international_in_person: T.nilable(Models::Components::BillingCountAndAmount), declines: T.nilable(Models::Components::BillingCountAndAmount), refunds: T.nilable(Models::Components::BillingCountAndAmount)).void }
        def initialize(total:, interchange: nil, interchange_programs: nil, network_passthrough: nil, completed_domestic_online: nil, completed_domestic_in_person: nil, completed_international_online: nil, completed_international_in_person: nil, declines: nil, refunds: nil)
          @total = total
          @interchange = interchange
          @interchange_programs = interchange_programs
          @network_passthrough = network_passthrough
          @completed_domestic_online = completed_domestic_online
          @completed_domestic_in_person = completed_domestic_in_person
          @completed_international_online = completed_international_online
          @completed_international_in_person = completed_international_in_person
          @declines = declines
          @refunds = refunds
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @total == other.total
          return false unless @interchange == other.interchange
          return false unless @interchange_programs == other.interchange_programs
          return false unless @network_passthrough == other.network_passthrough
          return false unless @completed_domestic_online == other.completed_domestic_online
          return false unless @completed_domestic_in_person == other.completed_domestic_in_person
          return false unless @completed_international_online == other.completed_international_online
          return false unless @completed_international_in_person == other.completed_international_in_person
          return false unless @declines == other.declines
          return false unless @refunds == other.refunds
          true
        end
      end
    end
  end
end
