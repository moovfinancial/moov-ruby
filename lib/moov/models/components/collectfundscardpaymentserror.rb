# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CollectFundsCardPaymentsError
        extend T::Sig
        include Crystalline::MetadataFields


        field :card_acceptance_methods, Crystalline::Nilable.new(Models::Components::CardAcceptanceMethodsError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAcceptanceMethods') } }

        field :currently_accepts_cards, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('currentlyAcceptsCards') } }

        field :estimated_activity, Crystalline::Nilable.new(Models::Components::EstimatedActivityError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('estimatedActivity') } }

        field :fulfillment, Crystalline::Nilable.new(Models::Components::FulfillmentError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fulfillment') } }

        field :refund_policy, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refundPolicy') } }

        sig { params(card_acceptance_methods: T.nilable(Models::Components::CardAcceptanceMethodsError), currently_accepts_cards: T.nilable(::String), estimated_activity: T.nilable(Models::Components::EstimatedActivityError), fulfillment: T.nilable(Models::Components::FulfillmentError), refund_policy: T.nilable(::String)).void }
        def initialize(card_acceptance_methods: nil, currently_accepts_cards: nil, estimated_activity: nil, fulfillment: nil, refund_policy: nil)
          @card_acceptance_methods = card_acceptance_methods
          @currently_accepts_cards = currently_accepts_cards
          @estimated_activity = estimated_activity
          @fulfillment = fulfillment
          @refund_policy = refund_policy
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @card_acceptance_methods == other.card_acceptance_methods
          return false unless @currently_accepts_cards == other.currently_accepts_cards
          return false unless @estimated_activity == other.estimated_activity
          return false unless @fulfillment == other.fulfillment
          return false unless @refund_policy == other.refund_policy
          true
        end
      end
    end
  end
end
