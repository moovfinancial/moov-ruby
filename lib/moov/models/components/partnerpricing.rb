# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class PartnerPricing
        extend T::Sig
        include Crystalline::MetadataFields


        field :plan_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('planID'), required: true } }
        # The name of the partner pricing plan.
        field :name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name'), required: true } }
        #   The decimal-formatted numerical string of the revenue split for partner.
        #   
        #   For example, 2.25% is '2.25'.
        field :revenue_share, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('revenueShare'), required: true } }
        # Specifies the card processing pricing model
        field :card_acquiring_model, Models::Components::CardAcquiringModel, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAcquiringModel'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardAcquiringModel, false) } }

        field :billable_fees, Crystalline::Array.new(Models::Components::BillableFee), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billableFees'), required: true } }
        # The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
        field :minimum_commitment, Models::Components::MinimumCommitment, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minimumCommitment'), required: true } }
        # Fixed recurring amount paid in the billing period regardless of usage.
        field :monthly_platform_fee, Models::Components::MonthlyPlatformFee, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('monthlyPlatformFee'), required: true } }

        field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdAt'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # A description of the fee plan.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        sig { params(plan_id: ::String, name: ::String, revenue_share: ::String, card_acquiring_model: Models::Components::CardAcquiringModel, billable_fees: T::Array[Models::Components::BillableFee], minimum_commitment: Models::Components::MinimumCommitment, monthly_platform_fee: Models::Components::MonthlyPlatformFee, created_at: ::DateTime, description: T.nilable(::String)).void }
        def initialize(plan_id:, name:, revenue_share:, card_acquiring_model:, billable_fees:, minimum_commitment:, monthly_platform_fee:, created_at:, description: nil)
          @plan_id = plan_id
          @name = name
          @revenue_share = revenue_share
          @card_acquiring_model = card_acquiring_model
          @billable_fees = billable_fees
          @minimum_commitment = minimum_commitment
          @monthly_platform_fee = monthly_platform_fee
          @created_at = created_at
          @description = description
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @plan_id == other.plan_id
          return false unless @name == other.name
          return false unless @revenue_share == other.revenue_share
          return false unless @card_acquiring_model == other.card_acquiring_model
          return false unless @billable_fees == other.billable_fees
          return false unless @minimum_commitment == other.minimum_commitment
          return false unless @monthly_platform_fee == other.monthly_platform_fee
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          true
        end
      end
    end
  end
end
