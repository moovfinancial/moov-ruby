# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      #   Contains the user's payment information as returned from Apple Pay.
      # 
      #   Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken) 
      #   for more information.
      class LinkApplePayToken
        extend T::Sig
        include Crystalline::MetadataFields

        #   Contains the encrypted payment data.
        # 
        #   Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916115-paymentdata) 
        #   for more information.
        field :payment_data, Models::Components::LinkApplePaymentData, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentData'), required: true } }
        #   Provides information about the underlying card.
        # 
        #   Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916113-paymentmethod) 
        #   for more information.
        field :payment_method, Models::Components::LinkApplePaymentMethod, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethod'), required: true } }
        # A unique identifier provided by Apple Pay for this payment.
        field :transaction_identifier, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionIdentifier'), required: true } }

        sig { params(payment_data: Models::Components::LinkApplePaymentData, payment_method: Models::Components::LinkApplePaymentMethod, transaction_identifier: ::String).void }
        def initialize(payment_data:, payment_method:, transaction_identifier:)
          @payment_data = payment_data
          @payment_method = payment_method
          @transaction_identifier = transaction_identifier
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @payment_data == other.payment_data
          return false unless @payment_method == other.payment_method
          return false unless @transaction_identifier == other.transaction_identifier
          true
        end
      end
    end
  end
end
