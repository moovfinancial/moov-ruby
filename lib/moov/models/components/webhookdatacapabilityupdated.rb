# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WebhookDataCapabilityUpdated
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }
        # Moov account capabilities.
        # 
        # The `production-app`, `platform.production-app`, and / or `platform.wallet-transfers` capabilities might appear in your list. These are read-only capabilities that Moov requests and uses for account verification purposes. These capabilities remains active with your account and require no additional action.
        field :capability_id, Models::Components::CapabilityID, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('capabilityID'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CapabilityID, false) } }
        # The status of the capability requested for an account.
        field :status, Models::Components::CapabilityStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CapabilityStatus, false) } }

        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        sig { params(account_id: ::String, capability_id: Models::Components::CapabilityID, status: Models::Components::CapabilityStatus, foreign_id: T.nilable(::String)).void }
        def initialize(account_id:, capability_id:, status:, foreign_id: nil)
          @account_id = account_id
          @capability_id = capability_id
          @status = status
          @foreign_id = foreign_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @capability_id == other.capability_id
          return false unless @status == other.status
          return false unless @foreign_id == other.foreign_id
          true
        end
      end
    end
  end
end
