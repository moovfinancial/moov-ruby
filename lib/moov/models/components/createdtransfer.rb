# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreatedTransfer
        extend T::Sig
        include Crystalline::MetadataFields


        field :transfer_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferID'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :source, Crystalline::Nilable.new(Models::Components::TransferSource), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('source') } }

        field :destination, Crystalline::Nilable.new(Models::Components::TransferDestination), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('destination') } }

        field :completed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Status of a transfer.
        field :status, Crystalline::Nilable.new(Models::Components::TransferStatus), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::TransferStatus, true) } }
        # Reason for a transfer's failure.
        field :failure_reason, Crystalline::Nilable.new(Models::Components::TransferFailureReason), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('failureReason'), 'decoder': Utils.enum_from_string(Models::Components::TransferFailureReason, true) } }

        field :amount, Crystalline::Nilable.new(Models::Components::Amount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount') } }
        # An optional description of the transfer that is used on receipts and for your own internal use.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
        field :metadata, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata') } }
        # Total or markup fee.
        field :facilitator_fee, Crystalline::Nilable.new(Models::Components::FacilitatorFee), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('facilitatorFee') } }
        # Fees charged to your platform account for transfers.
        field :moov_fee, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('moovFee') } }
        # Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
        field :moov_fee_decimal, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('moovFeeDecimal') } }
        # Processing and pass-through costs that add up to the moovFee.
        field :moov_fee_details, Crystalline::Nilable.new(Models::Components::MoovFeeDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('moovFeeDetails') } }

        field :group_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('groupID') } }

        field :cancellations, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::Cancellation)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cancellations') } }

        field :refunded_amount, Crystalline::Nilable.new(Models::Components::Amount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refundedAmount') } }

        field :refunds, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::CardAcquiringRefund)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refunds') } }

        field :disputed_amount, Crystalline::Nilable.new(Models::Components::Amount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputedAmount') } }

        field :disputes, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::CardAcquiringDispute)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputes') } }

        field :sweep_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sweepID') } }

        field :schedule_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scheduleID') } }

        field :occurrence_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('occurrenceID') } }

        field :payment_link_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentLinkCode') } }
        # Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
        field :sales_tax_amount, Crystalline::Nilable.new(Models::Components::Amount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('salesTaxAmount') } }
        # Optional alias from a foreign/external system which can be used to reference this resource.
        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        sig { params(transfer_id: ::String, created_on: ::DateTime, source: T.nilable(Models::Components::TransferSource), destination: T.nilable(Models::Components::TransferDestination), completed_on: T.nilable(::DateTime), status: T.nilable(Models::Components::TransferStatus), failure_reason: T.nilable(Models::Components::TransferFailureReason), amount: T.nilable(Models::Components::Amount), description: T.nilable(::String), metadata: T.nilable(T::Hash[Symbol, ::String]), facilitator_fee: T.nilable(Models::Components::FacilitatorFee), moov_fee: T.nilable(::Integer), moov_fee_decimal: T.nilable(::String), moov_fee_details: T.nilable(Models::Components::MoovFeeDetails), group_id: T.nilable(::String), cancellations: T.nilable(T::Array[Models::Components::Cancellation]), refunded_amount: T.nilable(Models::Components::Amount), refunds: T.nilable(T::Array[Models::Components::CardAcquiringRefund]), disputed_amount: T.nilable(Models::Components::Amount), disputes: T.nilable(T::Array[Models::Components::CardAcquiringDispute]), sweep_id: T.nilable(::String), schedule_id: T.nilable(::String), occurrence_id: T.nilable(::String), payment_link_code: T.nilable(::String), sales_tax_amount: T.nilable(Models::Components::Amount), foreign_id: T.nilable(::String)).void }
        def initialize(transfer_id:, created_on:, source: nil, destination: nil, completed_on: nil, status: nil, failure_reason: nil, amount: nil, description: nil, metadata: nil, facilitator_fee: nil, moov_fee: nil, moov_fee_decimal: nil, moov_fee_details: nil, group_id: nil, cancellations: nil, refunded_amount: nil, refunds: nil, disputed_amount: nil, disputes: nil, sweep_id: nil, schedule_id: nil, occurrence_id: nil, payment_link_code: nil, sales_tax_amount: nil, foreign_id: nil)
          @transfer_id = transfer_id
          @created_on = created_on
          @source = source
          @destination = destination
          @completed_on = completed_on
          @status = status
          @failure_reason = failure_reason
          @amount = amount
          @description = description
          @metadata = metadata
          @facilitator_fee = facilitator_fee
          @moov_fee = moov_fee
          @moov_fee_decimal = moov_fee_decimal
          @moov_fee_details = moov_fee_details
          @group_id = group_id
          @cancellations = cancellations
          @refunded_amount = refunded_amount
          @refunds = refunds
          @disputed_amount = disputed_amount
          @disputes = disputes
          @sweep_id = sweep_id
          @schedule_id = schedule_id
          @occurrence_id = occurrence_id
          @payment_link_code = payment_link_code
          @sales_tax_amount = sales_tax_amount
          @foreign_id = foreign_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @transfer_id == other.transfer_id
          return false unless @created_on == other.created_on
          return false unless @source == other.source
          return false unless @destination == other.destination
          return false unless @completed_on == other.completed_on
          return false unless @status == other.status
          return false unless @failure_reason == other.failure_reason
          return false unless @amount == other.amount
          return false unless @description == other.description
          return false unless @metadata == other.metadata
          return false unless @facilitator_fee == other.facilitator_fee
          return false unless @moov_fee == other.moov_fee
          return false unless @moov_fee_decimal == other.moov_fee_decimal
          return false unless @moov_fee_details == other.moov_fee_details
          return false unless @group_id == other.group_id
          return false unless @cancellations == other.cancellations
          return false unless @refunded_amount == other.refunded_amount
          return false unless @refunds == other.refunds
          return false unless @disputed_amount == other.disputed_amount
          return false unless @disputes == other.disputes
          return false unless @sweep_id == other.sweep_id
          return false unless @schedule_id == other.schedule_id
          return false unless @occurrence_id == other.occurrence_id
          return false unless @payment_link_code == other.payment_link_code
          return false unless @sales_tax_amount == other.sales_tax_amount
          return false unless @foreign_id == other.foreign_id
          true
        end
      end
    end
  end
end
