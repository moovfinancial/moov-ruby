# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class IssuedCardTransaction
        extend T::Sig
        include Crystalline::MetadataFields


        field :card_transaction_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardTransactionID'), required: true } }

        field :issued_card_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuedCardID'), required: true } }

        field :funding_wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundingWalletID'), required: true } }
        # A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
        field :amount, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }

        field :authorized_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :merchant_data, Models::Components::IssuingMerchantData, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantData'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :authorization_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizationID') } }

        sig { params(card_transaction_id: ::String, issued_card_id: ::String, funding_wallet_id: ::String, amount: ::String, authorized_on: ::DateTime, merchant_data: Models::Components::IssuingMerchantData, created_on: ::DateTime, authorization_id: T.nilable(::String)).void }
        def initialize(card_transaction_id:, issued_card_id:, funding_wallet_id:, amount:, authorized_on:, merchant_data:, created_on:, authorization_id: nil)
          @card_transaction_id = card_transaction_id
          @issued_card_id = issued_card_id
          @funding_wallet_id = funding_wallet_id
          @amount = amount
          @authorized_on = authorized_on
          @merchant_data = merchant_data
          @created_on = created_on
          @authorization_id = authorization_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @card_transaction_id == other.card_transaction_id
          return false unless @issued_card_id == other.issued_card_id
          return false unless @funding_wallet_id == other.funding_wallet_id
          return false unless @amount == other.amount
          return false unless @authorized_on == other.authorized_on
          return false unless @merchant_data == other.merchant_data
          return false unless @created_on == other.created_on
          return false unless @authorization_id == other.authorization_id
          true
        end
      end
    end
  end
end
