# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Document
        extend T::Sig
        include Crystalline::MetadataFields


        field :document_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('documentID'), required: true } }
        # Types of documents that can be uploaded.
        field :type, Models::Components::DocumentType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::DocumentType, false) } }
        # The document's MIME type.
        field :content_type, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('contentType'), required: true } }

        field :uploaded_at, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('uploadedAt'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Optional array of errors encountered during automated parsing.
        field :parse_errors, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('parseErrors') } }

        sig { params(document_id: ::String, type: Models::Components::DocumentType, content_type: ::String, uploaded_at: ::DateTime, parse_errors: T.nilable(T::Array[::String])).void }
        def initialize(document_id:, type:, content_type:, uploaded_at:, parse_errors: nil)
          @document_id = document_id
          @type = type
          @content_type = content_type
          @uploaded_at = uploaded_at
          @parse_errors = parse_errors
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @document_id == other.document_id
          return false unless @type == other.type
          return false unless @content_type == other.content_type
          return false unless @uploaded_at == other.uploaded_at
          return false unless @parse_errors == other.parse_errors
          true
        end
      end
    end
  end
end
