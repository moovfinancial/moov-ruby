# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Where funds for a transfer originate. For the source, you must include either a `paymentMethodID` or a `transferID`.
      class CreateTransferSource
        extend T::Sig
        include Crystalline::MetadataFields

        # A `transferID` is used to create a [transfer group](https://docs.moov.io/guides/money-movement/transfer-groups/),
        # associating the new transfer with a parent transfer.
        field :transfer_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferID') } }

        field :payment_method_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodID') } }

        field :payment_token, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentToken') } }

        field :card_details, Crystalline::Nilable.new(Models::Components::CreateTransferSourceCard), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardDetails') } }

        field :ach_details, Crystalline::Nilable.new(Models::Components::CreateTransferSourceACH), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('achDetails') } }

        sig { params(transfer_id: T.nilable(::String), payment_method_id: T.nilable(::String), payment_token: T.nilable(::String), card_details: T.nilable(Models::Components::CreateTransferSourceCard), ach_details: T.nilable(Models::Components::CreateTransferSourceACH)).void }
        def initialize(transfer_id: nil, payment_method_id: nil, payment_token: nil, card_details: nil, ach_details: nil)
          @transfer_id = transfer_id
          @payment_method_id = payment_method_id
          @payment_token = payment_token
          @card_details = card_details
          @ach_details = ach_details
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @transfer_id == other.transfer_id
          return false unless @payment_method_id == other.payment_method_id
          return false unless @payment_token == other.payment_token
          return false unless @card_details == other.card_details
          return false unless @ach_details == other.ach_details
          true
        end
      end
    end
  end
end
