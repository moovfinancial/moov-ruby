# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpdateUnderwritingErrorError
        extend T::Sig
        include Crystalline::MetadataFields


        field :average_monthly_transaction_volume, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('averageMonthlyTransactionVolume') } }

        field :average_transaction_size, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('averageTransactionSize') } }

        field :max_transaction_size, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maxTransactionSize') } }

        field :volume_by_customer_type, Crystalline::Nilable.new(Models::Components::VolumeByCustomerTypeError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('volumeByCustomerType') } }

        field :card_volume_distribution, Crystalline::Nilable.new(Models::Components::CardVolumeDistributionError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardVolumeDistribution') } }

        field :fulfillment, Crystalline::Nilable.new(Models::Components::FulfillmentDetailsError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fulfillment') } }

        sig { params(average_monthly_transaction_volume: T.nilable(::String), average_transaction_size: T.nilable(::String), max_transaction_size: T.nilable(::String), volume_by_customer_type: T.nilable(Models::Components::VolumeByCustomerTypeError), card_volume_distribution: T.nilable(Models::Components::CardVolumeDistributionError), fulfillment: T.nilable(Models::Components::FulfillmentDetailsError)).void }
        def initialize(average_monthly_transaction_volume: nil, average_transaction_size: nil, max_transaction_size: nil, volume_by_customer_type: nil, card_volume_distribution: nil, fulfillment: nil)
          @average_monthly_transaction_volume = average_monthly_transaction_volume
          @average_transaction_size = average_transaction_size
          @max_transaction_size = max_transaction_size
          @volume_by_customer_type = volume_by_customer_type
          @card_volume_distribution = card_volume_distribution
          @fulfillment = fulfillment
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @average_monthly_transaction_volume == other.average_monthly_transaction_volume
          return false unless @average_transaction_size == other.average_transaction_size
          return false unless @max_transaction_size == other.max_transaction_size
          return false unless @volume_by_customer_type == other.volume_by_customer_type
          return false unless @card_volume_distribution == other.card_volume_distribution
          return false unless @fulfillment == other.fulfillment
          true
        end
      end
    end
  end
end
