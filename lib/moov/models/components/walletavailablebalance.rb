# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WalletAvailableBalance
        extend T::Sig
        include Crystalline::MetadataFields

        # A 3-letter ISO 4217 currency code.
        field :currency, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('currency'), required: true } }
        # Quantity in the smallest unit of the specified currency. 
        # 
        # In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
        field :value, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('value'), required: true } }

        field :value_decimal, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('valueDecimal'), required: true } }

        sig { params(currency: ::String, value: ::Integer, value_decimal: ::String).void }
        def initialize(currency:, value:, value_decimal:)
          @currency = currency
          @value = value
          @value_decimal = value_decimal
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @currency == other.currency
          return false unless @value == other.value
          return false unless @value_decimal == other.value_decimal
          true
        end
      end
    end
  end
end
