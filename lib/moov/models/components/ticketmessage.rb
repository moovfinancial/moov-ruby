# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class TicketMessage
        extend T::Sig
        include Crystalline::MetadataFields


        field :author, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('author'), required: true } }

        field :body, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('body'), required: true } }

        field :sent_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sentOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(author: ::String, body: ::String, sent_on: ::DateTime).void }
        def initialize(author:, body:, sent_on:)
          @author = author
          @body = body
          @sent_on = sent_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @author == other.author
          return false unless @body == other.body
          return false unless @sent_on == other.sent_on
          true
        end
      end
    end
  end
end
