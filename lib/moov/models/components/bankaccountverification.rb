# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class BankAccountVerification
        extend T::Sig
        include Crystalline::MetadataFields


        field :verification_method, Models::Components::BankAccountVerificationMethod, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('verificationMethod'), required: true, 'decoder': Utils.enum_from_string(Models::Components::BankAccountVerificationMethod, false) } }

        field :status, Models::Components::BankAccountVerificationStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::BankAccountVerificationStatus, false) } }
        # Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
        field :exception_details, Crystalline::Nilable.new(Models::Components::BankAccountException), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('exceptionDetails') } }

        sig { params(verification_method: Models::Components::BankAccountVerificationMethod, status: Models::Components::BankAccountVerificationStatus, exception_details: T.nilable(Models::Components::BankAccountException)).void }
        def initialize(verification_method:, status:, exception_details: nil)
          @verification_method = verification_method
          @status = status
          @exception_details = exception_details
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @verification_method == other.verification_method
          return false unless @status == other.status
          return false unless @exception_details == other.exception_details
          true
        end
      end
    end
  end
end
