# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Residual
        extend T::Sig
        include Crystalline::MetadataFields


        field :residual_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('residualID'), required: true } }

        field :partner_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partnerAccountID'), required: true } }

        field :period_start, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('periodStart'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :period_end, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('periodEnd'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :merchant_fees, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantFees'), required: true } }

        field :partner_cost, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partnerCost'), required: true } }

        field :net_income, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('netIncome'), required: true } }
        #   The decimal-formatted numerical string of the revenue split for partner.
        #   
        #   For example, 2.25% is '2.25'.
        field :revenue_share, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('revenueShare'), required: true } }

        field :residual_amount, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('residualAmount'), required: true } }

        field :moov_share, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('moovShare'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(residual_id: ::String, partner_account_id: ::String, period_start: ::DateTime, period_end: ::DateTime, merchant_fees: Models::Components::AmountDecimal, partner_cost: Models::Components::AmountDecimal, net_income: Models::Components::AmountDecimal, revenue_share: ::String, residual_amount: Models::Components::AmountDecimal, moov_share: Models::Components::AmountDecimal, created_on: ::DateTime, updated_on: ::DateTime).void }
        def initialize(residual_id:, partner_account_id:, period_start:, period_end:, merchant_fees:, partner_cost:, net_income:, revenue_share:, residual_amount:, moov_share:, created_on:, updated_on:)
          @residual_id = residual_id
          @partner_account_id = partner_account_id
          @period_start = period_start
          @period_end = period_end
          @merchant_fees = merchant_fees
          @partner_cost = partner_cost
          @net_income = net_income
          @revenue_share = revenue_share
          @residual_amount = residual_amount
          @moov_share = moov_share
          @created_on = created_on
          @updated_on = updated_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @residual_id == other.residual_id
          return false unless @partner_account_id == other.partner_account_id
          return false unless @period_start == other.period_start
          return false unless @period_end == other.period_end
          return false unless @merchant_fees == other.merchant_fees
          return false unless @partner_cost == other.partner_cost
          return false unless @net_income == other.net_income
          return false unless @revenue_share == other.revenue_share
          return false unless @residual_amount == other.residual_amount
          return false unless @moov_share == other.moov_share
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          true
        end
      end
    end
  end
end
