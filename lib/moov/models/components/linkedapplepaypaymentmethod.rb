# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class LinkedApplePayPaymentMethod
        extend T::Sig
        include Crystalline::MetadataFields

        # The new payment method's ID.
        field :payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodID'), required: true } }
        # The payment method type that represents a payment rail and directionality
        field :payment_method_type, Models::Components::PaymentMethodType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::PaymentMethodType, false) } }
        # Describes an Apple Pay token on a Moov account.
        field :apple_pay, Models::Components::ApplePayResponse, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('applePay'), required: true } }

        sig { params(payment_method_id: ::String, payment_method_type: Models::Components::PaymentMethodType, apple_pay: Models::Components::ApplePayResponse).void }
        def initialize(payment_method_id:, payment_method_type:, apple_pay:)
          @payment_method_id = payment_method_id
          @payment_method_type = payment_method_type
          @apple_pay = apple_pay
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @payment_method_id == other.payment_method_id
          return false unless @payment_method_type == other.payment_method_type
          return false unless @apple_pay == other.apple_pay
          true
        end
      end
    end
  end
end
