# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateProductOption
        extend T::Sig
        include Crystalline::MetadataFields

        # The display name of a product option.
        field :name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name'), required: true } }
        # A detailed description of the option.
        # 
        # - Must be valid UTF-8 text
        # - Supports Markdown for formatting
        # - HTML is not permitted and will be rejected
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # The adjustment applied to a product's base price by this option. Can be negative, positive, or zero.
        field :price_modifier, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('priceModifier') } }
        # Assign previously uploaded images to a product or option.
        field :images, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::AssignProductImage)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('images') } }

        sig { params(name: ::String, description: T.nilable(::String), price_modifier: T.nilable(Models::Components::AmountDecimal), images: T.nilable(T::Array[Models::Components::AssignProductImage])).void }
        def initialize(name:, description: nil, price_modifier: nil, images: nil)
          @name = name
          @description = description
          @price_modifier = price_modifier
          @images = images
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @description == other.description
          return false unless @price_modifier == other.price_modifier
          return false unless @images == other.images
          true
        end
      end
    end
  end
end
