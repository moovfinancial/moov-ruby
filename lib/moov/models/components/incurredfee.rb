# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A fee incurred by a user.
      class IncurredFee
        extend T::Sig
        include Crystalline::MetadataFields


        field :fee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeID') } }

        field :account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID') } }

        field :wallet_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletID') } }

        field :created_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :fee_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeName') } }

        field :amount, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount') } }
        # The entity that generated the fee.
        field :generated_by, Crystalline::Nilable.new(Models::Components::GeneratedBy), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('generatedBy') } }

        sig { params(fee_id: T.nilable(::String), account_id: T.nilable(::String), wallet_id: T.nilable(::String), created_on: T.nilable(::DateTime), fee_name: T.nilable(::String), amount: T.nilable(Models::Components::AmountDecimal), generated_by: T.nilable(Models::Components::GeneratedBy)).void }
        def initialize(fee_id: nil, account_id: nil, wallet_id: nil, created_on: nil, fee_name: nil, amount: nil, generated_by: nil)
          @fee_id = fee_id
          @account_id = account_id
          @wallet_id = wallet_id
          @created_on = created_on
          @fee_name = fee_name
          @amount = amount
          @generated_by = generated_by
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @fee_id == other.fee_id
          return false unless @account_id == other.account_id
          return false unless @wallet_id == other.wallet_id
          return false unless @created_on == other.created_on
          return false unless @fee_name == other.fee_name
          return false unless @amount == other.amount
          return false unless @generated_by == other.generated_by
          true
        end
      end
    end
  end
end
