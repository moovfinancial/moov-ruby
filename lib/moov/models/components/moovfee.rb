# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Moov fee charged to an account involved in a transfer.
      class MoovFee
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the account that fees were charged to.
        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }
        # Indicates whether the account charged was the partner, source, or destination of the transfer.
        field :transfer_party, Models::Components::TransferParty, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferParty'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TransferParty, false) } }
        # The total amount of fees charged to the account.
        field :total_amount, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('totalAmount'), required: true } }
        # List of fee IDs that sum to the totalAmount.
        field :fee_i_ds, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeIDs'), required: true } }

        sig { params(account_id: ::String, transfer_party: Models::Components::TransferParty, total_amount: Models::Components::AmountDecimal, fee_i_ds: T::Array[::String]).void }
        def initialize(account_id:, transfer_party:, total_amount:, fee_i_ds:)
          @account_id = account_id
          @transfer_party = transfer_party
          @total_amount = total_amount
          @fee_i_ds = fee_i_ds
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @transfer_party == other.transfer_party
          return false unless @total_amount == other.total_amount
          return false unless @fee_i_ds == other.fee_i_ds
          true
        end
      end
    end
  end
end
