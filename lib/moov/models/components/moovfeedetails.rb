# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Processing and pass-through costs that add up to the moovFee.
      class MoovFeeDetails
        extend T::Sig
        include Crystalline::MetadataFields

        # Moov processing fee. String type represents dollars with up to 9 decimal place precision.
        field :moov_processing, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('moovProcessing'), required: true } }
        # Card scheme fees accrued during authorization and settlement. String type represents dollars with up to 9 decimal place precision.
        field :card_scheme, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardScheme') } }
        # Network interchange fee for Visa, Mastercard, or Discover. String type represents dollars with up to 9 decimal place precision.
        field :interchange, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('interchange') } }
        # Network discount fee for American Express. String type represents dollars with up to 9 decimal place precision.
        field :discount, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('discount') } }

        sig { params(moov_processing: ::String, card_scheme: T.nilable(::String), interchange: T.nilable(::String), discount: T.nilable(::String)).void }
        def initialize(moov_processing:, card_scheme: nil, interchange: nil, discount: nil)
          @moov_processing = moov_processing
          @card_scheme = card_scheme
          @interchange = interchange
          @discount = discount
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @moov_processing == other.moov_processing
          return false unless @card_scheme == other.card_scheme
          return false unless @interchange == other.interchange
          return false unless @discount == other.discount
          true
        end
      end
    end
  end
end
