# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A detailed breakdown of other card-related fees.
      class OtherCardFees
        extend T::Sig
        include Crystalline::MetadataFields

        # Fees for disputes.
        field :disputes, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputes'), required: true } }
        # Fees for card account updater services.
        field :card_account_updater, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAccountUpdater'), required: true } }
        # Fees for card verification.
        field :card_verification, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardVerification'), required: true } }
        # Fees for name verification.
        field :name_verification, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('nameVerification'), required: true } }
        # Total other card fees.
        field :total, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total'), required: true } }

        sig { params(disputes: Models::Components::BillingCountAndAmount, card_account_updater: Models::Components::BillingCountAndAmount, card_verification: Models::Components::BillingCountAndAmount, name_verification: Models::Components::BillingCountAndAmount, total: Models::Components::BillingCountAndAmount).void }
        def initialize(disputes:, card_account_updater:, card_verification:, name_verification:, total:)
          @disputes = disputes
          @card_account_updater = card_account_updater
          @card_verification = card_verification
          @name_verification = name_verification
          @total = total
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @disputes == other.disputes
          return false unless @card_account_updater == other.card_account_updater
          return false unless @card_verification == other.card_verification
          return false unless @name_verification == other.name_verification
          return false unless @total == other.total
          true
        end
      end
    end
  end
end
