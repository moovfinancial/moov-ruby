# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class AuthTokenRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # The type of grant being requested.
        # 
        #   - `client_credentials`: A grant type used by clients to obtain an access token
        #   - `refresh_token`: A grant type used by clients to obtain a new access token using a refresh token
        field :grant_type, Models::Components::GrantType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('grant_type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::GrantType, false) }, 'form': { 'field_name': 'grant_type' } }
        # Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
        field :client_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('client_id') }, 'form': { 'field_name': 'client_id' } }
        # Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
        field :client_secret, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('client_secret') }, 'form': { 'field_name': 'client_secret' } }
        # A space delimited list of scopes. Required when `grant_type` is `client_credentials`.
        field :scope, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scope') }, 'form': { 'field_name': 'scope' } }
        # The refresh_token returned alongside the access token being refreshed. Required when `grant_type` is `refresh_token`.
        field :refresh_token, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refresh_token') }, 'form': { 'field_name': 'refresh_token' } }

        sig { params(grant_type: Models::Components::GrantType, client_id: T.nilable(::String), client_secret: T.nilable(::String), scope: T.nilable(::String), refresh_token: T.nilable(::String)).void }
        def initialize(grant_type:, client_id: nil, client_secret: nil, scope: nil, refresh_token: nil)
          @grant_type = grant_type
          @client_id = client_id
          @client_secret = client_secret
          @scope = scope
          @refresh_token = refresh_token
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @grant_type == other.grant_type
          return false unless @client_id == other.client_id
          return false unless @client_secret == other.client_secret
          return false unless @scope == other.scope
          return false unless @refresh_token == other.refresh_token
          true
        end
      end
    end
  end
end
