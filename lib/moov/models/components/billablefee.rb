# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class BillableFee
        extend T::Sig
        include Crystalline::MetadataFields

        # Specifies the pricing model used for the calculation of the final fee.
        field :fee_model, Models::Components::FeeModel, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeModel'), required: true, 'decoder': Utils.enum_from_string(Models::Components::FeeModel, false) } }

        field :fee_category, Models::Components::FeeCategory, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeCategory'), required: true, 'decoder': Utils.enum_from_string(Models::Components::FeeCategory, false) } }

        field :billable_fee_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billableFeeID') } }
        # A unique code identifying a charge.
        field :billable_event, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billableEvent') } }
        # Specifies the name of the fee that will be billed.
        field :fee_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeName') } }
        # Defines the specific parameters used for fee calculation.
        field :fee_properties, Crystalline::Nilable.new(Models::Components::FeeProperties), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeProperties') } }
        # Defines the specific conditions that must be met for the fee to be applied.
        field :fee_conditions, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeConditions') } }

        sig { params(fee_model: Models::Components::FeeModel, fee_category: Models::Components::FeeCategory, billable_fee_id: T.nilable(::String), billable_event: T.nilable(::String), fee_name: T.nilable(::String), fee_properties: T.nilable(Models::Components::FeeProperties), fee_conditions: T.nilable(T::Hash[Symbol, ::Object])).void }
        def initialize(fee_model:, fee_category:, billable_fee_id: nil, billable_event: nil, fee_name: nil, fee_properties: nil, fee_conditions: nil)
          @fee_model = fee_model
          @fee_category = fee_category
          @billable_fee_id = billable_fee_id
          @billable_event = billable_event
          @fee_name = fee_name
          @fee_properties = fee_properties
          @fee_conditions = fee_conditions
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @fee_model == other.fee_model
          return false unless @fee_category == other.fee_category
          return false unless @billable_fee_id == other.billable_fee_id
          return false unless @billable_event == other.billable_event
          return false unless @fee_name == other.fee_name
          return false unless @fee_properties == other.fee_properties
          return false unless @fee_conditions == other.fee_conditions
          true
        end
      end
    end
  end
end
