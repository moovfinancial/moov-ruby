# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Manual
        extend T::Sig
        include Crystalline::MetadataFields


        field :accepted_date, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedDate') } }

        field :accepted_domain, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedDomain') } }

        field :accepted_ip, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedIP') } }

        field :accepted_user_agent, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedUserAgent') } }

        sig { params(accepted_date: T.nilable(::String), accepted_domain: T.nilable(::String), accepted_ip: T.nilable(::String), accepted_user_agent: T.nilable(::String)).void }
        def initialize(accepted_date: nil, accepted_domain: nil, accepted_ip: nil, accepted_user_agent: nil)
          @accepted_date = accepted_date
          @accepted_domain = accepted_domain
          @accepted_ip = accepted_ip
          @accepted_user_agent = accepted_user_agent
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @accepted_date == other.accepted_date
          return false unless @accepted_domain == other.accepted_domain
          return false unless @accepted_ip == other.accepted_ip
          return false unless @accepted_user_agent == other.accepted_user_agent
          true
        end
      end
    end
  end
end
