# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes an individual.
      class IndividualProfile
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, Models::Components::IndividualName, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name'), required: true } }

        field :phone, Crystalline::Nilable.new(Models::Components::PhoneNumber), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phone') } }

        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }

        field :address, Crystalline::Nilable.new(Models::Components::Address), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('address') } }
        # Indicates whether this individual's birth date has been provided.
        field :birth_date_provided, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('birthDateProvided') } }
        # Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this individual.
        field :government_id_provided, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('governmentIDProvided') } }

        sig { params(name: Models::Components::IndividualName, phone: T.nilable(Models::Components::PhoneNumber), email: T.nilable(::String), address: T.nilable(Models::Components::Address), birth_date_provided: T.nilable(T::Boolean), government_id_provided: T.nilable(T::Boolean)).void }
        def initialize(name:, phone: nil, email: nil, address: nil, birth_date_provided: nil, government_id_provided: nil)
          @name = name
          @phone = phone
          @email = email
          @address = address
          @birth_date_provided = birth_date_provided
          @government_id_provided = government_id_provided
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @phone == other.phone
          return false unless @email == other.email
          return false unless @address == other.address
          return false unless @birth_date_provided == other.birth_date_provided
          return false unless @government_id_provided == other.government_id_provided
          true
        end
      end
    end
  end
end
