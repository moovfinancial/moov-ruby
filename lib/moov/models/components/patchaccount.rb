# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes the fields available when patching a Moov account.
      class PatchAccount
        extend T::Sig
        include Crystalline::MetadataFields

        # Describes the fields available when patching a profile.
        # Each object can be patched independent of patching the other fields.
        field :profile, Crystalline::Nilable.new(Models::Components::PatchProfile), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('profile') } }

        field :terms_of_service, Crystalline::Nilable.new(Crystalline::Union.new(Models::Components::TermsOfServiceTokenUpdate, Models::Components::ManualTermsOfServiceUpdate)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('termsOfService') } }

        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        field :settings, Crystalline::Nilable.new(Models::Components::CreateAccountSettings), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('settings') } }

        field :metadata, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata') } }

        field :customer_support, Crystalline::Nilable.new(Models::Components::PatchAccountCustomerSupport), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('customerSupport') } }

        sig { params(profile: T.nilable(Models::Components::PatchProfile), terms_of_service: T.nilable(T.any(Models::Components::TermsOfServiceTokenUpdate, Models::Components::ManualTermsOfServiceUpdate)), foreign_id: T.nilable(::String), settings: T.nilable(Models::Components::CreateAccountSettings), metadata: T.nilable(T::Hash[Symbol, ::String]), customer_support: T.nilable(Models::Components::PatchAccountCustomerSupport)).void }
        def initialize(profile: nil, terms_of_service: nil, foreign_id: nil, settings: nil, metadata: nil, customer_support: nil)
          @profile = profile
          @terms_of_service = terms_of_service
          @foreign_id = foreign_id
          @settings = settings
          @metadata = metadata
          @customer_support = customer_support
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @profile == other.profile
          return false unless @terms_of_service == other.terms_of_service
          return false unless @foreign_id == other.foreign_id
          return false unless @settings == other.settings
          return false unless @metadata == other.metadata
          return false unless @customer_support == other.customer_support
          true
        end
      end
    end
  end
end
