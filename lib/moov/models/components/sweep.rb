# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Sweep
        extend T::Sig
        include Crystalline::MetadataFields


        field :sweep_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sweepID'), required: true } }

        field :status, Models::Components::SweepStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::SweepStatus, false) } }
        # The total net amount of wallet transactions accrued in the sweep.
        field :accrued_amount, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accruedAmount'), required: true } }
        # A 3-letter ISO 4217 currency code.
        field :currency, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('currency'), required: true } }
        # The date-time the sweep began accruing transactions.
        field :accrual_started_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accrualStartedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Amount remaining in the wallet after the sweep transfer completes.
        field :residual_balance, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('residualBalance') } }
        # The date-time the sweep stopped accruing transactions.
        field :accrual_ended_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accrualEndedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # ID of the payment method.
        field :push_payment_method_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pushPaymentMethodID') } }
        # ID of the payment method.
        field :pull_payment_method_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullPaymentMethodID') } }

        field :transfer_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferID') } }
        # Amount that is transferred.
        field :transfer_amount, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferAmount') } }
        # The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
        field :statement_descriptor, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statementDescriptor') } }
        # The subtotal of each transaction type contributing to the sweep's accrued amount.
        field :subtotals, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::SweepSubtotal)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('subtotals') } }

        sig { params(sweep_id: ::String, status: Models::Components::SweepStatus, accrued_amount: ::String, currency: ::String, accrual_started_on: ::DateTime, residual_balance: T.nilable(::String), accrual_ended_on: T.nilable(::DateTime), push_payment_method_id: T.nilable(::String), pull_payment_method_id: T.nilable(::String), transfer_id: T.nilable(::String), transfer_amount: T.nilable(::String), statement_descriptor: T.nilable(::String), subtotals: T.nilable(T::Array[Models::Components::SweepSubtotal])).void }
        def initialize(sweep_id:, status:, accrued_amount:, currency:, accrual_started_on:, residual_balance: nil, accrual_ended_on: nil, push_payment_method_id: nil, pull_payment_method_id: nil, transfer_id: nil, transfer_amount: nil, statement_descriptor: nil, subtotals: nil)
          @sweep_id = sweep_id
          @status = status
          @accrued_amount = accrued_amount
          @currency = currency
          @accrual_started_on = accrual_started_on
          @residual_balance = residual_balance
          @accrual_ended_on = accrual_ended_on
          @push_payment_method_id = push_payment_method_id
          @pull_payment_method_id = pull_payment_method_id
          @transfer_id = transfer_id
          @transfer_amount = transfer_amount
          @statement_descriptor = statement_descriptor
          @subtotals = subtotals
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @sweep_id == other.sweep_id
          return false unless @status == other.status
          return false unless @accrued_amount == other.accrued_amount
          return false unless @currency == other.currency
          return false unless @accrual_started_on == other.accrual_started_on
          return false unless @residual_balance == other.residual_balance
          return false unless @accrual_ended_on == other.accrual_ended_on
          return false unless @push_payment_method_id == other.push_payment_method_id
          return false unless @pull_payment_method_id == other.pull_payment_method_id
          return false unless @transfer_id == other.transfer_id
          return false unless @transfer_amount == other.transfer_amount
          return false unless @statement_descriptor == other.statement_descriptor
          return false unless @subtotals == other.subtotals
          true
        end
      end
    end
  end
end
