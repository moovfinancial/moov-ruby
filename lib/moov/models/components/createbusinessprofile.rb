# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateBusinessProfile
        extend T::Sig
        include Crystalline::MetadataFields

        # The legal name under which the entity is registered.
        field :legal_business_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('legalBusinessName'), required: true } }
        # A registered trade name under which the business operates, if different from its legal name.
        field :doing_business_as, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('doingBusinessAs') } }
        # The type of entity represented by this business.
        field :business_type, Crystalline::Nilable.new(Models::Components::BusinessType), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('businessType'), 'decoder': Utils.enum_from_string(Models::Components::BusinessType, true) } }

        field :address, Crystalline::Nilable.new(Models::Components::Address), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('address') } }

        field :phone, Crystalline::Nilable.new(Models::Components::PhoneNumber), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phone') } }

        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }

        field :website, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('website') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.
        field :tax_id, Crystalline::Nilable.new(Models::Components::TaxID), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('taxID') } }

        field :industry_codes, Crystalline::Nilable.new(Models::Components::IndustryCodes), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('industryCodes') } }
        # Classification identifier for the industry. Use the [GET industries](https://docs.moov.io/api/enrichment/form-shortening/industries/get/) endpoint to retrieve an array of valid industry details for a merchant, inducing all industry field values.
        field :industry, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('industry') } }
        # If the business is a financial institution, this field describes its primary regulator.
        field :primary_regulator, Crystalline::Nilable.new(Models::Components::PrimaryRegulator), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('primaryRegulator'), 'decoder': Utils.enum_from_string(Models::Components::PrimaryRegulator, true) } }

        sig { params(legal_business_name: ::String, doing_business_as: T.nilable(::String), business_type: T.nilable(Models::Components::BusinessType), address: T.nilable(Models::Components::Address), phone: T.nilable(Models::Components::PhoneNumber), email: T.nilable(::String), website: T.nilable(::String), description: T.nilable(::String), tax_id: T.nilable(Models::Components::TaxID), industry_codes: T.nilable(Models::Components::IndustryCodes), industry: T.nilable(::String), primary_regulator: T.nilable(Models::Components::PrimaryRegulator)).void }
        def initialize(legal_business_name:, doing_business_as: nil, business_type: nil, address: nil, phone: nil, email: nil, website: nil, description: nil, tax_id: nil, industry_codes: nil, industry: nil, primary_regulator: nil)
          @legal_business_name = legal_business_name
          @doing_business_as = doing_business_as
          @business_type = business_type
          @address = address
          @phone = phone
          @email = email
          @website = website
          @description = description
          @tax_id = tax_id
          @industry_codes = industry_codes
          @industry = industry
          @primary_regulator = primary_regulator
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @legal_business_name == other.legal_business_name
          return false unless @doing_business_as == other.doing_business_as
          return false unless @business_type == other.business_type
          return false unless @address == other.address
          return false unless @phone == other.phone
          return false unless @email == other.email
          return false unless @website == other.website
          return false unless @description == other.description
          return false unless @tax_id == other.tax_id
          return false unless @industry_codes == other.industry_codes
          return false unless @industry == other.industry
          return false unless @primary_regulator == other.primary_regulator
          true
        end
      end
    end
  end
end
