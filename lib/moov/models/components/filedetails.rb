# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes a file linked to a Moov account.
      class FileDetails
        extend T::Sig
        include Crystalline::MetadataFields


        field :file_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fileID'), required: true } }

        field :file_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fileName'), required: true } }

        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }
        # The file's purpose.
        field :file_purpose, Models::Components::FilePurpose, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('filePurpose'), required: true, 'decoder': Utils.enum_from_string(Models::Components::FilePurpose, false) } }
        # The file's status.
        field :file_status, Models::Components::FileStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fileStatus'), required: true, 'decoder': Utils.enum_from_string(Models::Components::FileStatus, false) } }

        field :metadata, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata'), required: true } }

        field :file_size_bytes, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fileSizeBytes'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :decision_reason, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('decisionReason') } }

        sig { params(file_id: ::String, file_name: ::String, account_id: ::String, file_purpose: Models::Components::FilePurpose, file_status: Models::Components::FileStatus, metadata: ::String, file_size_bytes: ::Integer, created_on: ::DateTime, updated_on: ::DateTime, decision_reason: T.nilable(::String)).void }
        def initialize(file_id:, file_name:, account_id:, file_purpose:, file_status:, metadata:, file_size_bytes:, created_on:, updated_on:, decision_reason: nil)
          @file_id = file_id
          @file_name = file_name
          @account_id = account_id
          @file_purpose = file_purpose
          @file_status = file_status
          @metadata = metadata
          @file_size_bytes = file_size_bytes
          @created_on = created_on
          @updated_on = updated_on
          @decision_reason = decision_reason
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @file_id == other.file_id
          return false unless @file_name == other.file_name
          return false unless @account_id == other.account_id
          return false unless @file_purpose == other.file_purpose
          return false unless @file_status == other.file_status
          return false unless @metadata == other.metadata
          return false unless @file_size_bytes == other.file_size_bytes
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @decision_reason == other.decision_reason
          true
        end
      end
    end
  end
end
