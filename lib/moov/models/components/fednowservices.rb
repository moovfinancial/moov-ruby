# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class FedNowServices
        extend T::Sig
        include Crystalline::MetadataFields

        # Indicates if the institution can receive instant payments.
        field :receive_payments, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('receivePayments'), required: true } }
        # Indicates if the institution can send instant payments.
        field :send_payments, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sendPayments'), required: true } }
        # Indicates if the institution can process request for payment messages.
        field :request_for_payment, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('requestForPayment'), required: true } }

        sig { params(receive_payments: T::Boolean, send_payments: T::Boolean, request_for_payment: T::Boolean).void }
        def initialize(receive_payments:, send_payments:, request_for_payment:)
          @receive_payments = receive_payments
          @send_payments = send_payments
          @request_for_payment = request_for_payment
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @receive_payments == other.receive_payments
          return false unless @send_payments == other.send_payments
          return false unless @request_for_payment == other.request_for_payment
          true
        end
      end
    end
  end
end
