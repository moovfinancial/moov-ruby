# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CardVolumeDistribution
        extend T::Sig
        include Crystalline::MetadataFields


        field :ecommerce_percentage, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ecommercePercentage'), required: true } }

        field :card_present_percentage, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardPresentPercentage'), required: true } }

        field :mail_or_phone_percentage, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mailOrPhonePercentage'), required: true } }

        field :debt_repayment_percentage, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('debtRepaymentPercentage'), required: true } }

        sig { params(ecommerce_percentage: ::Integer, card_present_percentage: ::Integer, mail_or_phone_percentage: ::Integer, debt_repayment_percentage: ::Integer).void }
        def initialize(ecommerce_percentage:, card_present_percentage:, mail_or_phone_percentage:, debt_repayment_percentage:)
          @ecommerce_percentage = ecommerce_percentage
          @card_present_percentage = card_present_percentage
          @mail_or_phone_percentage = mail_or_phone_percentage
          @debt_repayment_percentage = debt_repayment_percentage
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @ecommerce_percentage == other.ecommerce_percentage
          return false unless @card_present_percentage == other.card_present_percentage
          return false unless @mail_or_phone_percentage == other.mail_or_phone_percentage
          return false unless @debt_repayment_percentage == other.debt_repayment_percentage
          true
        end
      end
    end
  end
end
