# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class ReceiptResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for the receipt request.
        field :receipt_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('receiptID'), required: true } }
        # AccountID for which the receipt request was created.
        field :created_by, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdBy'), required: true } }
        # The type of receipt.
        field :kind, Models::Components::ReceiptKind, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('kind'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ReceiptKind, false) } }
        # The date and time the receipt was disabled.
        field :disabled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disabledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The email address the receipt is sent to.
        # Either email or emailAccountID will be in the response, but not both.
        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }
        # The accountID the receipt is sent to.
        # Either email or emailAccountID will be in the response, but not both.
        field :email_account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('emailAccountID') } }
        # The ID of the transfer associated with this receipt.
        # Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
        field :for_transfer_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('forTransferID') } }
        # The ID of the schedule associated with this receipt.
        # Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
        field :for_schedule_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('forScheduleID') } }
        # The ID of the schedule occurrence associated with this receipt.
        # Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
        field :for_occurrence_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('forOccurrenceID') } }
        # The list of receipts that have been sent.
        field :sent_for, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::SentReceipt)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sentFor') } }

        sig { params(receipt_id: ::String, created_by: ::String, kind: Models::Components::ReceiptKind, disabled_on: T.nilable(::DateTime), email: T.nilable(::String), email_account_id: T.nilable(::String), for_transfer_id: T.nilable(::String), for_schedule_id: T.nilable(::String), for_occurrence_id: T.nilable(::String), sent_for: T.nilable(T::Array[Models::Components::SentReceipt])).void }
        def initialize(receipt_id:, created_by:, kind:, disabled_on: nil, email: nil, email_account_id: nil, for_transfer_id: nil, for_schedule_id: nil, for_occurrence_id: nil, sent_for: nil)
          @receipt_id = receipt_id
          @created_by = created_by
          @kind = kind
          @disabled_on = disabled_on
          @email = email
          @email_account_id = email_account_id
          @for_transfer_id = for_transfer_id
          @for_schedule_id = for_schedule_id
          @for_occurrence_id = for_occurrence_id
          @sent_for = sent_for
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @receipt_id == other.receipt_id
          return false unless @created_by == other.created_by
          return false unless @kind == other.kind
          return false unless @disabled_on == other.disabled_on
          return false unless @email == other.email
          return false unless @email_account_id == other.email_account_id
          return false unless @for_transfer_id == other.for_transfer_id
          return false unless @for_schedule_id == other.for_schedule_id
          return false unless @for_occurrence_id == other.for_occurrence_id
          return false unless @sent_for == other.sent_for
          true
        end
      end
    end
  end
end
