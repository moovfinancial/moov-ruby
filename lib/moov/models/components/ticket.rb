# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Ticket
        extend T::Sig
        include Crystalline::MetadataFields


        field :ticket_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ticketID'), required: true } }

        field :number, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('number'), required: true } }

        field :title, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('title'), required: true } }

        field :contact, Models::Components::TicketContact, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('contact'), required: true } }

        field :status, Models::Components::TicketStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TicketStatus, false) } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :latest_message_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('latestMessageOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :closed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('closedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        sig { params(ticket_id: ::String, number: ::Integer, title: ::String, contact: Models::Components::TicketContact, status: Models::Components::TicketStatus, created_on: ::DateTime, updated_on: ::DateTime, latest_message_on: T.nilable(::DateTime), closed_on: T.nilable(::DateTime), foreign_id: T.nilable(::String)).void }
        def initialize(ticket_id:, number:, title:, contact:, status:, created_on:, updated_on:, latest_message_on: nil, closed_on: nil, foreign_id: nil)
          @ticket_id = ticket_id
          @number = number
          @title = title
          @contact = contact
          @status = status
          @created_on = created_on
          @updated_on = updated_on
          @latest_message_on = latest_message_on
          @closed_on = closed_on
          @foreign_id = foreign_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @ticket_id == other.ticket_id
          return false unless @number == other.number
          return false unless @title == other.title
          return false unless @contact == other.contact
          return false unless @status == other.status
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @latest_message_on == other.latest_message_on
          return false unless @closed_on == other.closed_on
          return false unless @foreign_id == other.foreign_id
          true
        end
      end
    end
  end
end
