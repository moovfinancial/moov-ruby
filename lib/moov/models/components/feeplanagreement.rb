# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class FeePlanAgreement
        extend T::Sig
        include Crystalline::MetadataFields


        field :agreement_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('agreementID'), required: true } }

        field :plan_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('planID'), required: true } }
        # The name of the agreement.
        field :name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name'), required: true } }

        field :accepted_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :status, Models::Components::FeePlanAgreementStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::FeePlanAgreementStatus, false) } }
        # Specifies the card processing pricing model
        field :card_acquiring_model, Models::Components::CardAcquiringModel, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAcquiringModel'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardAcquiringModel, false) } }

        field :billable_fees, Crystalline::Array.new(Models::Components::BillableFee), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billableFees'), required: true } }
        # The minimum spending amount that must be met in the billing period. If actual usage is below the minimum amount, account is charged the difference.
        field :minimum_commitment, Models::Components::MinimumCommitment, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minimumCommitment'), required: true } }
        # Fixed recurring amount paid in the billing period regardless of usage.
        field :monthly_platform_fee, Models::Components::MonthlyPlatformFee, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('monthlyPlatformFee'), required: true } }

        field :account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID') } }
        # The description of the agreement.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        sig { params(agreement_id: ::String, plan_id: ::String, name: ::String, accepted_on: ::DateTime, status: Models::Components::FeePlanAgreementStatus, card_acquiring_model: Models::Components::CardAcquiringModel, billable_fees: T::Array[Models::Components::BillableFee], minimum_commitment: Models::Components::MinimumCommitment, monthly_platform_fee: Models::Components::MonthlyPlatformFee, account_id: T.nilable(::String), description: T.nilable(::String)).void }
        def initialize(agreement_id:, plan_id:, name:, accepted_on:, status:, card_acquiring_model:, billable_fees:, minimum_commitment:, monthly_platform_fee:, account_id: nil, description: nil)
          @agreement_id = agreement_id
          @plan_id = plan_id
          @name = name
          @accepted_on = accepted_on
          @status = status
          @card_acquiring_model = card_acquiring_model
          @billable_fees = billable_fees
          @minimum_commitment = minimum_commitment
          @monthly_platform_fee = monthly_platform_fee
          @account_id = account_id
          @description = description
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @agreement_id == other.agreement_id
          return false unless @plan_id == other.plan_id
          return false unless @name == other.name
          return false unless @accepted_on == other.accepted_on
          return false unless @status == other.status
          return false unless @card_acquiring_model == other.card_acquiring_model
          return false unless @billable_fees == other.billable_fees
          return false unless @minimum_commitment == other.minimum_commitment
          return false unless @monthly_platform_fee == other.monthly_platform_fee
          return false unless @account_id == other.account_id
          return false unless @description == other.description
          true
        end
      end
    end
  end
end
