# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class RefundCardDetails
        extend T::Sig
        include Crystalline::MetadataFields


        field :status, Models::Components::RefundCardStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::RefundCardStatus, false) } }

        field :failure_code, Crystalline::Nilable.new(Models::Components::CardTransactionFailureCode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('failureCode'), 'decoder': Utils.enum_from_string(Models::Components::CardTransactionFailureCode, true) } }

        field :initiated_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('initiatedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :confirmed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('confirmedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :settled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('settledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :failed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('failedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :completed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(status: Models::Components::RefundCardStatus, failure_code: T.nilable(Models::Components::CardTransactionFailureCode), initiated_on: T.nilable(::DateTime), confirmed_on: T.nilable(::DateTime), settled_on: T.nilable(::DateTime), failed_on: T.nilable(::DateTime), completed_on: T.nilable(::DateTime)).void }
        def initialize(status:, failure_code: nil, initiated_on: nil, confirmed_on: nil, settled_on: nil, failed_on: nil, completed_on: nil)
          @status = status
          @failure_code = failure_code
          @initiated_on = initiated_on
          @confirmed_on = confirmed_on
          @settled_on = settled_on
          @failed_on = failed_on
          @completed_on = completed_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @failure_code == other.failure_code
          return false unless @initiated_on == other.initiated_on
          return false unless @confirmed_on == other.confirmed_on
          return false unless @settled_on == other.settled_on
          return false unless @failed_on == other.failed_on
          return false unless @completed_on == other.completed_on
          true
        end
      end
    end
  end
end
