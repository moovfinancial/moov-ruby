# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Details of a card refund.
      class CardAcquiringRefund
        extend T::Sig
        include Crystalline::MetadataFields

        # Identifier for the refund.
        field :refund_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refundID'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :status, Models::Components::RefundStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::RefundStatus, false) } }

        field :amount, Models::Components::Amount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }

        field :card_details, Crystalline::Nilable.new(Models::Components::RefundCardDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardDetails') } }

        sig { params(refund_id: ::String, created_on: ::DateTime, updated_on: ::DateTime, status: Models::Components::RefundStatus, amount: Models::Components::Amount, card_details: T.nilable(Models::Components::RefundCardDetails)).void }
        def initialize(refund_id:, created_on:, updated_on:, status:, amount:, card_details: nil)
          @refund_id = refund_id
          @created_on = created_on
          @updated_on = updated_on
          @status = status
          @amount = amount
          @card_details = card_details
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @refund_id == other.refund_id
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @status == other.status
          return false unless @amount == other.amount
          return false unless @card_details == other.card_details
          true
        end
      end
    end
  end
end
