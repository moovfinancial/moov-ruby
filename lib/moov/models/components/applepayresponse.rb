# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes an Apple Pay token on a Moov account.
      class ApplePayResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # The card brand.
        field :brand, Models::Components::CardBrand, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('brand'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardBrand, false) } }
        # The type of the card.
        field :card_type, Models::Components::CardType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardType, false) } }
        #   User-friendly name of the tokenized card returned by Apple.
        #   
        #   It usually contains the brand and the last four digits of the underlying card.
        #   There is no standard format.
        field :card_display_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardDisplayName'), required: true } }
        # Uniquely identifies a linked payment card or token.
        # For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
        # This field can be used to identify specific payment methods across multiple accounts on your platform.
        field :fingerprint, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fingerprint'), required: true } }
        # The expiration date of the card or token.
        field :expiration, Models::Components::CardExpiration, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration'), required: true } }
        # The last four digits of the Apple Pay token, which may differ from the tokenized card's last four digits.
        field :dynamic_last_four, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('dynamicLastFour'), required: true } }
        # Country where the underlying card was issued.
        field :issuer_country, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuerCountry') } }

        sig { params(brand: Models::Components::CardBrand, card_type: Models::Components::CardType, card_display_name: ::String, fingerprint: ::String, expiration: Models::Components::CardExpiration, dynamic_last_four: ::String, issuer_country: T.nilable(::String)).void }
        def initialize(brand:, card_type:, card_display_name:, fingerprint:, expiration:, dynamic_last_four:, issuer_country: nil)
          @brand = brand
          @card_type = card_type
          @card_display_name = card_display_name
          @fingerprint = fingerprint
          @expiration = expiration
          @dynamic_last_four = dynamic_last_four
          @issuer_country = issuer_country
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @brand == other.brand
          return false unless @card_type == other.card_type
          return false unless @card_display_name == other.card_display_name
          return false unless @fingerprint == other.fingerprint
          return false unless @expiration == other.expiration
          return false unless @dynamic_last_four == other.dynamic_last_four
          return false unless @issuer_country == other.issuer_country
          true
        end
      end
    end
  end
end
