# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class EstimatedActivity
        extend T::Sig
        include Crystalline::MetadataFields


        field :average_transaction_amount, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('averageTransactionAmount') } }

        field :maximum_transaction_amount, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maximumTransactionAmount') } }
        # The low value in each range is included. The high value in each range is excluded.
        field :monthly_volume_range, Crystalline::Nilable.new(Models::Components::MonthlyVolumeRange), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('monthlyVolumeRange'), 'decoder': Utils.enum_from_string(Models::Components::MonthlyVolumeRange, true) } }

        sig { params(average_transaction_amount: T.nilable(::Integer), maximum_transaction_amount: T.nilable(::Integer), monthly_volume_range: T.nilable(Models::Components::MonthlyVolumeRange)).void }
        def initialize(average_transaction_amount: nil, maximum_transaction_amount: nil, monthly_volume_range: nil)
          @average_transaction_amount = average_transaction_amount
          @maximum_transaction_amount = maximum_transaction_amount
          @monthly_volume_range = monthly_volume_range
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @average_transaction_amount == other.average_transaction_amount
          return false unless @maximum_transaction_amount == other.maximum_transaction_amount
          return false unless @monthly_volume_range == other.monthly_volume_range
          true
        end
      end
    end
  end
end
