# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      #   Contains the encrypted payment data.
      # 
      #   Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymenttoken/1916115-paymentdata) 
      #   for more information.
      class LinkApplePaymentData
        extend T::Sig
        include Crystalline::MetadataFields

        # Specifies the encryption used for the payment token ("EC_v1" or "RSA_v1").
        field :version, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('version'), required: true } }
        # The encrypted, base64-encoded payment data.
        field :data, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('data'), required: true } }
        # A base64 encoded signature of the payment and header data.
        field :signature, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('signature'), required: true } }
        # Information needed to decrypt Apple Pay payment data.
        # 
        # Refer to [Apple's documentation](https://developer.apple.com/documentation/passkit/payment-token-format-reference#Header-keys-and-values) 
        # for more information.
        field :header, Models::Components::ApplePayHeader, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('header'), required: true } }

        sig { params(version: ::String, data: ::String, signature: ::String, header: Models::Components::ApplePayHeader).void }
        def initialize(version:, data:, signature:, header:)
          @version = version
          @data = data
          @signature = signature
          @header = header
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @version == other.version
          return false unless @data == other.data
          return false unless @signature == other.signature
          return false unless @header == other.header
          true
        end
      end
    end
  end
end
