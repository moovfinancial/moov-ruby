# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Represents individual and business data necessary to facilitate the enabling of a capability for an account.
      class CapabilityRequirement
        extend T::Sig
        include Crystalline::MetadataFields


        field :currently_due, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::RequirementID)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('currentlyDue') } }

        field :errors, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::RequirementError)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('errors') } }

        sig { params(currently_due: T.nilable(T::Array[Models::Components::RequirementID]), errors: T.nilable(T::Array[Models::Components::RequirementError])).void }
        def initialize(currently_due: nil, errors: nil)
          @currently_due = currently_due
          @errors = errors
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @currently_due == other.currently_due
          return false unless @errors == other.errors
          true
        end
      end
    end
  end
end
