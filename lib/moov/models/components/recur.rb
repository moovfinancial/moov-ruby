# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Defines configuration for recurring transfers.
      class Recur
        extend T::Sig
        include Crystalline::MetadataFields

        #   RRule as defined by RFC 5545 (https://www.rfc-editor.org/rfc/rfc5545#section-3.3.10). 
        #   Generators available online at the following sites - https://freetools.textmagic.com/rrule-generator, https://jkbrzt.github.io/rrule/
        field :recurrence_rule, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('recurrenceRule'), required: true } }
        # Defines the attributes of a transfer.
        field :run_transfer, Models::Components::RunTransfer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('runTransfer'), required: true } }
        # True if the RRule set runs indefinitely.
        field :indefinite, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('indefinite') } }

        field :start, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('start'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(recurrence_rule: ::String, run_transfer: Models::Components::RunTransfer, indefinite: T.nilable(T::Boolean), start: T.nilable(::DateTime)).void }
        def initialize(recurrence_rule:, run_transfer:, indefinite: nil, start: nil)
          @recurrence_rule = recurrence_rule
          @run_transfer = run_transfer
          @indefinite = indefinite
          @start = start
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @recurrence_rule == other.recurrence_rule
          return false unless @run_transfer == other.run_transfer
          return false unless @indefinite == other.indefinite
          return false unless @start == other.start
          true
        end
      end
    end
  end
end
