# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class InstitutionsSearchResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :ach, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::ACHInstitution)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ach'), required: true } }

        field :rtp, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::RTPInstitution)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('rtp'), required: true } }

        field :wire, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::WireInstitution)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('wire'), required: true } }

        field :fednow, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::FedNowInstitution)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fednow'), required: true } }

        sig { params(ach: T.nilable(T::Array[Models::Components::ACHInstitution]), rtp: T.nilable(T::Array[Models::Components::RTPInstitution]), wire: T.nilable(T::Array[Models::Components::WireInstitution]), fednow: T.nilable(T::Array[Models::Components::FedNowInstitution])).void }
        def initialize(ach: nil, rtp: nil, wire: nil, fednow: nil)
          @ach = ach
          @rtp = rtp
          @wire = wire
          @fednow = fednow
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @ach == other.ach
          return false unless @rtp == other.rtp
          return false unless @wire == other.wire
          return false unless @fednow == other.fednow
          true
        end
      end
    end
  end
end
