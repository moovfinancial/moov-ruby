# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class SweepSubtotal
        extend T::Sig
        include Crystalline::MetadataFields

        # The type of wallet transaction the subtotal is for.
        field :type, Models::Components::WalletTransactionType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WalletTransactionType, false) } }
        # The number of transactions of this type accrued in the sweep.
        field :count, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('count'), required: true } }
        # The value of transactions of this type accrued in the sweep.
        field :amount, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }

        sig { params(type: Models::Components::WalletTransactionType, count: ::Integer, amount: Models::Components::AmountDecimal).void }
        def initialize(type:, count:, amount:)
          @type = type
          @count = count
          @amount = amount
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @type == other.type
          return false unless @count == other.count
          return false unless @amount == other.amount
          true
        end
      end
    end
  end
end
