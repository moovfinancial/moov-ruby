# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateBusinessError
        extend T::Sig
        include Crystalline::MetadataFields


        field :legal_business_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('legalBusinessName') } }

        field :doing_business_as, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('doingBusinessAs') } }

        field :business_type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('businessType') } }

        field :address, Crystalline::Nilable.new(Models::Components::AddressError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('address') } }

        field :phone, Crystalline::Nilable.new(Models::Components::PhoneNumberError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phone') } }

        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }

        field :website, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('website') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        field :tax_id, Crystalline::Nilable.new(Models::Components::CreateBusinessErrorTaxID), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('taxID') } }

        field :industry_codes, Crystalline::Nilable.new(Models::Components::CreateBusinessErrorIndustryCodes), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('industryCodes') } }

        field :primary_regulator, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('primaryRegulator') } }

        sig { params(legal_business_name: T.nilable(::String), doing_business_as: T.nilable(::String), business_type: T.nilable(::String), address: T.nilable(Models::Components::AddressError), phone: T.nilable(Models::Components::PhoneNumberError), email: T.nilable(::String), website: T.nilable(::String), description: T.nilable(::String), tax_id: T.nilable(Models::Components::CreateBusinessErrorTaxID), industry_codes: T.nilable(Models::Components::CreateBusinessErrorIndustryCodes), primary_regulator: T.nilable(::String)).void }
        def initialize(legal_business_name: nil, doing_business_as: nil, business_type: nil, address: nil, phone: nil, email: nil, website: nil, description: nil, tax_id: nil, industry_codes: nil, primary_regulator: nil)
          @legal_business_name = legal_business_name
          @doing_business_as = doing_business_as
          @business_type = business_type
          @address = address
          @phone = phone
          @email = email
          @website = website
          @description = description
          @tax_id = tax_id
          @industry_codes = industry_codes
          @primary_regulator = primary_regulator
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @legal_business_name == other.legal_business_name
          return false unless @doing_business_as == other.doing_business_as
          return false unless @business_type == other.business_type
          return false unless @address == other.address
          return false unless @phone == other.phone
          return false unless @email == other.email
          return false unless @website == other.website
          return false unless @description == other.description
          return false unless @tax_id == other.tax_id
          return false unless @industry_codes == other.industry_codes
          return false unless @primary_regulator == other.primary_regulator
          true
        end
      end
    end
  end
end
