# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class AchParticipant
        extend T::Sig
        include Crystalline::MetadataFields


        field :ach_location, Models::Components::AchLocation, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('achLocation'), required: true } }

        field :customer_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('customerName'), required: true } }

        field :new_routing_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('newRoutingNumber'), required: true } }

        field :office_code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('officeCode'), required: true } }

        field :phone_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phoneNumber'), required: true } }

        field :record_type_code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('recordTypeCode'), required: true } }

        field :revised, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('revised'), required: true } }

        field :routing_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('routingNumber'), required: true } }

        field :servicing_frb_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('servicingFRBNumber'), required: true } }

        field :status_code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statusCode'), required: true } }

        field :view_code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('viewCode'), required: true } }

        field :clean_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cleanName'), required: true } }

        field :logo, Crystalline::Nilable.new(Models::Components::Logo), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('logo'), required: true } }

        sig { params(ach_location: Models::Components::AchLocation, customer_name: ::String, new_routing_number: ::String, office_code: ::String, phone_number: ::String, record_type_code: ::String, revised: ::String, routing_number: ::String, servicing_frb_number: ::String, status_code: ::String, view_code: ::String, clean_name: ::String, logo: T.nilable(Models::Components::Logo)).void }
        def initialize(ach_location:, customer_name:, new_routing_number:, office_code:, phone_number:, record_type_code:, revised:, routing_number:, servicing_frb_number:, status_code:, view_code:, clean_name:, logo: nil)
          @ach_location = ach_location
          @customer_name = customer_name
          @new_routing_number = new_routing_number
          @office_code = office_code
          @phone_number = phone_number
          @record_type_code = record_type_code
          @revised = revised
          @routing_number = routing_number
          @servicing_frb_number = servicing_frb_number
          @status_code = status_code
          @view_code = view_code
          @clean_name = clean_name
          @logo = logo
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @ach_location == other.ach_location
          return false unless @customer_name == other.customer_name
          return false unless @new_routing_number == other.new_routing_number
          return false unless @office_code == other.office_code
          return false unless @phone_number == other.phone_number
          return false unless @record_type_code == other.record_type_code
          return false unless @revised == other.revised
          return false unless @routing_number == other.routing_number
          return false unless @servicing_frb_number == other.servicing_frb_number
          return false unless @status_code == other.status_code
          return false unless @view_code == other.view_code
          return false unless @clean_name == other.clean_name
          return false unless @logo == other.logo
          true
        end
      end
    end
  end
end
