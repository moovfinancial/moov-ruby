# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class ScheduleResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :destination_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('destinationAccountID'), required: true } }
        # The operating mode for an account.
        field :mode, Models::Components::Mode, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mode'), required: true, 'decoder': Utils.enum_from_string(Models::Components::Mode, false) } }

        field :owner_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ownerAccountID'), required: true } }

        field :partner_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partnerAccountID'), required: true } }

        field :schedule_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scheduleID'), required: true } }

        field :source_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sourceAccountID'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Simple description to place on the transfer.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        field :occurrences, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::OccurrencesResponse)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('occurrences') } }
        # Defines configuration for recurring transfers.
        field :recur, Crystalline::Nilable.new(Models::Components::Recur), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('recur') } }

        field :disabled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disabledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(destination_account_id: ::String, mode: Models::Components::Mode, owner_account_id: ::String, partner_account_id: ::String, schedule_id: ::String, source_account_id: ::String, created_on: ::DateTime, updated_on: ::DateTime, description: T.nilable(::String), occurrences: T.nilable(T::Array[Models::Components::OccurrencesResponse]), recur: T.nilable(Models::Components::Recur), disabled_on: T.nilable(::DateTime)).void }
        def initialize(destination_account_id:, mode:, owner_account_id:, partner_account_id:, schedule_id:, source_account_id:, created_on:, updated_on:, description: nil, occurrences: nil, recur: nil, disabled_on: nil)
          @destination_account_id = destination_account_id
          @mode = mode
          @owner_account_id = owner_account_id
          @partner_account_id = partner_account_id
          @schedule_id = schedule_id
          @source_account_id = source_account_id
          @created_on = created_on
          @updated_on = updated_on
          @description = description
          @occurrences = occurrences
          @recur = recur
          @disabled_on = disabled_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @destination_account_id == other.destination_account_id
          return false unless @mode == other.mode
          return false unless @owner_account_id == other.owner_account_id
          return false unless @partner_account_id == other.partner_account_id
          return false unless @schedule_id == other.schedule_id
          return false unless @source_account_id == other.source_account_id
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @description == other.description
          return false unless @occurrences == other.occurrences
          return false unless @recur == other.recur
          return false unless @disabled_on == other.disabled_on
          true
        end
      end
    end
  end
end
