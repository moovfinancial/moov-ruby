# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A receipt request for a specific transfer, schedule, or schedule occurrence.
      class ReceiptRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :kind, Models::Components::Kind, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('kind'), required: true, 'decoder': Utils.enum_from_string(Models::Components::Kind, false) } }
        # The email address to send the receipt to.
        # Either email or emailAccountID must be provided, but not both.
        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }
        # The accountID to send the receipt to.
        # Either email or emailAccountID must be provided, but not both.
        field :email_account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('emailAccountID') } }
        # The ID of the transfer associated with this receipt.
        # Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
        field :for_transfer_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('forTransferID') } }
        # The ID of the schedule associated with this receipt.
        # Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
        field :for_schedule_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('forScheduleID') } }
        # The ID of the schedule occurrence associated with this receipt.
        # Exactly one of forTransferID, forScheduleID, or forOccurrenceID must be provided.
        field :for_occurrence_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('forOccurrenceID') } }

        sig { params(kind: Models::Components::Kind, email: T.nilable(::String), email_account_id: T.nilable(::String), for_transfer_id: T.nilable(::String), for_schedule_id: T.nilable(::String), for_occurrence_id: T.nilable(::String)).void }
        def initialize(kind:, email: nil, email_account_id: nil, for_transfer_id: nil, for_schedule_id: nil, for_occurrence_id: nil)
          @kind = kind
          @email = email
          @email_account_id = email_account_id
          @for_transfer_id = for_transfer_id
          @for_schedule_id = for_schedule_id
          @for_occurrence_id = for_occurrence_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @kind == other.kind
          return false unless @email == other.email
          return false unless @email_account_id == other.email_account_id
          return false unless @for_transfer_id == other.for_transfer_id
          return false unless @for_schedule_id == other.for_schedule_id
          return false unless @for_occurrence_id == other.for_occurrence_id
          true
        end
      end
    end
  end
end
