# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes payment card details captured with tap or in-person payment.
      class TerminalCard
        extend T::Sig
        include Crystalline::MetadataFields

        # How the card information was entered into the point of sale terminal.
        field :entry_mode, Crystalline::Nilable.new(Models::Components::EntryMode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('entryMode'), 'decoder': Utils.enum_from_string(Models::Components::EntryMode, true) } }
        # The card brand.
        field :brand, Crystalline::Nilable.new(Models::Components::CardBrand), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('brand'), 'decoder': Utils.enum_from_string(Models::Components::CardBrand, true) } }

        field :bin, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('bin') } }
        # The type of the card.
        field :card_type, Crystalline::Nilable.new(Models::Components::CardType), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardType'), 'decoder': Utils.enum_from_string(Models::Components::CardType, true) } }
        # The expiration date of the card or token.
        field :expiration, Crystalline::Nilable.new(Models::Components::CardExpiration), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration') } }
        # Uniquely identifies a linked payment card or token.
        # For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
        # This field can be used to identify specific payment methods across multiple accounts on your platform.
        field :fingerprint, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fingerprint') } }
        # The name of the cardholder as it appears on the card.
        field :holder_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('holderName') } }
        # Financial institution that issued the card.
        field :issuer, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuer') } }
        # Country where the card was issued.
        field :issuer_country, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuerCountry') } }
        # Last four digits of the card number
        field :last_four_card_number, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lastFourCardNumber') } }
        # Identifier for the point of sale terminal application.
        field :application_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('applicationID') } }
        # Name label for the point of sale terminal application.
        field :application_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('applicationName') } }

        sig { params(entry_mode: T.nilable(Models::Components::EntryMode), brand: T.nilable(Models::Components::CardBrand), bin: T.nilable(::String), card_type: T.nilable(Models::Components::CardType), expiration: T.nilable(Models::Components::CardExpiration), fingerprint: T.nilable(::String), holder_name: T.nilable(::String), issuer: T.nilable(::String), issuer_country: T.nilable(::String), last_four_card_number: T.nilable(::String), application_id: T.nilable(::String), application_name: T.nilable(::String)).void }
        def initialize(entry_mode: nil, brand: nil, bin: nil, card_type: nil, expiration: nil, fingerprint: nil, holder_name: nil, issuer: nil, issuer_country: nil, last_four_card_number: nil, application_id: nil, application_name: nil)
          @entry_mode = entry_mode
          @brand = brand
          @bin = bin
          @card_type = card_type
          @expiration = expiration
          @fingerprint = fingerprint
          @holder_name = holder_name
          @issuer = issuer
          @issuer_country = issuer_country
          @last_four_card_number = last_four_card_number
          @application_id = application_id
          @application_name = application_name
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @entry_mode == other.entry_mode
          return false unless @brand == other.brand
          return false unless @bin == other.bin
          return false unless @card_type == other.card_type
          return false unless @expiration == other.expiration
          return false unless @fingerprint == other.fingerprint
          return false unless @holder_name == other.holder_name
          return false unless @issuer == other.issuer
          return false unless @issuer_country == other.issuer_country
          return false unless @last_four_card_number == other.last_four_card_number
          return false unless @application_id == other.application_id
          return false unless @application_name == other.application_name
          true
        end
      end
    end
  end
end
