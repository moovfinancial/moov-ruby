# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateTransfer
        extend T::Sig
        include Crystalline::MetadataFields

        # Where funds for a transfer originate. For the source, you must include either a `paymentMethodID` or a `transferID`.
        field :source, Models::Components::CreateTransferSource, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('source'), required: true } }
        # The final stage of a transfer and the ultimate recipient of the funds.
        field :destination, Models::Components::CreateTransferDestination, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('destination'), required: true } }

        field :amount, Models::Components::Amount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }
        # Total or markup fee.
        field :facilitator_fee, Crystalline::Nilable.new(Models::Components::FacilitatorFee), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('facilitatorFee') } }
        # An optional description of the transfer that is used on receipts and for your own internal use.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # Free-form key-value pair list. Useful for storing information that is not captured elsewhere.
        field :metadata, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata') } }
        # Optional sales tax amount. `transfer.amount.value` should be inclusive of any sales tax and represents the total amount charged.
        field :sales_tax_amount, Crystalline::Nilable.new(Models::Components::Amount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('salesTaxAmount') } }
        # Optional alias from a foreign/external system which can be used to reference this resource.
        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        sig { params(source: Models::Components::CreateTransferSource, destination: Models::Components::CreateTransferDestination, amount: Models::Components::Amount, facilitator_fee: T.nilable(Models::Components::FacilitatorFee), description: T.nilable(::String), metadata: T.nilable(T::Hash[Symbol, ::String]), sales_tax_amount: T.nilable(Models::Components::Amount), foreign_id: T.nilable(::String)).void }
        def initialize(source:, destination:, amount:, facilitator_fee: nil, description: nil, metadata: nil, sales_tax_amount: nil, foreign_id: nil)
          @source = source
          @destination = destination
          @amount = amount
          @facilitator_fee = facilitator_fee
          @description = description
          @metadata = metadata
          @sales_tax_amount = sales_tax_amount
          @foreign_id = foreign_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @source == other.source
          return false unless @destination == other.destination
          return false unless @amount == other.amount
          return false unless @facilitator_fee == other.facilitator_fee
          return false unless @description == other.description
          return false unless @metadata == other.metadata
          return false unless @sales_tax_amount == other.sales_tax_amount
          return false unless @foreign_id == other.foreign_id
          true
        end
      end
    end
  end
end
