# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Represents a count of items and their total amount.
      class BillingCountAndAmount
        extend T::Sig
        include Crystalline::MetadataFields

        # The number of items.
        field :count, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('count'), required: true } }
        # The total amount.
        field :amount, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }

        sig { params(count: ::Integer, amount: Models::Components::AmountDecimal).void }
        def initialize(count:, amount:)
          @count = count
          @amount = amount
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @count == other.count
          return false unless @amount == other.amount
          true
        end
      end
    end
  end
end
