# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A detailed breakdown of card acquiring fees by card brand.
      class CardAcquiringFees
        extend T::Sig
        include Crystalline::MetadataFields

        # Fees associated with Visa transactions.
        field :visa, Models::Components::CardBrandFees, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('visa'), required: true } }
        # Fees associated with Mastercard transactions.
        field :mastercard, Models::Components::CardBrandFees, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mastercard'), required: true } }
        # Fees associated with Discover transactions.
        field :discover, Models::Components::CardBrandFees, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('discover'), required: true } }
        # Fees associated with American Express transactions.
        field :american_express, Models::Components::CardBrandFees, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('americanExpress'), required: true } }

        sig { params(visa: Models::Components::CardBrandFees, mastercard: Models::Components::CardBrandFees, discover: Models::Components::CardBrandFees, american_express: Models::Components::CardBrandFees).void }
        def initialize(visa:, mastercard:, discover:, american_express:)
          @visa = visa
          @mastercard = mastercard
          @discover = discover
          @american_express = american_express
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @visa == other.visa
          return false unless @mastercard == other.mastercard
          return false unless @discover == other.discover
          return false unless @american_express == other.american_express
          true
        end
      end
    end
  end
end
