# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Request to upload a file for an account.
      class FileUploadRequestMultiPart
        extend T::Sig
        include Crystalline::MetadataFields

        # The file to be added. Valid types are `csv`, `png`, `jpeg`, `pdf`.
        field :file, Models::Components::FileUploadRequestMultiPartFile, { 'multipart_form': { 'file': true, 'field_name': 'file' } }
        # The file's purpose.
        field :file_purpose, Models::Components::FilePurpose, { 'multipart_form': { 'field_name': 'filePurpose' } }
        # Additional metadata to be stored with the file, formatted as a JSON string.
        # 
        # Valid keys are `representative_id`, `comment`, `requirement_id`, `error_code`.
        field :metadata, Crystalline::Nilable.new(::String), { 'multipart_form': { 'field_name': 'metadata' } }

        sig { params(file: Models::Components::FileUploadRequestMultiPartFile, file_purpose: Models::Components::FilePurpose, metadata: T.nilable(::String)).void }
        def initialize(file:, file_purpose:, metadata: nil)
          @file = file
          @file_purpose = file_purpose
          @metadata = metadata
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @file == other.file
          return false unless @file_purpose == other.file_purpose
          return false unless @metadata == other.metadata
          true
        end
      end
    end
  end
end
