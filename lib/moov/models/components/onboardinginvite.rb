# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class OnboardingInvite
        extend T::Sig
        include Crystalline::MetadataFields

        # A unique code that identifies an onboarding invite.
        field :code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('code'), required: true } }
        # A unique URL, including the invite code, that the recipient can follow to redeem the invitation.
        field :link, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('link'), required: true } }
        # List of [scopes](https://docs.moov.io/api/authentication/scopes/) you request to use on this
        # account. These values are used to determine what can be done with the account onboarded.
        field :scopes, Crystalline::Array.new(Models::Components::ApplicationScope), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scopes'), required: true } }
        #   List of [capabilities](https://docs.moov.io/guides/accounts/capabilities/) you intend to request for this
        #   account. These values are used to determine what information to collect from the user during onboarding.
        field :capabilities, Crystalline::Array.new(Models::Components::CapabilityID), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('capabilities'), required: true } }
        # List of fee plan codes to assign the account created by the invitee.
        field :fee_plan_codes, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feePlanCodes'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The scopes requested by the inviter.
        field :return_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('returnURL') } }
        # The terms of service URL set by the inviter.
        field :terms_of_service_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('termsOfServiceURL') } }
        # The account ID of the account that redeemed the invite.
        field :redeemed_account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('redeemedAccountID') } }

        field :prefill, Crystalline::Nilable.new(Models::Components::CreateAccount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('prefill') } }
        # The account that created the onboarding invite.
        field :partner, Crystalline::Nilable.new(Models::Components::OnboardingPartnerAccount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partner') } }

        field :revoked_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('revokedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :redeemed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('redeemedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(code: ::String, link: ::String, scopes: T::Array[Models::Components::ApplicationScope], capabilities: T::Array[Models::Components::CapabilityID], fee_plan_codes: T::Array[::String], created_on: ::DateTime, return_url: T.nilable(::String), terms_of_service_url: T.nilable(::String), redeemed_account_id: T.nilable(::String), prefill: T.nilable(Models::Components::CreateAccount), partner: T.nilable(Models::Components::OnboardingPartnerAccount), revoked_on: T.nilable(::DateTime), redeemed_on: T.nilable(::DateTime)).void }
        def initialize(code:, link:, scopes:, capabilities:, fee_plan_codes:, created_on:, return_url: nil, terms_of_service_url: nil, redeemed_account_id: nil, prefill: nil, partner: nil, revoked_on: nil, redeemed_on: nil)
          @code = code
          @link = link
          @scopes = scopes
          @capabilities = capabilities
          @fee_plan_codes = fee_plan_codes
          @created_on = created_on
          @return_url = return_url
          @terms_of_service_url = terms_of_service_url
          @redeemed_account_id = redeemed_account_id
          @prefill = prefill
          @partner = partner
          @revoked_on = revoked_on
          @redeemed_on = redeemed_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @code == other.code
          return false unless @link == other.link
          return false unless @scopes == other.scopes
          return false unless @capabilities == other.capabilities
          return false unless @fee_plan_codes == other.fee_plan_codes
          return false unless @created_on == other.created_on
          return false unless @return_url == other.return_url
          return false unless @terms_of_service_url == other.terms_of_service_url
          return false unless @redeemed_account_id == other.redeemed_account_id
          return false unless @prefill == other.prefill
          return false unless @partner == other.partner
          return false unless @revoked_on == other.revoked_on
          return false unless @redeemed_on == other.redeemed_on
          true
        end
      end
    end
  end
end
