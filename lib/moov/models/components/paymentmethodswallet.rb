# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class PaymentMethodsWallet
        extend T::Sig
        include Crystalline::MetadataFields


        field :wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletID'), required: true } }

        field :partner_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partnerAccountID'), required: true } }
        # Type of a wallet.
        #   - `default`: The system-generated wallet automatically created when an account is granted the wallet capability.
        #   - `general`: An additional, user-defined wallet created via API or Dashboard.
        field :wallet_type, Models::Components::WalletType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WalletType, false) } }

        sig { params(wallet_id: ::String, partner_account_id: ::String, wallet_type: Models::Components::WalletType).void }
        def initialize(wallet_id:, partner_account_id:, wallet_type:)
          @wallet_id = wallet_id
          @partner_account_id = partner_account_id
          @wallet_type = wallet_type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @wallet_id == other.wallet_id
          return false unless @partner_account_id == other.partner_account_id
          return false unless @wallet_type == other.wallet_type
          true
        end
      end
    end
  end
end
