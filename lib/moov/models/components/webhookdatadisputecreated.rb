# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WebhookDataDisputeCreated
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }

        field :transfer_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferID'), required: true } }

        field :transaction_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionID'), required: true } }

        field :dispute_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputeID'), required: true } }
        # The status of a particular dispute. 
        # 
        # Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
        field :status, Models::Components::DisputeStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::DisputeStatus, false) } }
        # The phase of a dispute within the dispute lifecycle.
        field :phase, Models::Components::DisputePhase, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phase'), required: true, 'decoder': Utils.enum_from_string(Models::Components::DisputePhase, false) } }

        sig { params(account_id: ::String, transfer_id: ::String, transaction_id: ::String, dispute_id: ::String, status: Models::Components::DisputeStatus, phase: Models::Components::DisputePhase).void }
        def initialize(account_id:, transfer_id:, transaction_id:, dispute_id:, status:, phase:)
          @account_id = account_id
          @transfer_id = transfer_id
          @transaction_id = transaction_id
          @dispute_id = dispute_id
          @status = status
          @phase = phase
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @transfer_id == other.transfer_id
          return false unless @transaction_id == other.transaction_id
          return false unless @dispute_id == other.dispute_id
          return false unless @status == other.status
          return false unless @phase == other.phase
          true
        end
      end
    end
  end
end
