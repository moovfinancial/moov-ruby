# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Fields for identifying an authorized individual.
      class CreateAuthorizedUserUpdate
        extend T::Sig
        include Crystalline::MetadataFields


        field :first_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('firstName') } }

        field :last_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lastName') } }

        field :birth_date, Crystalline::Nilable.new(Models::Components::BirthDateUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('birthDate') } }

        sig { params(first_name: T.nilable(::String), last_name: T.nilable(::String), birth_date: T.nilable(Models::Components::BirthDateUpdate)).void }
        def initialize(first_name: nil, last_name: nil, birth_date: nil)
          @first_name = first_name
          @last_name = last_name
          @birth_date = birth_date
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @first_name == other.first_name
          return false unless @last_name == other.last_name
          return false unless @birth_date == other.birth_date
          true
        end
      end
    end
  end
end
