# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A detailed breakdown of instant payment fees.
      class InstantPaymentFees
        extend T::Sig
        include Crystalline::MetadataFields

        # Fees for RTP credit transactions.
        field :rtp_credit_transaction, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('rtpCreditTransaction'), required: true } }
        # Fees for push-to-card transactions.
        field :push_to_card_transaction, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pushToCardTransaction'), required: true } }
        # Fees for pull-from-card transactions.
        field :pull_from_card_transaction, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullFromCardTransaction'), required: true } }
        # Total instant payment fees.
        field :total, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total'), required: true } }
        # Fees for RTP declines.
        field :rtp_decline, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('rtpDecline') } }
        # Fees for push-to-card declines.
        field :push_to_card_decline, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pushToCardDecline') } }
        # Fees for pull-from-card declines.
        field :pull_from_card_decline, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullFromCardDecline') } }
        # Fees for pull-from-card refunds.
        field :pull_from_card_refund, Crystalline::Nilable.new(Models::Components::BillingCountAndAmount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullFromCardRefund') } }

        sig { params(rtp_credit_transaction: Models::Components::BillingCountAndAmount, push_to_card_transaction: Models::Components::BillingCountAndAmount, pull_from_card_transaction: Models::Components::BillingCountAndAmount, total: Models::Components::BillingCountAndAmount, rtp_decline: T.nilable(Models::Components::BillingCountAndAmount), push_to_card_decline: T.nilable(Models::Components::BillingCountAndAmount), pull_from_card_decline: T.nilable(Models::Components::BillingCountAndAmount), pull_from_card_refund: T.nilable(Models::Components::BillingCountAndAmount)).void }
        def initialize(rtp_credit_transaction:, push_to_card_transaction:, pull_from_card_transaction:, total:, rtp_decline: nil, push_to_card_decline: nil, pull_from_card_decline: nil, pull_from_card_refund: nil)
          @rtp_credit_transaction = rtp_credit_transaction
          @push_to_card_transaction = push_to_card_transaction
          @pull_from_card_transaction = pull_from_card_transaction
          @total = total
          @rtp_decline = rtp_decline
          @push_to_card_decline = push_to_card_decline
          @pull_from_card_decline = pull_from_card_decline
          @pull_from_card_refund = pull_from_card_refund
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @rtp_credit_transaction == other.rtp_credit_transaction
          return false unless @push_to_card_transaction == other.push_to_card_transaction
          return false unless @pull_from_card_transaction == other.pull_from_card_transaction
          return false unless @total == other.total
          return false unless @rtp_decline == other.rtp_decline
          return false unless @push_to_card_decline == other.push_to_card_decline
          return false unless @pull_from_card_decline == other.pull_from_card_decline
          return false unless @pull_from_card_refund == other.pull_from_card_refund
          true
        end
      end
    end
  end
end
