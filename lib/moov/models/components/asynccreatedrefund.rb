# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Asynchronous refund response
      class AsyncCreatedRefund
        extend T::Sig
        include Crystalline::MetadataFields


        field :refund_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refundID'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :amount, Models::Components::Amount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }

        sig { params(refund_id: ::String, created_on: ::DateTime, amount: Models::Components::Amount).void }
        def initialize(refund_id:, created_on:, amount:)
          @refund_id = refund_id
          @created_on = created_on
          @amount = amount
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @refund_id == other.refund_id
          return false unless @created_on == other.created_on
          return false unless @amount == other.amount
          true
        end
      end
    end
  end
end
