# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Information needed to decrypt Apple Pay payment data.
      # 
      # Refer to [Apple's documentation](https://developer.apple.com/documentation/passkit/payment-token-format-reference#Header-keys-and-values) 
      # for more information.
      class ApplePayHeader
        extend T::Sig
        include Crystalline::MetadataFields

        # A base64-encoded, SHA-256 hash of the merchant's public key.
        field :public_key_hash, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('publicKeyHash'), required: true } }
        # A device-generated identifier for the transaction.
        field :transaction_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionId'), required: true } }
        # Base64-encoded ephemeral public key, used for ECC-encrypted payment data.
        field :ephemeral_public_key, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ephemeralPublicKey') } }

        sig { params(public_key_hash: ::String, transaction_id: ::String, ephemeral_public_key: T.nilable(::String)).void }
        def initialize(public_key_hash:, transaction_id:, ephemeral_public_key: nil)
          @public_key_hash = public_key_hash
          @transaction_id = transaction_id
          @ephemeral_public_key = ephemeral_public_key
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @public_key_hash == other.public_key_hash
          return false unless @transaction_id == other.transaction_id
          return false unless @ephemeral_public_key == other.ephemeral_public_key
          true
        end
      end
    end
  end
end
