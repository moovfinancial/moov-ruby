# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      #   Billing contact information as returned from Apple Pay.
      #   
      #   Refer to [Apple's documentation](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentcontact) 
      #   for more information.
      class AppleBillingContact
        extend T::Sig
        include Crystalline::MetadataFields

        # Address lines 1 and 2 for the contact.
        field :address_lines, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('addressLines') } }
        # The contact's city.
        field :locality, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('locality') } }
        # The contact's postal code.
        field :postal_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('postalCode') } }
        # The contact's two-letter state code.
        field :administrative_area, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('administrativeArea') } }
        # The contact's two-letter ISO 3166
        field :country_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('countryCode') } }

        sig { params(address_lines: T.nilable(T::Array[::String]), locality: T.nilable(::String), postal_code: T.nilable(::String), administrative_area: T.nilable(::String), country_code: T.nilable(::String)).void }
        def initialize(address_lines: nil, locality: nil, postal_code: nil, administrative_area: nil, country_code: nil)
          @address_lines = address_lines
          @locality = locality
          @postal_code = postal_code
          @administrative_area = administrative_area
          @country_code = country_code
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @address_lines == other.address_lines
          return false unless @locality == other.locality
          return false unless @postal_code == other.postal_code
          return false unless @administrative_area == other.administrative_area
          return false unless @country_code == other.country_code
          true
        end
      end
    end
  end
end
