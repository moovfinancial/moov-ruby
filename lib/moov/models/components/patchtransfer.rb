# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class PatchTransfer
        extend T::Sig
        include Crystalline::MetadataFields

        # Optional alias from a foreign/external system which can be used to reference this resource.
        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        field :metadata, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata') } }

        sig { params(foreign_id: T.nilable(::String), metadata: T.nilable(T::Hash[Symbol, ::String])).void }
        def initialize(foreign_id: nil, metadata: nil)
          @foreign_id = foreign_id
          @metadata = metadata
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @foreign_id == other.foreign_id
          return false unless @metadata == other.metadata
          true
        end
      end
    end
  end
end
