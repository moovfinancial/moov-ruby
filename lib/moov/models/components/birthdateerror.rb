# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class BirthDateError
        extend T::Sig
        include Crystalline::MetadataFields


        field :day, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('day') } }

        field :month, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('month') } }

        field :year, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('year') } }

        sig { params(day: T.nilable(::String), month: T.nilable(::String), year: T.nilable(::String)).void }
        def initialize(day: nil, month: nil, year: nil)
          @day = day
          @month = month
          @year = year
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @day == other.day
          return false unless @month == other.month
          return false unless @year == other.year
          true
        end
      end
    end
  end
end
