# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WebhookDataCardAutoUpdated
        extend T::Sig
        include Crystalline::MetadataFields


        field :card_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardID'), required: true } }

        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }
        # The results of the card update request.
        field :update_type, Models::Components::CardUpdateReason, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updateType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardUpdateReason, false) } }

        sig { params(card_id: ::String, account_id: ::String, update_type: Models::Components::CardUpdateReason).void }
        def initialize(card_id:, account_id:, update_type:)
          @card_id = card_id
          @account_id = account_id
          @update_type = update_type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @card_id == other.card_id
          return false unless @account_id == other.account_id
          return false unless @update_type == other.update_type
          true
        end
      end
    end
  end
end
