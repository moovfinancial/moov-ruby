# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class RequestCard
        extend T::Sig
        include Crystalline::MetadataFields


        field :funding_wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundingWalletID'), required: true } }
        # Fields for identifying an authorized individual.
        field :authorized_user, Models::Components::CreateAuthorizedUser, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizedUser'), required: true } }
        # Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
        field :form_factor, Models::Components::IssuedCardFormFactor, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('formFactor'), required: true, 'decoder': Utils.enum_from_string(Models::Components::IssuedCardFormFactor, false) } }
        # An optional descriptive name for the card.
        field :memo, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('memo') } }
        # The expiration date of the card or token.
        field :expiration, Crystalline::Nilable.new(Models::Components::CardExpiration), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration') } }

        field :controls, Crystalline::Nilable.new(Models::Components::IssuingControls), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('controls') } }

        sig { params(funding_wallet_id: ::String, authorized_user: Models::Components::CreateAuthorizedUser, form_factor: Models::Components::IssuedCardFormFactor, memo: T.nilable(::String), expiration: T.nilable(Models::Components::CardExpiration), controls: T.nilable(Models::Components::IssuingControls)).void }
        def initialize(funding_wallet_id:, authorized_user:, form_factor:, memo: nil, expiration: nil, controls: nil)
          @funding_wallet_id = funding_wallet_id
          @authorized_user = authorized_user
          @form_factor = form_factor
          @memo = memo
          @expiration = expiration
          @controls = controls
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @funding_wallet_id == other.funding_wallet_id
          return false unless @authorized_user == other.authorized_user
          return false unless @form_factor == other.form_factor
          return false unless @memo == other.memo
          return false unless @expiration == other.expiration
          return false unless @controls == other.controls
          true
        end
      end
    end
  end
end
