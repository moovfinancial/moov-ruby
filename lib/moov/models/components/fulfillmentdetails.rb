# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class FulfillmentDetails
        extend T::Sig
        include Crystalline::MetadataFields


        field :has_physical_goods, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('hasPhysicalGoods'), required: true } }

        field :is_shipping_product, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('isShippingProduct'), required: true } }

        field :shipment_duration_days, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('shipmentDurationDays'), required: true } }

        field :return_policy, Models::Components::ReturnPolicyType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('returnPolicy'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ReturnPolicyType, false) } }

        sig { params(has_physical_goods: T::Boolean, is_shipping_product: T::Boolean, shipment_duration_days: ::Integer, return_policy: Models::Components::ReturnPolicyType).void }
        def initialize(has_physical_goods:, is_shipping_product:, shipment_duration_days:, return_policy:)
          @has_physical_goods = has_physical_goods
          @is_shipping_product = is_shipping_product
          @shipment_duration_days = shipment_duration_days
          @return_policy = return_policy
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @has_physical_goods == other.has_physical_goods
          return false unless @is_shipping_product == other.is_shipping_product
          return false unless @shipment_duration_days == other.shipment_duration_days
          return false unless @return_policy == other.return_policy
          true
        end
      end
    end
  end
end
