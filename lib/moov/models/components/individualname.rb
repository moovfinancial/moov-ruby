# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class IndividualName
        extend T::Sig
        include Crystalline::MetadataFields

        # The individual's first given name.
        field :first_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('firstName'), required: true } }
        # The individual's family name.
        field :last_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lastName'), required: true } }
        # The individual's second given name, if any.
        field :middle_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('middleName') } }
        # Suffix of a given name.
        field :suffix, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('suffix') } }

        sig { params(first_name: ::String, last_name: ::String, middle_name: T.nilable(::String), suffix: T.nilable(::String)).void }
        def initialize(first_name:, last_name:, middle_name: nil, suffix: nil)
          @first_name = first_name
          @last_name = last_name
          @middle_name = middle_name
          @suffix = suffix
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @first_name == other.first_name
          return false unless @last_name == other.last_name
          return false unless @middle_name == other.middle_name
          return false unless @suffix == other.suffix
          true
        end
      end
    end
  end
end
