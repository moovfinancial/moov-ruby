# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class ColorsValidationError
        extend T::Sig
        include Crystalline::MetadataFields


        field :light, Crystalline::Nilable.new(Models::Components::BrandColorValidationError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('light') } }

        field :dark, Crystalline::Nilable.new(Models::Components::BrandColorValidationError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('dark') } }

        sig { params(light: T.nilable(Models::Components::BrandColorValidationError), dark: T.nilable(Models::Components::BrandColorValidationError)).void }
        def initialize(light: nil, dark: nil)
          @light = light
          @dark = dark
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @light == other.light
          return false unless @dark == other.dark
          true
        end
      end
    end
  end
end
