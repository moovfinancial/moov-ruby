# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Request to create an onboarding invite.
      class OnboardingInviteRequest
        extend T::Sig
        include Crystalline::MetadataFields

        #   List of [scopes](https://docs.moov.io/api/authentication/scopes/) you request to use on this
        #   account. These values are used to determine what can be done with the account onboarded.
        field :scopes, Crystalline::Array.new(Models::Components::ApplicationScope), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scopes'), required: true } }
        #   List of [capabilities](https://docs.moov.io/guides/accounts/capabilities/) you intend to request for this
        #   account. These values are used to determine what information to collect from the user during onboarding.
        field :capabilities, Crystalline::Array.new(Models::Components::CapabilityID), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('capabilities'), required: true } }
        # List of fee plan codes to assign the account created by the invitee.
        field :fee_plan_codes, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feePlanCodes'), required: true } }
        # Optional URL to redirect the user to after they complete the onboarding process.
        field :return_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('returnURL') } }
        # Optional URL to your organization's terms of service.
        field :terms_of_service_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('termsOfServiceURL') } }

        field :prefill, Crystalline::Nilable.new(Models::Components::CreateAccount), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('prefill') } }

        sig { params(scopes: T::Array[Models::Components::ApplicationScope], capabilities: T::Array[Models::Components::CapabilityID], fee_plan_codes: T::Array[::String], return_url: T.nilable(::String), terms_of_service_url: T.nilable(::String), prefill: T.nilable(Models::Components::CreateAccount)).void }
        def initialize(scopes:, capabilities:, fee_plan_codes:, return_url: nil, terms_of_service_url: nil, prefill: nil)
          @scopes = scopes
          @capabilities = capabilities
          @fee_plan_codes = fee_plan_codes
          @return_url = return_url
          @terms_of_service_url = terms_of_service_url
          @prefill = prefill
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @scopes == other.scopes
          return false unless @capabilities == other.capabilities
          return false unless @fee_plan_codes == other.fee_plan_codes
          return false unless @return_url == other.return_url
          return false unless @terms_of_service_url == other.terms_of_service_url
          return false unless @prefill == other.prefill
          true
        end
      end
    end
  end
end
