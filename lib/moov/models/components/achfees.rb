# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A detailed breakdown of ACH fees.
      class ACHFees
        extend T::Sig
        include Crystalline::MetadataFields

        # Fees for standard credit transfers.
        field :standard_credit, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('standardCredit'), required: true } }
        # Fees for same-day credit transfers.
        field :same_day_credit, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sameDayCredit'), required: true } }
        # Fees for debit transfers.
        field :debits, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('debits'), required: true } }
        # Fees for authorized returns.
        field :return_, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('return'), required: true } }
        # Fees for unauthorized returns.
        field :unauthorized_return, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('unauthorizedReturn'), required: true } }
        # Fees for notices of change.
        field :notice_of_change, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('noticeOfChange'), required: true } }
        # Total ACH fees.
        field :total, Models::Components::BillingCountAndAmount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total'), required: true } }

        sig { params(standard_credit: Models::Components::BillingCountAndAmount, same_day_credit: Models::Components::BillingCountAndAmount, debits: Models::Components::BillingCountAndAmount, return_: Models::Components::BillingCountAndAmount, unauthorized_return: Models::Components::BillingCountAndAmount, notice_of_change: Models::Components::BillingCountAndAmount, total: Models::Components::BillingCountAndAmount).void }
        def initialize(standard_credit:, same_day_credit:, debits:, return_:, unauthorized_return:, notice_of_change:, total:)
          @standard_credit = standard_credit
          @same_day_credit = same_day_credit
          @debits = debits
          @return_ = return_
          @unauthorized_return = unauthorized_return
          @notice_of_change = notice_of_change
          @total = total
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @standard_credit == other.standard_credit
          return false unless @same_day_credit == other.same_day_credit
          return false unless @debits == other.debits
          return false unless @return_ == other.return_
          return false unless @unauthorized_return == other.unauthorized_return
          return false unless @notice_of_change == other.notice_of_change
          return false unless @total == other.total
          true
        end
      end
    end
  end
end
