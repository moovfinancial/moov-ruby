# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Details of a successfully uploaded evidence file.
      class EvidenceUploadResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # The ID of the evidence.
        field :evidence_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceID'), required: true } }
        # The ID of the dispute the evidence is associated with.
        field :dispute_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputeID'), required: true } }
        # The name of the evidence file.
        field :filename, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('filename'), required: true } }
        # The MIME type of the evidence file.
        field :mime_type, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mimeType'), required: true } }
        # The size of the evidence file.
        field :size, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('size'), required: true } }

        field :evidence_type, Models::Components::EvidenceType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::EvidenceType, false) } }
        # The date and time the evidence was uploaded.
        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(evidence_id: ::String, dispute_id: ::String, filename: ::String, mime_type: ::String, size: ::Integer, evidence_type: Models::Components::EvidenceType, created_on: ::DateTime).void }
        def initialize(evidence_id:, dispute_id:, filename:, mime_type:, size:, evidence_type:, created_on:)
          @evidence_id = evidence_id
          @dispute_id = dispute_id
          @filename = filename
          @mime_type = mime_type
          @size = size
          @evidence_type = evidence_type
          @created_on = created_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @evidence_id == other.evidence_id
          return false unless @dispute_id == other.dispute_id
          return false unless @filename == other.filename
          return false unless @mime_type == other.mime_type
          return false unless @size == other.size
          return false unless @evidence_type == other.evidence_type
          return false unless @created_on == other.created_on
          true
        end
      end
    end
  end
end
