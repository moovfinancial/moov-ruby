# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WireServices
        extend T::Sig
        include Crystalline::MetadataFields

        # The institution's capability to process standard Fedwire funds transfers.
        field :funds_transfer_status, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundsTransferStatus'), required: true } }
        # The institution's capability for settlement-only transfers.
        field :funds_settlement_only_status, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundsSettlementOnlyStatus'), required: true } }
        # The institution's capability to handle transfers of securities.
        field :book_entry_securities_transfer_status, Crystalline::Boolean.new, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('bookEntrySecuritiesTransferStatus'), required: true } }

        sig { params(funds_transfer_status: T::Boolean, funds_settlement_only_status: T::Boolean, book_entry_securities_transfer_status: T::Boolean).void }
        def initialize(funds_transfer_status:, funds_settlement_only_status:, book_entry_securities_transfer_status:)
          @funds_transfer_status = funds_transfer_status
          @funds_settlement_only_status = funds_settlement_only_status
          @book_entry_securities_transfer_status = book_entry_securities_transfer_status
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @funds_transfer_status == other.funds_transfer_status
          return false unless @funds_settlement_only_status == other.funds_settlement_only_status
          return false unless @book_entry_securities_transfer_status == other.book_entry_securities_transfer_status
          true
        end
      end
    end
  end
end
