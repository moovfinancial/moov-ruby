# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Total or markup fee.
      class FacilitatorFee
        extend T::Sig
        include Crystalline::MetadataFields

        # Total facilitator fee in cents. Only either `total` or `totalDecimal` can be set.
        field :total, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total') } }
        # Same as `total`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
        # 
        # Only either `total` or `totalDecimal` can be set. Set this field if you expect the fee to be in fractions of a cent.
        field :total_decimal, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('totalDecimal') } }
        # Markup facilitator fee in cents. Only either `markup` or `markupDecimal` can be set.
        field :markup, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('markup') } }
        # Same as `markup`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.
        # Only either `markup` or `markupDecimal` can be set. Set this field if you expect the fee to be in fractions of a cent.
        field :markup_decimal, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('markupDecimal') } }

        sig { params(total: T.nilable(::Integer), total_decimal: T.nilable(::String), markup: T.nilable(::Integer), markup_decimal: T.nilable(::String)).void }
        def initialize(total: nil, total_decimal: nil, markup: nil, markup_decimal: nil)
          @total = total
          @total_decimal = total_decimal
          @markup = markup
          @markup_decimal = markup_decimal
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @total == other.total
          return false unless @total_decimal == other.total_decimal
          return false unless @markup == other.markup
          return false unless @markup_decimal == other.markup_decimal
          true
        end
      end
    end
  end
end
