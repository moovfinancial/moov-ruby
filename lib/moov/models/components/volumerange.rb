# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Defines the volume ranges for tiered pricing models.
      class VolumeRange
        extend T::Sig
        include Crystalline::MetadataFields

        # Specifies the lower value of a tier for the fee.
        field :from_value, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fromValue'), required: true } }
        # The flat amount for a whole tier of the fee.
        field :flat_amount, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('flatAmount'), required: true } }
        # The unit price for a specific tier of the fee.
        field :per_unit_amount, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('perUnitAmount'), required: true } }
        # Specifies the upper value of a tier for the fee.
        field :to_value, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('toValue') } }

        sig { params(from_value: ::Integer, flat_amount: Models::Components::AmountDecimal, per_unit_amount: Models::Components::AmountDecimal, to_value: T.nilable(::Integer)).void }
        def initialize(from_value:, flat_amount:, per_unit_amount:, to_value: nil)
          @from_value = from_value
          @flat_amount = flat_amount
          @per_unit_amount = per_unit_amount
          @to_value = to_value
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @from_value == other.from_value
          return false unless @flat_amount == other.flat_amount
          return false unless @per_unit_amount == other.per_unit_amount
          return false unless @to_value == other.to_value
          true
        end
      end
    end
  end
end
