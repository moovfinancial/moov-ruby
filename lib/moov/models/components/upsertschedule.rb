# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpsertSchedule
        extend T::Sig
        include Crystalline::MetadataFields

        # Simple description of what the schedule is.
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        field :occurrences, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::Occurrence)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('occurrences') } }
        # Defines configuration for recurring transfers.
        field :recur, Crystalline::Nilable.new(Models::Components::Recur), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('recur') } }

        sig { params(description: T.nilable(::String), occurrences: T.nilable(T::Array[Models::Components::Occurrence]), recur: T.nilable(Models::Components::Recur)).void }
        def initialize(description: nil, occurrences: nil, recur: nil)
          @description = description
          @occurrences = occurrences
          @recur = recur
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @description == other.description
          return false unless @occurrences == other.occurrences
          return false unless @recur == other.recur
          true
        end
      end
    end
  end
end
