# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateSweepConfig
        extend T::Sig
        include Crystalline::MetadataFields


        field :wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletID'), required: true } }

        field :status, Models::Components::SweepConfigStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::SweepConfigStatus, false) } }
        # ID of the payment method.
        field :push_payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pushPaymentMethodID'), required: true } }
        # ID of the payment method.
        field :pull_payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullPaymentMethodID'), required: true } }
        # The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
        field :statement_descriptor, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statementDescriptor') } }

        field :minimum_balance, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minimumBalance') } }

        sig { params(wallet_id: ::String, status: Models::Components::SweepConfigStatus, push_payment_method_id: ::String, pull_payment_method_id: ::String, statement_descriptor: T.nilable(::String), minimum_balance: T.nilable(::String)).void }
        def initialize(wallet_id:, status:, push_payment_method_id:, pull_payment_method_id:, statement_descriptor: nil, minimum_balance: nil)
          @wallet_id = wallet_id
          @status = status
          @push_payment_method_id = push_payment_method_id
          @pull_payment_method_id = pull_payment_method_id
          @statement_descriptor = statement_descriptor
          @minimum_balance = minimum_balance
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @wallet_id == other.wallet_id
          return false unless @status == other.status
          return false unless @push_payment_method_id == other.push_payment_method_id
          return false unless @pull_payment_method_id == other.pull_payment_method_id
          return false unless @statement_descriptor == other.statement_descriptor
          return false unless @minimum_balance == other.minimum_balance
          true
        end
      end
    end
  end
end
