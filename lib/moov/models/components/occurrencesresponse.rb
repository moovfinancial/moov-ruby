# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class OccurrencesResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :run_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('runOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Defines the attributes of a transfer.
        field :run_transfer, Models::Components::RunTransfer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('runTransfer'), required: true } }

        field :schedule_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scheduleID') } }

        field :occurrence_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('occurrenceID') } }
        # Sandbox or production account mode of this schedule.
        field :mode, Crystalline::Nilable.new(Models::Components::Mode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mode'), 'decoder': Utils.enum_from_string(Models::Components::Mode, true) } }
        # True if this was generated by a RRule.
        field :generated, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('generated') } }
        # True if the RRule set runs indefinitely.
        field :indefinite, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('indefinite') } }

        field :canceled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('canceledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :ran_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ranOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :ran_transfer_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ranTransferID') } }
        # Status of the completed occurrence.
        field :status, Crystalline::Nilable.new(Models::Components::OccurrenceStatus), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::OccurrenceStatus, true) } }
        # Contains details on why the occurrence errored.
        field :error, Crystalline::Nilable.new(Models::Components::OccurrencesResponseError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('error') } }

        sig { params(run_on: ::DateTime, run_transfer: Models::Components::RunTransfer, schedule_id: T.nilable(::String), occurrence_id: T.nilable(::String), mode: T.nilable(Models::Components::Mode), generated: T.nilable(T::Boolean), indefinite: T.nilable(T::Boolean), canceled_on: T.nilable(::DateTime), ran_on: T.nilable(::DateTime), ran_transfer_id: T.nilable(::String), status: T.nilable(Models::Components::OccurrenceStatus), error: T.nilable(Models::Components::OccurrencesResponseError)).void }
        def initialize(run_on:, run_transfer:, schedule_id: nil, occurrence_id: nil, mode: nil, generated: nil, indefinite: nil, canceled_on: nil, ran_on: nil, ran_transfer_id: nil, status: nil, error: nil)
          @run_on = run_on
          @run_transfer = run_transfer
          @schedule_id = schedule_id
          @occurrence_id = occurrence_id
          @mode = mode
          @generated = generated
          @indefinite = indefinite
          @canceled_on = canceled_on
          @ran_on = ran_on
          @ran_transfer_id = ran_transfer_id
          @status = status
          @error = error
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @run_on == other.run_on
          return false unless @run_transfer == other.run_transfer
          return false unless @schedule_id == other.schedule_id
          return false unless @occurrence_id == other.occurrence_id
          return false unless @mode == other.mode
          return false unless @generated == other.generated
          return false unless @indefinite == other.indefinite
          return false unless @canceled_on == other.canceled_on
          return false unless @ran_on == other.ran_on
          return false unless @ran_transfer_id == other.ran_transfer_id
          return false unless @status == other.status
          return false unless @error == other.error
          true
        end
      end
    end
  end
end
