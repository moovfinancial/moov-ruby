# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A billing statement for a Moov account.
      class Statement
        extend T::Sig
        include Crystalline::MetadataFields

        # The unique identifier for the statement.
        field :statement_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statementID'), required: true } }
        # The name of the statement.
        field :statement_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statementName'), required: true } }
        # The name of the statement file.
        field :file_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fileName'), required: true } }
        # The size of the statement file in bytes.
        field :file_size, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fileSize'), required: true } }
        # The start date and time of the billing period.
        field :billing_period_start_date_time, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billingPeriodStartDateTime'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The end date and time of the billing period.
        field :billing_period_end_date_time, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billingPeriodEndDateTime'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # List of subscription IDs associated with this statement.
        field :subscription_i_ds, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('subscriptionIDs'), required: true } }
        # A summary of all fees included in this statement.
        field :summary, Models::Components::BillingSummary, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('summary'), required: true } }
        # The date and time the statement was created.
        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The date and time the statement was last updated.
        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # A detailed breakdown of card acquiring fees.
        field :card_acquiring_fees, Crystalline::Nilable.new(Models::Components::CardAcquiringFees), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAcquiringFees') } }
        # A detailed breakdown of ACH fees.
        field :ach_fees, Crystalline::Nilable.new(Models::Components::ACHFees), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('achFees') } }
        # A detailed breakdown of instant payment fees.
        field :instant_payment_fees, Crystalline::Nilable.new(Models::Components::InstantPaymentFees), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('instantPaymentFees') } }
        # A detailed breakdown of platform fees.
        field :platform_fees, Crystalline::Nilable.new(Models::Components::PlatformFees), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('platformFees') } }
        # A detailed breakdown of other card-related fees.
        field :other_card_fees, Crystalline::Nilable.new(Models::Components::OtherCardFees), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('otherCardFees') } }

        sig { params(statement_id: ::String, statement_name: ::String, file_name: ::String, file_size: ::Integer, billing_period_start_date_time: ::DateTime, billing_period_end_date_time: ::DateTime, subscription_i_ds: T::Array[::String], summary: Models::Components::BillingSummary, created_on: ::DateTime, updated_on: ::DateTime, card_acquiring_fees: T.nilable(Models::Components::CardAcquiringFees), ach_fees: T.nilable(Models::Components::ACHFees), instant_payment_fees: T.nilable(Models::Components::InstantPaymentFees), platform_fees: T.nilable(Models::Components::PlatformFees), other_card_fees: T.nilable(Models::Components::OtherCardFees)).void }
        def initialize(statement_id:, statement_name:, file_name:, file_size:, billing_period_start_date_time:, billing_period_end_date_time:, subscription_i_ds:, summary:, created_on:, updated_on:, card_acquiring_fees: nil, ach_fees: nil, instant_payment_fees: nil, platform_fees: nil, other_card_fees: nil)
          @statement_id = statement_id
          @statement_name = statement_name
          @file_name = file_name
          @file_size = file_size
          @billing_period_start_date_time = billing_period_start_date_time
          @billing_period_end_date_time = billing_period_end_date_time
          @subscription_i_ds = subscription_i_ds
          @summary = summary
          @created_on = created_on
          @updated_on = updated_on
          @card_acquiring_fees = card_acquiring_fees
          @ach_fees = ach_fees
          @instant_payment_fees = instant_payment_fees
          @platform_fees = platform_fees
          @other_card_fees = other_card_fees
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @statement_id == other.statement_id
          return false unless @statement_name == other.statement_name
          return false unless @file_name == other.file_name
          return false unless @file_size == other.file_size
          return false unless @billing_period_start_date_time == other.billing_period_start_date_time
          return false unless @billing_period_end_date_time == other.billing_period_end_date_time
          return false unless @subscription_i_ds == other.subscription_i_ds
          return false unless @summary == other.summary
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @card_acquiring_fees == other.card_acquiring_fees
          return false unless @ach_fees == other.ach_fees
          return false unless @instant_payment_fees == other.instant_payment_fees
          return false unless @platform_fees == other.platform_fees
          return false unless @other_card_fees == other.other_card_fees
          true
        end
      end
    end
  end
end
