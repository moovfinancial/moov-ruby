# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateTransferSourceACH
        extend T::Sig
        include Crystalline::MetadataFields

        # An optional override of the default NACHA company entry description for a transfer.
        field :company_entry_description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('companyEntryDescription') } }
        # An optional override of the default NACHA company name for a transfer.
        field :originating_company_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('originatingCompanyName') } }
        # An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
        field :debit_hold_period, Crystalline::Nilable.new(Models::Components::DebitHoldPeriod), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('debitHoldPeriod'), 'decoder': Utils.enum_from_string(Models::Components::DebitHoldPeriod, true) } }
        # Code used to identify the ACH authorization method.
        field :sec_code, Crystalline::Nilable.new(Models::Components::SECCode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('secCode'), 'decoder': Utils.enum_from_string(Models::Components::SECCode, true) } }

        sig { params(company_entry_description: T.nilable(::String), originating_company_name: T.nilable(::String), debit_hold_period: T.nilable(Models::Components::DebitHoldPeriod), sec_code: T.nilable(Models::Components::SECCode)).void }
        def initialize(company_entry_description: nil, originating_company_name: nil, debit_hold_period: nil, sec_code: nil)
          @company_entry_description = company_entry_description
          @originating_company_name = originating_company_name
          @debit_hold_period = debit_hold_period
          @sec_code = sec_code
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @company_entry_description == other.company_entry_description
          return false unless @originating_company_name == other.originating_company_name
          return false unless @debit_hold_period == other.debit_hold_period
          return false unless @sec_code == other.sec_code
          true
        end
      end
    end
  end
end
