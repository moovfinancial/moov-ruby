# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpdateUnderwriting
        extend T::Sig
        include Crystalline::MetadataFields


        field :average_transaction_size, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('averageTransactionSize'), required: true } }

        field :max_transaction_size, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maxTransactionSize'), required: true } }

        field :average_monthly_transaction_volume, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('averageMonthlyTransactionVolume'), required: true } }

        field :volume_by_customer_type, Models::Components::VolumeByCustomerType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('volumeByCustomerType'), required: true } }

        field :card_volume_distribution, Models::Components::CardVolumeDistribution, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardVolumeDistribution'), required: true } }

        field :fulfillment, Models::Components::FulfillmentDetails, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fulfillment'), required: true } }

        sig { params(average_transaction_size: ::Integer, max_transaction_size: ::Integer, average_monthly_transaction_volume: ::Integer, volume_by_customer_type: Models::Components::VolumeByCustomerType, card_volume_distribution: Models::Components::CardVolumeDistribution, fulfillment: Models::Components::FulfillmentDetails).void }
        def initialize(average_transaction_size:, max_transaction_size:, average_monthly_transaction_volume:, volume_by_customer_type:, card_volume_distribution:, fulfillment:)
          @average_transaction_size = average_transaction_size
          @max_transaction_size = max_transaction_size
          @average_monthly_transaction_volume = average_monthly_transaction_volume
          @volume_by_customer_type = volume_by_customer_type
          @card_volume_distribution = card_volume_distribution
          @fulfillment = fulfillment
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @average_transaction_size == other.average_transaction_size
          return false unless @max_transaction_size == other.max_transaction_size
          return false unless @average_monthly_transaction_volume == other.average_monthly_transaction_volume
          return false unless @volume_by_customer_type == other.volume_by_customer_type
          return false unless @card_volume_distribution == other.card_volume_distribution
          return false unless @fulfillment == other.fulfillment
          true
        end
      end
    end
  end
end
