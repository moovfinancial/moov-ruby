# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class RevokeTokenRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # The access or refresh token to revoke.
        field :token, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('token'), required: true }, 'form': { 'field_name': 'token' } }
        # The type of token being revoked.
        field :token_type_hint, Crystalline::Nilable.new(Models::Components::TokenTypeHint), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('token_type_hint'), 'decoder': Utils.enum_from_string(Models::Components::TokenTypeHint, true) }, 'form': { 'field_name': 'token_type_hint' } }
        # Client ID can be provided here in the body, or as the Username in HTTP Basic Auth.
        field :client_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('client_id') }, 'form': { 'field_name': 'client_id' } }
        # Client secret can be provided here in the body, or as the Password in HTTP Basic Auth.
        field :client_secret, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('client_secret') }, 'form': { 'field_name': 'client_secret' } }

        sig { params(token: ::String, token_type_hint: T.nilable(Models::Components::TokenTypeHint), client_id: T.nilable(::String), client_secret: T.nilable(::String)).void }
        def initialize(token:, token_type_hint: nil, client_id: nil, client_secret: nil)
          @token = token
          @token_type_hint = token_type_hint
          @client_id = client_id
          @client_secret = client_secret
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @token == other.token
          return false unless @token_type_hint == other.token_type_hint
          return false unless @client_id == other.client_id
          return false unless @client_secret == other.client_secret
          true
        end
      end
    end
  end
end
