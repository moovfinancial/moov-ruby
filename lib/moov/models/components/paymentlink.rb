# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class PaymentLink
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique code identifying this payment link.
        field :code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('code'), required: true } }
        # The operating mode for an account.
        field :mode, Models::Components::Mode, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mode'), required: true, 'decoder': Utils.enum_from_string(Models::Components::Mode, false) } }

        field :status, Models::Components::PaymentLinkStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::PaymentLinkStatus, false) } }
        # The partner's Moov account ID.
        field :partner_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partnerAccountID'), required: true } }
        # The merchant's Moov account ID.
        field :merchant_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantAccountID'), required: true } }
        # The merchant's preferred payment method ID. Must be a wallet payment method.
        field :merchant_payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantPaymentMethodID'), required: true } }
        # Link to the payment landing page for this payment link.
        field :link, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('link'), required: true } }

        field :amount, Models::Components::Amount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }
        # The number of times this payment link has been used.
        field :uses, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('uses'), required: true } }
        # Customizable display options for a payment link.
        field :display, Models::Components::PaymentLinkDisplayOptions, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('display'), required: true } }

        field :customer, Models::Components::PaymentLinkCustomerOptions, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('customer'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # An optional limit on the number of times this payment link can be used. 
        # 
        # **For payouts, `maxUses` is always 1.**
        field :max_uses, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maxUses') } }
        # The timestamp when this payment link was last used.
        field :last_used_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lastUsedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # An optional expiration date for this payment link.
        field :expires_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiresOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # Options for payment links used to collect payment.
        field :payment, Crystalline::Nilable.new(Models::Components::PaymentLinkPaymentDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payment') } }

        field :payout, Crystalline::Nilable.new(Models::Components::PaymentLinkPayoutDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payout') } }

        field :disabled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disabledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(code: ::String, mode: Models::Components::Mode, status: Models::Components::PaymentLinkStatus, partner_account_id: ::String, merchant_account_id: ::String, merchant_payment_method_id: ::String, link: ::String, amount: Models::Components::Amount, uses: ::Integer, display: Models::Components::PaymentLinkDisplayOptions, customer: Models::Components::PaymentLinkCustomerOptions, created_on: ::DateTime, updated_on: ::DateTime, max_uses: T.nilable(::Integer), last_used_on: T.nilable(::DateTime), expires_on: T.nilable(::DateTime), payment: T.nilable(Models::Components::PaymentLinkPaymentDetails), payout: T.nilable(Models::Components::PaymentLinkPayoutDetails), disabled_on: T.nilable(::DateTime)).void }
        def initialize(code:, mode:, status:, partner_account_id:, merchant_account_id:, merchant_payment_method_id:, link:, amount:, uses:, display:, customer:, created_on:, updated_on:, max_uses: nil, last_used_on: nil, expires_on: nil, payment: nil, payout: nil, disabled_on: nil)
          @code = code
          @mode = mode
          @status = status
          @partner_account_id = partner_account_id
          @merchant_account_id = merchant_account_id
          @merchant_payment_method_id = merchant_payment_method_id
          @link = link
          @amount = amount
          @uses = uses
          @display = display
          @customer = customer
          @created_on = created_on
          @updated_on = updated_on
          @max_uses = max_uses
          @last_used_on = last_used_on
          @expires_on = expires_on
          @payment = payment
          @payout = payout
          @disabled_on = disabled_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @code == other.code
          return false unless @mode == other.mode
          return false unless @status == other.status
          return false unless @partner_account_id == other.partner_account_id
          return false unless @merchant_account_id == other.merchant_account_id
          return false unless @merchant_payment_method_id == other.merchant_payment_method_id
          return false unless @link == other.link
          return false unless @amount == other.amount
          return false unless @uses == other.uses
          return false unless @display == other.display
          return false unless @customer == other.customer
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @max_uses == other.max_uses
          return false unless @last_used_on == other.last_used_on
          return false unless @expires_on == other.expires_on
          return false unless @payment == other.payment
          return false unless @payout == other.payout
          return false unless @disabled_on == other.disabled_on
          true
        end
      end
    end
  end
end
