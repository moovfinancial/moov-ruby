# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A product available for purchase, which may have optional configuration options.
      class Product
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for a product.
        field :product_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('productID'), required: true } }

        field :title, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('title'), required: true } }
        # A product's starting price, before applying modifiers.
        field :base_price, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('basePrice'), required: true } }
        # The date and time when the product was added.
        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The date and time when the product was last updated.
        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # A detailed description of the product.
        # 
        # - Must be valid UTF-8 text
        # - Supports Markdown for formatting
        # - HTML is not permitted and will be rejected
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # Optional configuration options for a product, such as size or color.
        field :option_groups, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::ProductOptionGroup)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('optionGroups') } }
        # Optional images associated with the product.
        field :images, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::ProductImageMetadata)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('images') } }
        # The date and time when the product was disabled.
        field :disabled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disabledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(product_id: ::String, title: ::String, base_price: Models::Components::AmountDecimal, created_on: ::DateTime, updated_on: ::DateTime, description: T.nilable(::String), option_groups: T.nilable(T::Array[Models::Components::ProductOptionGroup]), images: T.nilable(T::Array[Models::Components::ProductImageMetadata]), disabled_on: T.nilable(::DateTime)).void }
        def initialize(product_id:, title:, base_price:, created_on:, updated_on:, description: nil, option_groups: nil, images: nil, disabled_on: nil)
          @product_id = product_id
          @title = title
          @base_price = base_price
          @created_on = created_on
          @updated_on = updated_on
          @description = description
          @option_groups = option_groups
          @images = images
          @disabled_on = disabled_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @product_id == other.product_id
          return false unless @title == other.title
          return false unless @base_price == other.base_price
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @description == other.description
          return false unless @option_groups == other.option_groups
          return false unless @images == other.images
          return false unless @disabled_on == other.disabled_on
          true
        end
      end
    end
  end
end
