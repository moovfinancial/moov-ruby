# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A summary of card acquiring volume and fees.
      class CardAcquiring
        extend T::Sig
        include Crystalline::MetadataFields

        # The total transaction volume amount.
        field :volume_amount, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('volumeAmount') } }
        # The total number of transactions.
        field :volume_count, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('volumeCount') } }
        # The total fee amount.
        field :fee_amount, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeAmount') } }
        # A summary of interchange fees by card brand.
        field :interchange_fees, Crystalline::Nilable.new(Models::Components::BillingSummaryInterchange), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('interchangeFees') } }

        sig { params(volume_amount: T.nilable(Models::Components::AmountDecimal), volume_count: T.nilable(::Integer), fee_amount: T.nilable(Models::Components::AmountDecimal), interchange_fees: T.nilable(Models::Components::BillingSummaryInterchange)).void }
        def initialize(volume_amount: nil, volume_count: nil, fee_amount: nil, interchange_fees: nil)
          @volume_amount = volume_amount
          @volume_count = volume_count
          @fee_amount = fee_amount
          @interchange_fees = interchange_fees
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @volume_amount == other.volume_amount
          return false unless @volume_count == other.volume_count
          return false unless @fee_amount == other.fee_amount
          return false unless @interchange_fees == other.interchange_fees
          true
        end
      end
    end
  end
end
