# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class AuthToken
        extend T::Sig
        include Crystalline::MetadataFields

        # An [RFC 6750](https://www.rfc-editor.org/rfc/rfc6750#section-6.1) token type.
        field :token_type, Models::Components::TokenType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('token_type'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TokenType, false) } }
        # A value passed to the authorization server to gain access to the system.
        field :access_token, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('access_token'), required: true } }
        # A value passed to the authorization server to obtain a new access token.
        field :refresh_token, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refresh_token'), required: true } }
        # Unix timestamp indicating when this token expires.
        field :expires_in, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expires_in'), required: true } }
        # A space-delimited list of [scopes](https://docs.moov.io/api/authentication/scopes/) that are allowed.
        field :scope, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scope'), required: true } }

        sig { params(token_type: Models::Components::TokenType, access_token: ::String, refresh_token: ::String, expires_in: ::Integer, scope: ::String).void }
        def initialize(token_type:, access_token:, refresh_token:, expires_in:, scope:)
          @token_type = token_type
          @access_token = access_token
          @refresh_token = refresh_token
          @expires_in = expires_in
          @scope = scope
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @token_type == other.token_type
          return false unless @access_token == other.access_token
          return false unless @refresh_token == other.refresh_token
          return false unless @expires_in == other.expires_in
          return false unless @scope == other.scope
          true
        end
      end
    end
  end
end
