# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes the acceptance of the Terms of Service. All data is required, and must be from the user.
      class ManualTermsOfService
        extend T::Sig
        include Crystalline::MetadataFields

        # The date and time the terms of service were accepted.
        field :accepted_date, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedDate'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The IP address from which the terms of service were accepted.
        field :accepted_ip, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedIP'), required: true } }
        # The user-agent of the user making the request.
        field :accepted_user_agent, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedUserAgent'), required: true } }

        field :accepted_domain, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('acceptedDomain'), required: true } }

        sig { params(accepted_date: ::DateTime, accepted_ip: ::String, accepted_user_agent: ::String, accepted_domain: ::String).void }
        def initialize(accepted_date:, accepted_ip:, accepted_user_agent:, accepted_domain:)
          @accepted_date = accepted_date
          @accepted_ip = accepted_ip
          @accepted_user_agent = accepted_user_agent
          @accepted_domain = accepted_domain
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @accepted_date == other.accepted_date
          return false unless @accepted_ip == other.accepted_ip
          return false unless @accepted_user_agent == other.accepted_user_agent
          return false unless @accepted_domain == other.accepted_domain
          true
        end
      end
    end
  end
end
