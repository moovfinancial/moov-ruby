# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class VolumeByCustomerType
        extend T::Sig
        include Crystalline::MetadataFields


        field :business_to_business_percentage, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('businessToBusinessPercentage'), required: true } }

        field :consumer_to_business_percentage, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('consumerToBusinessPercentage'), required: true } }

        sig { params(business_to_business_percentage: ::Integer, consumer_to_business_percentage: ::Integer).void }
        def initialize(business_to_business_percentage:, consumer_to_business_percentage:)
          @business_to_business_percentage = business_to_business_percentage
          @consumer_to_business_percentage = consumer_to_business_percentage
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @business_to_business_percentage == other.business_to_business_percentage
          return false unless @consumer_to_business_percentage == other.consumer_to_business_percentage
          true
        end
      end
    end
  end
end
