# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class ApplePayMerchantDomains
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }
        # A UTF-8 string to display in the Buy button.
        field :display_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('displayName'), required: true } }
        # A unique list of fully-qualified, top-level or sub-domain names where you will accept Apple Pay.
        field :domains, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('domains'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(account_id: ::String, display_name: ::String, domains: T::Array[::String], created_on: ::DateTime, updated_on: ::DateTime).void }
        def initialize(account_id:, display_name:, domains:, created_on:, updated_on:)
          @account_id = account_id
          @display_name = display_name
          @domains = domains
          @created_on = created_on
          @updated_on = updated_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @display_name == other.display_name
          return false unless @domains == other.domains
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          true
        end
      end
    end
  end
end
