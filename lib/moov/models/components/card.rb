# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes a card on a Moov account.
      class Card
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the card.
        field :card_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardID'), required: true } }
        # Uniquely identifies a linked payment card or token.
        # For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
        # This field can be used to identify specific payment methods across multiple accounts on your platform.
        field :fingerprint, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fingerprint'), required: true } }
        # The card brand.
        field :brand, Models::Components::CardBrand, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('brand'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardBrand, false) } }
        # The type of the card.
        field :card_type, Models::Components::CardType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardType, false) } }
        # Last four digits of the card number
        field :last_four_card_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lastFourCardNumber'), required: true } }
        # The first six to eight digits of the card number, which identifies the financial institution that issued the card.
        field :bin, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('bin'), required: true } }
        # The expiration date of the card or token.
        field :expiration, Models::Components::CardExpiration, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration'), required: true } }

        field :billing_address, Models::Components::CardAddress, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billingAddress'), required: true } }
        # The results of submitting cardholder data to a card network for verification.
        field :card_verification, Models::Components::CardVerification, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardVerification'), required: true } }
        # The category or level of the card defined by the issuer.
        # Examples include, but not limited to, "REWARDS", "TRADITIONAL REWARDS", "CLASSIC", and "CORPORATE PURCHASING".
        field :card_category, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardCategory') } }
        # The name of the cardholder as it appears on the card.
        field :holder_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('holderName') } }
        # Financial institution that issued the card.
        field :issuer, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuer') } }
        # Country where the card was issued.
        field :issuer_country, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuerCountry') } }
        # URL of the issuer.
        field :issuer_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuerURL') } }
        # Phone number of the issuer.
        field :issuer_phone, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuerPhone') } }
        # If true, the card is for commercial use, or associated with a business.
        # If false, the card is associated with a general consumer.
        field :commercial, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('commercial') } }
        # If true, the card issuing bank is regulated, and the scheme fees for debit transactions will be limited based on the Durbin Amendment.
        # If false, the card issuing bank is not regulated, and the scheme fees will not be limited.
        field :regulated, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('regulated') } }
        # Indicates cardholder has authorized card to be stored for future payments.
        field :card_on_file, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardOnFile') } }

        field :merchant_account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantAccountID') } }
        # The results of the most recent card update request.
        field :card_account_updater, Crystalline::Nilable.new(Models::Components::CardAccountUpdater), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAccountUpdater') } }
        # Indicates which level of domestic push-to-card transfer is supported by the card, if any.
        field :domestic_push_to_card, Crystalline::Nilable.new(Models::Components::DomesticPushToCard), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('domesticPushToCard'), 'decoder': Utils.enum_from_string(Models::Components::DomesticPushToCard, true) } }
        # Indicates if the card supports domestic pull-from-card transfer.
        field :domestic_pull_from_card, Crystalline::Nilable.new(Models::Components::DomesticPullFromCard), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('domesticPullFromCard'), 'decoder': Utils.enum_from_string(Models::Components::DomesticPullFromCard, true) } }
        #   Includes any payment methods created as a result of linking a card with the `x-wait-for` header set to `payment-method`.
        # 
        #   Only returned by the link card endpoint; not included when getting or listing cards.
        field :payment_methods, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::BasicPaymentMethod)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethods') } }

        sig { params(card_id: ::String, fingerprint: ::String, brand: Models::Components::CardBrand, card_type: Models::Components::CardType, last_four_card_number: ::String, bin: ::String, expiration: Models::Components::CardExpiration, billing_address: Models::Components::CardAddress, card_verification: Models::Components::CardVerification, card_category: T.nilable(::String), holder_name: T.nilable(::String), issuer: T.nilable(::String), issuer_country: T.nilable(::String), issuer_url: T.nilable(::String), issuer_phone: T.nilable(::String), commercial: T.nilable(T::Boolean), regulated: T.nilable(T::Boolean), card_on_file: T.nilable(T::Boolean), merchant_account_id: T.nilable(::String), card_account_updater: T.nilable(Models::Components::CardAccountUpdater), domestic_push_to_card: T.nilable(Models::Components::DomesticPushToCard), domestic_pull_from_card: T.nilable(Models::Components::DomesticPullFromCard), payment_methods: T.nilable(T::Array[Models::Components::BasicPaymentMethod])).void }
        def initialize(card_id:, fingerprint:, brand:, card_type:, last_four_card_number:, bin:, expiration:, billing_address:, card_verification:, card_category: nil, holder_name: nil, issuer: nil, issuer_country: nil, issuer_url: nil, issuer_phone: nil, commercial: nil, regulated: nil, card_on_file: nil, merchant_account_id: nil, card_account_updater: nil, domestic_push_to_card: nil, domestic_pull_from_card: nil, payment_methods: nil)
          @card_id = card_id
          @fingerprint = fingerprint
          @brand = brand
          @card_type = card_type
          @last_four_card_number = last_four_card_number
          @bin = bin
          @expiration = expiration
          @billing_address = billing_address
          @card_verification = card_verification
          @card_category = card_category
          @holder_name = holder_name
          @issuer = issuer
          @issuer_country = issuer_country
          @issuer_url = issuer_url
          @issuer_phone = issuer_phone
          @commercial = commercial
          @regulated = regulated
          @card_on_file = card_on_file
          @merchant_account_id = merchant_account_id
          @card_account_updater = card_account_updater
          @domestic_push_to_card = domestic_push_to_card
          @domestic_pull_from_card = domestic_pull_from_card
          @payment_methods = payment_methods
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @card_id == other.card_id
          return false unless @fingerprint == other.fingerprint
          return false unless @brand == other.brand
          return false unless @card_type == other.card_type
          return false unless @last_four_card_number == other.last_four_card_number
          return false unless @bin == other.bin
          return false unless @expiration == other.expiration
          return false unless @billing_address == other.billing_address
          return false unless @card_verification == other.card_verification
          return false unless @card_category == other.card_category
          return false unless @holder_name == other.holder_name
          return false unless @issuer == other.issuer
          return false unless @issuer_country == other.issuer_country
          return false unless @issuer_url == other.issuer_url
          return false unless @issuer_phone == other.issuer_phone
          return false unless @commercial == other.commercial
          return false unless @regulated == other.regulated
          return false unless @card_on_file == other.card_on_file
          return false unless @merchant_account_id == other.merchant_account_id
          return false unless @card_account_updater == other.card_account_updater
          return false unless @domestic_push_to_card == other.domestic_push_to_card
          return false unless @domestic_pull_from_card == other.domestic_pull_from_card
          return false unless @payment_methods == other.payment_methods
          true
        end
      end
    end
  end
end
