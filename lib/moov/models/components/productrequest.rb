# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Request to create or update a product.
      class ProductRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :title, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('title'), required: true } }
        # A product's starting price, before applying modifiers.
        field :base_price, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('basePrice'), required: true } }
        # A detailed description of the product.
        # 
        # - Must be valid UTF-8 text
        # - Supports Markdown for formatting
        # - HTML is not permitted and will be rejected
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # Assign previously uploaded images to a product or option.
        field :images, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::AssignProductImage)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('images') } }
        # Optional configuration options for a product, such as size or color.
        field :option_groups, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::CreateProductOptionGroup)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('optionGroups') } }

        sig { params(title: ::String, base_price: Models::Components::AmountDecimal, description: T.nilable(::String), images: T.nilable(T::Array[Models::Components::AssignProductImage]), option_groups: T.nilable(T::Array[Models::Components::CreateProductOptionGroup])).void }
        def initialize(title:, base_price:, description: nil, images: nil, option_groups: nil)
          @title = title
          @base_price = base_price
          @description = description
          @images = images
          @option_groups = option_groups
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @title == other.title
          return false unless @base_price == other.base_price
          return false unless @description == other.description
          return false unless @images == other.images
          return false unless @option_groups == other.option_groups
          true
        end
      end
    end
  end
end
