# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class SentReceipt
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for the receipt.
        field :receipt_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('receiptID'), required: true } }
        # The idempotency key used when creating the receipt.
        field :idempotency_key, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('idempotencyKey'), required: true } }
        # When the receipt was sent.
        field :sent_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sentOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(receipt_id: ::String, idempotency_key: ::String, sent_on: ::DateTime).void }
        def initialize(receipt_id:, idempotency_key:, sent_on:)
          @receipt_id = receipt_id
          @idempotency_key = idempotency_key
          @sent_on = sent_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @receipt_id == other.receipt_id
          return false unless @idempotency_key == other.idempotency_key
          return false unless @sent_on == other.sent_on
          true
        end
      end
    end
  end
end
