# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A card used at point of sale terminal for a card present transaction as contained within a payment method.
      class CardPresentPaymentPaymentMethod
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the payment method.
        field :payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodID'), required: true } }

        field :payment_method_type, Models::Components::CardPresentPaymentPaymentMethodPaymentMethodType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardPresentPaymentPaymentMethodPaymentMethodType, false) } }
        # Describes payment card details captured with tap or in-person payment.
        field :terminal_card, Crystalline::Nilable.new(Models::Components::TerminalCard), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('terminalCard') } }

        sig { params(payment_method_id: ::String, payment_method_type: Models::Components::CardPresentPaymentPaymentMethodPaymentMethodType, terminal_card: T.nilable(Models::Components::TerminalCard)).void }
        def initialize(payment_method_id:, payment_method_type:, terminal_card: nil)
          @payment_method_id = payment_method_id
          @payment_method_type = payment_method_type
          @terminal_card = terminal_card
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @payment_method_id == other.payment_method_id
          return false unless @payment_method_type == other.payment_method_type
          return false unless @terminal_card == other.terminal_card
          true
        end
      end
    end
  end
end
