# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class EvidenceTextResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :evidence_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceID'), required: true } }

        field :dispute_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputeID'), required: true } }

        field :evidence_type, Models::Components::EvidenceType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::EvidenceType, false) } }

        field :text, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('text'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(evidence_id: ::String, dispute_id: ::String, evidence_type: Models::Components::EvidenceType, text: ::String, created_on: ::DateTime).void }
        def initialize(evidence_id:, dispute_id:, evidence_type:, text:, created_on:)
          @evidence_id = evidence_id
          @dispute_id = dispute_id
          @evidence_type = evidence_type
          @text = text
          @created_on = created_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @evidence_id == other.evidence_id
          return false unless @dispute_id == other.dispute_id
          return false unless @evidence_type == other.evidence_type
          return false unless @text == other.text
          return false unless @created_on == other.created_on
          true
        end
      end
    end
  end
end
