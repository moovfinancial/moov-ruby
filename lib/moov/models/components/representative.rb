# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes a business representative.
      class Representative
        extend T::Sig
        include Crystalline::MetadataFields

        # Unique identifier for this representative.
        field :representative_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('representativeID'), required: true } }

        field :name, Models::Components::IndividualName, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :phone, Crystalline::Nilable.new(Models::Components::PhoneNumber), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phone') } }

        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }

        field :address, Crystalline::Nilable.new(Models::Components::Address), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('address') } }
        # Indicates whether this representative's birth date has been provided.
        field :birth_date_provided, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('birthDateProvided') } }
        # Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this representative.
        field :government_id_provided, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('governmentIDProvided') } }
        # Describes the job responsibilities of a business representative.
        field :responsibilities, Crystalline::Nilable.new(Models::Components::RepresentativeResponsibilities), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('responsibilities') } }

        field :disabled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disabledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(representative_id: ::String, name: Models::Components::IndividualName, created_on: ::DateTime, updated_on: ::DateTime, phone: T.nilable(Models::Components::PhoneNumber), email: T.nilable(::String), address: T.nilable(Models::Components::Address), birth_date_provided: T.nilable(T::Boolean), government_id_provided: T.nilable(T::Boolean), responsibilities: T.nilable(Models::Components::RepresentativeResponsibilities), disabled_on: T.nilable(::DateTime)).void }
        def initialize(representative_id:, name:, created_on:, updated_on:, phone: nil, email: nil, address: nil, birth_date_provided: nil, government_id_provided: nil, responsibilities: nil, disabled_on: nil)
          @representative_id = representative_id
          @name = name
          @created_on = created_on
          @updated_on = updated_on
          @phone = phone
          @email = email
          @address = address
          @birth_date_provided = birth_date_provided
          @government_id_provided = government_id_provided
          @responsibilities = responsibilities
          @disabled_on = disabled_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @representative_id == other.representative_id
          return false unless @name == other.name
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @phone == other.phone
          return false unless @email == other.email
          return false unless @address == other.address
          return false unless @birth_date_provided == other.birth_date_provided
          return false unless @government_id_provided == other.government_id_provided
          return false unless @responsibilities == other.responsibilities
          return false unless @disabled_on == other.disabled_on
          true
        end
      end
    end
  end
end
