# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class SweepConfig
        extend T::Sig
        include Crystalline::MetadataFields


        field :sweep_config_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sweepConfigID'), required: true } }

        field :wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletID'), required: true } }

        field :status, Models::Components::SweepConfigStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::SweepConfigStatus, false) } }
        # The payment method used to push or pull funds to a bank account.
        # The push payment method can only be ach-credit-standard, ach-credit-same-day, or rtp-credit. The pull payment method can only be ach-debit-fund.
        field :push_payment_method, Models::Components::SweepConfigPaymentMethod, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pushPaymentMethod'), required: true } }
        # The payment method used to push or pull funds to a bank account.
        # The push payment method can only be ach-credit-standard, ach-credit-same-day, or rtp-credit. The pull payment method can only be ach-debit-fund.
        field :pull_payment_method, Models::Components::SweepConfigPaymentMethod, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullPaymentMethod'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # An optional field to specify an amount to maintain in the wallet. This is a decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99. If not supplied, the default is 0.00.
        field :minimum_balance, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minimumBalance') } }
        # The text that appears on the banking statement. The default descriptor is a 10 character ID if an override is not set in the sweep configs statementDescriptor.
        field :statement_descriptor, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statementDescriptor') } }
        # An array of fields that are locked. To request updates, please contact Moov support.
        field :locked_fields, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lockedFields') } }

        sig { params(sweep_config_id: ::String, wallet_id: ::String, status: Models::Components::SweepConfigStatus, push_payment_method: Models::Components::SweepConfigPaymentMethod, pull_payment_method: Models::Components::SweepConfigPaymentMethod, created_on: ::DateTime, updated_on: ::DateTime, minimum_balance: T.nilable(::String), statement_descriptor: T.nilable(::String), locked_fields: T.nilable(T::Array[::String])).void }
        def initialize(sweep_config_id:, wallet_id:, status:, push_payment_method:, pull_payment_method:, created_on:, updated_on:, minimum_balance: nil, statement_descriptor: nil, locked_fields: nil)
          @sweep_config_id = sweep_config_id
          @wallet_id = wallet_id
          @status = status
          @push_payment_method = push_payment_method
          @pull_payment_method = pull_payment_method
          @created_on = created_on
          @updated_on = updated_on
          @minimum_balance = minimum_balance
          @statement_descriptor = statement_descriptor
          @locked_fields = locked_fields
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @sweep_config_id == other.sweep_config_id
          return false unless @wallet_id == other.wallet_id
          return false unless @status == other.status
          return false unless @push_payment_method == other.push_payment_method
          return false unless @pull_payment_method == other.pull_payment_method
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @minimum_balance == other.minimum_balance
          return false unless @statement_descriptor == other.statement_descriptor
          return false unless @locked_fields == other.locked_fields
          true
        end
      end
    end
  end
end
