# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WebhookDataTransferCreated
        extend T::Sig
        include Crystalline::MetadataFields

        # The accountID which facilitated the transfer.
        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }

        field :transfer_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferID'), required: true } }

        field :status, Models::Components::WebhookDataTransferStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WebhookDataTransferStatus, false) } }

        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        sig { params(account_id: ::String, transfer_id: ::String, status: Models::Components::WebhookDataTransferStatus, foreign_id: T.nilable(::String)).void }
        def initialize(account_id:, transfer_id:, status:, foreign_id: nil)
          @account_id = account_id
          @transfer_id = transfer_id
          @status = status
          @foreign_id = foreign_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @transfer_id == other.transfer_id
          return false unless @status == other.status
          return false unless @foreign_id == other.foreign_id
          true
        end
      end
    end
  end
end
