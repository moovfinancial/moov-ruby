# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # The results of the most recent card update request.
      class CardAccountUpdater
        extend T::Sig
        include Crystalline::MetadataFields


        field :updated_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The results of the card update request.
        field :update_type, Crystalline::Nilable.new(Models::Components::CardUpdateReason), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updateType'), 'decoder': Utils.enum_from_string(Models::Components::CardUpdateReason, true) } }

        sig { params(updated_on: T.nilable(::DateTime), update_type: T.nilable(Models::Components::CardUpdateReason)).void }
        def initialize(updated_on: nil, update_type: nil)
          @updated_on = updated_on
          @update_type = update_type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @updated_on == other.updated_on
          return false unless @update_type == other.update_type
          true
        end
      end
    end
  end
end
