# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class IssuedCardAuthorization
        extend T::Sig
        include Crystalline::MetadataFields


        field :authorization_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizationID'), required: true } }

        field :issued_card_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuedCardID'), required: true } }

        field :funding_wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundingWalletID'), required: true } }
        # The name of the network a card transaction is routed through.
        field :network, Models::Components::CardIssuingNetwork, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('network'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardIssuingNetwork, false) } }
        # A decimal-formatted numerical string that represents up to 2 decimal place precision. In USD for example, 12.34 is $12.34 and 0.99 is $0.99.
        field :authorized_amount, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizedAmount'), required: true } }
        # Status of a card issuing authorization.
        field :status, Models::Components::IssuingAuthorizationStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::IssuingAuthorizationStatus, false) } }

        field :merchant_data, Models::Components::IssuingMerchantData, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantData'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # List of card transaction IDs associated with this authorization.
        field :card_transactions, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardTransactions') } }

        sig { params(authorization_id: ::String, issued_card_id: ::String, funding_wallet_id: ::String, network: Models::Components::CardIssuingNetwork, authorized_amount: ::String, status: Models::Components::IssuingAuthorizationStatus, merchant_data: Models::Components::IssuingMerchantData, created_on: ::DateTime, card_transactions: T.nilable(T::Array[::String])).void }
        def initialize(authorization_id:, issued_card_id:, funding_wallet_id:, network:, authorized_amount:, status:, merchant_data:, created_on:, card_transactions: nil)
          @authorization_id = authorization_id
          @issued_card_id = issued_card_id
          @funding_wallet_id = funding_wallet_id
          @network = network
          @authorized_amount = authorized_amount
          @status = status
          @merchant_data = merchant_data
          @created_on = created_on
          @card_transactions = card_transactions
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @authorization_id == other.authorization_id
          return false unless @issued_card_id == other.issued_card_id
          return false unless @funding_wallet_id == other.funding_wallet_id
          return false unless @network == other.network
          return false unless @authorized_amount == other.authorized_amount
          return false unless @status == other.status
          return false unless @merchant_data == other.merchant_data
          return false unless @created_on == other.created_on
          return false unless @card_transactions == other.card_transactions
          true
        end
      end
    end
  end
end
