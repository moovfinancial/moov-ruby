# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class IssuingControls
        extend T::Sig
        include Crystalline::MetadataFields

        # Indicates if the card is single-use. If true, the card closes after the first authorization.
        field :single_use, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('singleUse') } }
        # Sets the spending limit per time interval. Only one limit per interval is supported.
        field :velocity_limits, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::IssuingVelocityLimit)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('velocityLimits') } }

        sig { params(single_use: T.nilable(T::Boolean), velocity_limits: T.nilable(T::Array[Models::Components::IssuingVelocityLimit])).void }
        def initialize(single_use: nil, velocity_limits: nil)
          @single_use = single_use
          @velocity_limits = velocity_limits
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @single_use == other.single_use
          return false unless @velocity_limits == other.velocity_limits
          true
        end
      end
    end
  end
end
