# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # ACH specific details about the transaction.
      class ACHTransactionDetails
        extend T::Sig
        include Crystalline::MetadataFields

        # Status of a transaction within the ACH lifecycle.
        field :status, Models::Components::ACHTransactionStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::ACHTransactionStatus, false) } }

        field :trace_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('traceNumber'), required: true } }

        field :return_, Crystalline::Nilable.new(Models::Components::ACHException), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('return') } }

        field :correction, Crystalline::Nilable.new(Models::Components::ACHException), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('correction') } }
        # An optional override of the default NACHA company entry description for a transfer.
        field :company_entry_description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('companyEntryDescription') } }
        # An optional override of the default NACHA company name for a transfer.
        field :originating_company_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('originatingCompanyName') } }
        # Code used to identify the ACH authorization method.
        field :sec_code, Crystalline::Nilable.new(Models::Components::SECCode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('secCode'), 'decoder': Utils.enum_from_string(Models::Components::SECCode, true) } }

        field :canceled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('canceledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :initiated_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('initiatedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :originated_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('originatedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :corrected_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('correctedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :returned_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('returnedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :failed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('failedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :completed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.
        field :debit_hold_period, Crystalline::Nilable.new(Models::Components::DebitHoldPeriod), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('debitHoldPeriod'), 'decoder': Utils.enum_from_string(Models::Components::DebitHoldPeriod, true) } }

        sig { params(status: Models::Components::ACHTransactionStatus, trace_number: ::String, return_: T.nilable(Models::Components::ACHException), correction: T.nilable(Models::Components::ACHException), company_entry_description: T.nilable(::String), originating_company_name: T.nilable(::String), sec_code: T.nilable(Models::Components::SECCode), canceled_on: T.nilable(::DateTime), initiated_on: T.nilable(::DateTime), originated_on: T.nilable(::DateTime), corrected_on: T.nilable(::DateTime), returned_on: T.nilable(::DateTime), failed_on: T.nilable(::DateTime), completed_on: T.nilable(::DateTime), debit_hold_period: T.nilable(Models::Components::DebitHoldPeriod)).void }
        def initialize(status:, trace_number:, return_: nil, correction: nil, company_entry_description: nil, originating_company_name: nil, sec_code: nil, canceled_on: nil, initiated_on: nil, originated_on: nil, corrected_on: nil, returned_on: nil, failed_on: nil, completed_on: nil, debit_hold_period: nil)
          @status = status
          @trace_number = trace_number
          @return_ = return_
          @correction = correction
          @company_entry_description = company_entry_description
          @originating_company_name = originating_company_name
          @sec_code = sec_code
          @canceled_on = canceled_on
          @initiated_on = initiated_on
          @originated_on = originated_on
          @corrected_on = corrected_on
          @returned_on = returned_on
          @failed_on = failed_on
          @completed_on = completed_on
          @debit_hold_period = debit_hold_period
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @trace_number == other.trace_number
          return false unless @return_ == other.return_
          return false unless @correction == other.correction
          return false unless @company_entry_description == other.company_entry_description
          return false unless @originating_company_name == other.originating_company_name
          return false unless @sec_code == other.sec_code
          return false unless @canceled_on == other.canceled_on
          return false unless @initiated_on == other.initiated_on
          return false unless @originated_on == other.originated_on
          return false unless @corrected_on == other.corrected_on
          return false unless @returned_on == other.returned_on
          return false unless @failed_on == other.failed_on
          return false unless @completed_on == other.completed_on
          return false unless @debit_hold_period == other.debit_hold_period
          true
        end
      end
    end
  end
end
