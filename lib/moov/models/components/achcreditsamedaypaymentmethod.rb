# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class AchCreditSameDayPaymentMethod
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the payment method.
        field :payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodID'), required: true } }

        field :payment_method_type, Models::Components::AchCreditSameDayPaymentMethodPaymentMethodType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethodType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::AchCreditSameDayPaymentMethodPaymentMethodType, false) } }
        # A bank account as contained within a payment method.
        field :bank_account, Models::Components::PaymentMethodsBankAccount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('bankAccount'), required: true } }

        sig { params(payment_method_id: ::String, payment_method_type: Models::Components::AchCreditSameDayPaymentMethodPaymentMethodType, bank_account: Models::Components::PaymentMethodsBankAccount).void }
        def initialize(payment_method_id:, payment_method_type:, bank_account:)
          @payment_method_id = payment_method_id
          @payment_method_type = payment_method_type
          @bank_account = bank_account
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @payment_method_id == other.payment_method_id
          return false unless @payment_method_type == other.payment_method_type
          return false unless @bank_account == other.bank_account
          true
        end
      end
    end
  end
end
