# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpdatePaymentLink
        extend T::Sig
        include Crystalline::MetadataFields


        field :amount, Crystalline::Nilable.new(Models::Components::AmountUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount') } }
        # Customizable display options for a payment link.
        field :display, Crystalline::Nilable.new(Models::Components::PaymentLinkDisplayOptionsUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('display') } }

        field :customer, Crystalline::Nilable.new(Models::Components::PaymentLinkCustomerOptions), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('customer') } }
        # Options for payment links used to collect payment.
        field :payment, Crystalline::Nilable.new(Models::Components::PaymentLinkPaymentDetailsUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payment') } }

        field :payout, Crystalline::Nilable.new(Models::Components::PaymentLinkPayoutDetailsUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payout') } }

        field :expires_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiresOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(amount: T.nilable(Models::Components::AmountUpdate), display: T.nilable(Models::Components::PaymentLinkDisplayOptionsUpdate), customer: T.nilable(Models::Components::PaymentLinkCustomerOptions), payment: T.nilable(Models::Components::PaymentLinkPaymentDetailsUpdate), payout: T.nilable(Models::Components::PaymentLinkPayoutDetailsUpdate), expires_on: T.nilable(::DateTime)).void }
        def initialize(amount: nil, display: nil, customer: nil, payment: nil, payout: nil, expires_on: nil)
          @amount = amount
          @display = display
          @customer = customer
          @payment = payment
          @payout = payout
          @expires_on = expires_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @display == other.display
          return false unless @customer == other.customer
          return false unless @payment == other.payment
          return false unless @payout == other.payout
          return false unless @expires_on == other.expires_on
          true
        end
      end
    end
  end
end
