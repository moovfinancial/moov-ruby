# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes a create terminal application request.
      class CreateTerminalApplication
        extend T::Sig
        include Crystalline::MetadataFields

        # Platform of the terminal application.
        field :platform, Models::Components::TerminalApplicationPlatform, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('platform'), required: true, 'decoder': Utils.enum_from_string(Models::Components::TerminalApplicationPlatform, false) } }
        # The app bundle identifier of the terminal application. Required if platform is `ios`.
        field :app_bundle_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('appBundleID') } }
        # The app package name of the terminal application. Required if platform is `android`.
        field :package_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('packageName') } }
        # The SHA-256 digest of the signing key for the application. Required if platform is `android`.
        field :sha256_digest, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sha256Digest') } }
        # The version code of the Android application. Required if platform is `android`.
        field :version_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('versionCode') } }

        sig { params(platform: Models::Components::TerminalApplicationPlatform, app_bundle_id: T.nilable(::String), package_name: T.nilable(::String), sha256_digest: T.nilable(::String), version_code: T.nilable(::String)).void }
        def initialize(platform:, app_bundle_id: nil, package_name: nil, sha256_digest: nil, version_code: nil)
          @platform = platform
          @app_bundle_id = app_bundle_id
          @package_name = package_name
          @sha256_digest = sha256_digest
          @version_code = version_code
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @platform == other.platform
          return false unless @app_bundle_id == other.app_bundle_id
          return false unless @package_name == other.package_name
          return false unless @sha256_digest == other.sha256_digest
          return false unless @version_code == other.version_code
          true
        end
      end
    end
  end
end
