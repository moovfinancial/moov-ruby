# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A summary of all fees included in a statement.
      class BillingSummary
        extend T::Sig
        include Crystalline::MetadataFields

        # A summary of card acquiring volume and fees.
        field :card_acquiring, Crystalline::Nilable.new(Models::Components::CardAcquiring), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardAcquiring') } }
        # A summary of ACH volume and fees.
        field :ach, Crystalline::Nilable.new(Models::Components::BillingSummaryDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('ach') } }
        # A summary of instant payment volume and fees.
        field :instant_payments, Crystalline::Nilable.new(Models::Components::BillingSummaryDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('instantPayments') } }
        # The total amount of platform fees.
        field :platform_fees, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('platformFees') } }
        # The total amount of adjustment fees.
        field :adjustment_fees, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('adjustmentFees') } }
        # The total amount of other fees.
        field :other_fees, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('otherFees') } }
        # The total amount of all fees.
        field :total, Crystalline::Nilable.new(Models::Components::AmountDecimal), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total') } }

        sig { params(card_acquiring: T.nilable(Models::Components::CardAcquiring), ach: T.nilable(Models::Components::BillingSummaryDetails), instant_payments: T.nilable(Models::Components::BillingSummaryDetails), platform_fees: T.nilable(Models::Components::AmountDecimal), adjustment_fees: T.nilable(Models::Components::AmountDecimal), other_fees: T.nilable(Models::Components::AmountDecimal), total: T.nilable(Models::Components::AmountDecimal)).void }
        def initialize(card_acquiring: nil, ach: nil, instant_payments: nil, platform_fees: nil, adjustment_fees: nil, other_fees: nil, total: nil)
          @card_acquiring = card_acquiring
          @ach = ach
          @instant_payments = instant_payments
          @platform_fees = platform_fees
          @adjustment_fees = adjustment_fees
          @other_fees = other_fees
          @total = total
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @card_acquiring == other.card_acquiring
          return false unless @ach == other.ach
          return false unless @instant_payments == other.instant_payments
          return false unless @platform_fees == other.platform_fees
          return false unless @adjustment_fees == other.adjustment_fees
          return false unless @other_fees == other.other_fees
          return false unless @total == other.total
          true
        end
      end
    end
  end
end
