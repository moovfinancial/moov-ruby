# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WebhookDataBankAccountUpdated
        extend T::Sig
        include Crystalline::MetadataFields


        field :bank_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('bankAccountID'), required: true } }

        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }

        field :status, Models::Components::BankAccountStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::BankAccountStatus, false) } }
        # The reason the bank account status changed to the current value.
        field :status_reason, Models::Components::BankAccountStatusReason, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statusReason'), required: true, 'decoder': Utils.enum_from_string(Models::Components::BankAccountStatusReason, false) } }
        # Reason for, and details related to, an `errored` or `verificationFailed` bank account status.
        field :exception_details, Crystalline::Nilable.new(Models::Components::BankAccountException), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('exceptionDetails') } }

        sig { params(bank_account_id: ::String, account_id: ::String, status: Models::Components::BankAccountStatus, status_reason: Models::Components::BankAccountStatusReason, exception_details: T.nilable(Models::Components::BankAccountException)).void }
        def initialize(bank_account_id:, account_id:, status:, status_reason:, exception_details: nil)
          @bank_account_id = bank_account_id
          @account_id = account_id
          @status = status
          @status_reason = status_reason
          @exception_details = exception_details
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @bank_account_id == other.bank_account_id
          return false unless @account_id == other.account_id
          return false unless @status == other.status
          return false unless @status_reason == other.status_reason
          return false unless @exception_details == other.exception_details
          true
        end
      end
    end
  end
end
