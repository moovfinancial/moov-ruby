# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpdateRepresentative
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, Crystalline::Nilable.new(Models::Components::IndividualNameUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name') } }

        field :phone, Crystalline::Nilable.new(Models::Components::Phone), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phone') } }

        field :email, Crystalline::Nilable.new(Crystalline::Union.new(::String, Models::Components::Email)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('email') } }

        field :address, Crystalline::Nilable.new(Models::Components::UpdateRepresentativeAddress), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('address') } }

        field :birth_date, Crystalline::Nilable.new(Models::Components::UpdateRepresentativeBirthDate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('birthDate') } }

        field :government_id, Crystalline::Nilable.new(Models::Components::UpdateRepresentativeGovernmentID), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('governmentID') } }

        field :responsibilities, Crystalline::Nilable.new(Models::Components::Responsibilities), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('responsibilities') } }

        sig { params(name: T.nilable(Models::Components::IndividualNameUpdate), phone: T.nilable(Models::Components::Phone), email: T.nilable(T.any(::String, Models::Components::Email)), address: T.nilable(Models::Components::UpdateRepresentativeAddress), birth_date: T.nilable(Models::Components::UpdateRepresentativeBirthDate), government_id: T.nilable(Models::Components::UpdateRepresentativeGovernmentID), responsibilities: T.nilable(Models::Components::Responsibilities)).void }
        def initialize(name: nil, phone: nil, email: nil, address: nil, birth_date: nil, government_id: nil, responsibilities: nil)
          @name = name
          @phone = phone
          @email = email
          @address = address
          @birth_date = birth_date
          @government_id = government_id
          @responsibilities = responsibilities
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @phone == other.phone
          return false unless @email == other.email
          return false unless @address == other.address
          return false unless @birth_date == other.birth_date
          return false unless @government_id == other.government_id
          return false unless @responsibilities == other.responsibilities
          true
        end
      end
    end
  end
end
