# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Request to create a new payment link.
      # 
      # A payment link must include either `payment` or `payout` details, but not both. For payout payment links,
      # `maxUses` will automatically be set to 1, as these are intended for a one-time disbursement
      # to a specific recipient.
      # 
      # **Note:** The `payout` option is currently under development and is not yet available for general use.
      class CreatePaymentLink
        extend T::Sig
        include Crystalline::MetadataFields

        # The partner's Moov account ID.
        field :partner_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('partnerAccountID'), required: true } }
        # The merchant's preferred payment method ID. Must be a wallet payment method.
        field :merchant_payment_method_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantPaymentMethodID'), required: true } }

        field :amount, Models::Components::Amount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }
        # Customizable display options for a payment link.
        field :display, Models::Components::PaymentLinkDisplayOptions, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('display'), required: true } }
        # An optional limit on the number of times this payment link can be used. 
        # 
        # **For payouts, `maxUses` is always 1.**
        field :max_uses, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maxUses') } }
        # An optional expiration date for this payment link.
        field :expires_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiresOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :customer, Crystalline::Nilable.new(Models::Components::PaymentLinkCustomerOptions), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('customer') } }
        # Options for payment links used to collect payment.
        field :payment, Crystalline::Nilable.new(Models::Components::PaymentLinkPaymentDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payment') } }

        field :payout, Crystalline::Nilable.new(Models::Components::PaymentLinkPayoutDetails), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payout') } }

        sig { params(partner_account_id: ::String, merchant_payment_method_id: ::String, amount: Models::Components::Amount, display: Models::Components::PaymentLinkDisplayOptions, max_uses: T.nilable(::Integer), expires_on: T.nilable(::DateTime), customer: T.nilable(Models::Components::PaymentLinkCustomerOptions), payment: T.nilable(Models::Components::PaymentLinkPaymentDetails), payout: T.nilable(Models::Components::PaymentLinkPayoutDetails)).void }
        def initialize(partner_account_id:, merchant_payment_method_id:, amount:, display:, max_uses: nil, expires_on: nil, customer: nil, payment: nil, payout: nil)
          @partner_account_id = partner_account_id
          @merchant_payment_method_id = merchant_payment_method_id
          @amount = amount
          @display = display
          @max_uses = max_uses
          @expires_on = expires_on
          @customer = customer
          @payment = payment
          @payout = payout
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @partner_account_id == other.partner_account_id
          return false unless @merchant_payment_method_id == other.merchant_payment_method_id
          return false unless @amount == other.amount
          return false unless @display == other.display
          return false unless @max_uses == other.max_uses
          return false unless @expires_on == other.expires_on
          return false unless @customer == other.customer
          return false unless @payment == other.payment
          return false unless @payout == other.payout
          true
        end
      end
    end
  end
end
