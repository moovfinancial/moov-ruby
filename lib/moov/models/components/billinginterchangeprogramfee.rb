# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Details of a specific interchange program fee.
      class BillingInterchangeProgramFee
        extend T::Sig
        include Crystalline::MetadataFields

        # The name of the interchange program.
        field :program_name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('programName'), required: true } }
        # The number of transactions for this program.
        field :count, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('count'), required: true } }
        # The percentage rate for this program.
        field :percentage_rate, ::Float, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('percentageRate'), required: true } }
        # The per-item rate for this program.
        field :per_item_rate, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('perItemRate'), required: true } }
        # The total fee amount for this program.
        field :total, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('total'), required: true } }
        # The total transfer volume for this program.
        field :transfer_volume, Models::Components::AmountDecimal, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transferVolume'), required: true } }

        sig { params(program_name: ::String, count: ::Integer, percentage_rate: ::Float, per_item_rate: Models::Components::AmountDecimal, total: Models::Components::AmountDecimal, transfer_volume: Models::Components::AmountDecimal).void }
        def initialize(program_name:, count:, percentage_rate:, per_item_rate:, total:, transfer_volume:)
          @program_name = program_name
          @count = count
          @percentage_rate = percentage_rate
          @per_item_rate = per_item_rate
          @total = total
          @transfer_volume = transfer_volume
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @program_name == other.program_name
          return false unless @count == other.count
          return false unless @percentage_rate == other.percentage_rate
          return false unless @per_item_rate == other.per_item_rate
          return false unless @total == other.total
          return false unless @transfer_volume == other.transfer_volume
          true
        end
      end
    end
  end
end
