# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class Cancellation
        extend T::Sig
        include Crystalline::MetadataFields


        field :cancellation_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cancellationID'), required: true } }

        field :status, Models::Components::CancellationStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CancellationStatus, false) } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        sig { params(cancellation_id: ::String, status: Models::Components::CancellationStatus, created_on: ::DateTime).void }
        def initialize(cancellation_id:, status:, created_on:)
          @cancellation_id = cancellation_id
          @status = status
          @created_on = created_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @cancellation_id == other.cancellation_id
          return false unless @status == other.status
          return false unless @created_on == other.created_on
          true
        end
      end
    end
  end
end
