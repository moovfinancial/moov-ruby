# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Request to create a new support ticket.
      class CreateTicket
        extend T::Sig
        include Crystalline::MetadataFields


        field :title, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('title'), required: true } }

        field :body, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('body'), required: true } }

        field :contact, Models::Components::TicketContact, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('contact'), required: true } }

        field :author, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('author') } }

        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        sig { params(title: ::String, body: ::String, contact: Models::Components::TicketContact, author: T.nilable(::String), foreign_id: T.nilable(::String)).void }
        def initialize(title:, body:, contact:, author: nil, foreign_id: nil)
          @title = title
          @body = body
          @contact = contact
          @author = author
          @foreign_id = foreign_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @title == other.title
          return false unless @body == other.body
          return false unless @contact == other.contact
          return false unless @author == other.author
          return false unless @foreign_id == other.foreign_id
          true
        end
      end
    end
  end
end
