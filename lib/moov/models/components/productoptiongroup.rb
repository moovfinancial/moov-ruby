# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Represents a group of product configuration options, such as size or color.
      class ProductOptionGroup
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name'), required: true } }
        # The minimum number of options that must be selected from this group.
        # 
        # A value of 0 indicates that no selection from this group is required.
        field :min_select, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minSelect'), required: true } }
        # The maximum number of options that can be selected from this group.
        field :max_select, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maxSelect'), required: true } }
        # The options available within this group.
        field :options, Crystalline::Array.new(Models::Components::ProductOption), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('options'), required: true } }
        # A detailed description of the option group.
        # 
        # - Must be valid UTF-8 text
        # - Supports Markdown for formatting
        # - HTML is not permitted and will be rejected
        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        sig { params(name: ::String, min_select: ::Integer, max_select: ::Integer, options: T::Array[Models::Components::ProductOption], description: T.nilable(::String)).void }
        def initialize(name:, min_select:, max_select:, options:, description: nil)
          @name = name
          @min_select = min_select
          @max_select = max_select
          @options = options
          @description = description
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @min_select == other.min_select
          return false unless @max_select == other.max_select
          return false unless @options == other.options
          return false unless @description == other.description
          true
        end
      end
    end
  end
end
