# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class DisputeEvidenceResponse
        extend T::Sig
        include Crystalline::MetadataFields


        field :evidence_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceID'), required: true } }

        field :dispute_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputeID'), required: true } }

        field :evidence_type, Models::Components::EvidenceType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::EvidenceType, false) } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }

        field :updated_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('updatedOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # For text evidence, the text submitted as evidence.
        field :text, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('text') } }
        # For file evidence, the MIME type of the file.
        field :mime_type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mimeType') } }
        # For file evidence, the name of the file.
        field :filename, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('filename') } }
        # For file evidence, the size of the file.
        field :size, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('size') } }
        # When the evidence was submitted for review.
        field :submitted_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('submittedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(evidence_id: ::String, dispute_id: ::String, evidence_type: Models::Components::EvidenceType, created_on: ::DateTime, updated_on: ::DateTime, text: T.nilable(::String), mime_type: T.nilable(::String), filename: T.nilable(::String), size: T.nilable(::Integer), submitted_on: T.nilable(::DateTime)).void }
        def initialize(evidence_id:, dispute_id:, evidence_type:, created_on:, updated_on:, text: nil, mime_type: nil, filename: nil, size: nil, submitted_on: nil)
          @evidence_id = evidence_id
          @dispute_id = dispute_id
          @evidence_type = evidence_type
          @created_on = created_on
          @updated_on = updated_on
          @text = text
          @mime_type = mime_type
          @filename = filename
          @size = size
          @submitted_on = submitted_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @evidence_id == other.evidence_id
          return false unless @dispute_id == other.dispute_id
          return false unless @evidence_type == other.evidence_type
          return false unless @created_on == other.created_on
          return false unless @updated_on == other.updated_on
          return false unless @text == other.text
          return false unless @mime_type == other.mime_type
          return false unless @filename == other.filename
          return false unless @size == other.size
          return false unless @submitted_on == other.submitted_on
          true
        end
      end
    end
  end
end
