# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class UpdateEvidence
        extend T::Sig
        include Crystalline::MetadataFields


        field :evidence_type, Crystalline::Nilable.new(Models::Components::EvidenceType), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceType'), 'decoder': Utils.enum_from_string(Models::Components::EvidenceType, true) } }
        # If updating text evidence, the new text to associate with the dispute.
        field :text, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('text') } }

        sig { params(evidence_type: T.nilable(Models::Components::EvidenceType), text: T.nilable(::String)).void }
        def initialize(evidence_type: nil, text: nil)
          @evidence_type = evidence_type
          @text = text
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @evidence_type == other.evidence_type
          return false unless @text == other.text
          true
        end
      end
    end
  end
end
