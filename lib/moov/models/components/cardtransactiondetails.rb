# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Card-specific details about the transaction.
      class CardTransactionDetails
        extend T::Sig
        include Crystalline::MetadataFields

        # Status of a transaction within the card payment lifecycle.
        field :status, Models::Components::CardTransactionStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardTransactionStatus, false) } }

        field :failure_code, Crystalline::Nilable.new(Models::Components::CardTransactionFailureCode), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('failureCode'), 'decoder': Utils.enum_from_string(Models::Components::CardTransactionFailureCode, true) } }
        # An optional override of the default card statement descriptor for a transfer. Accounts must be enabled by Moov to set this field.
        field :dynamic_descriptor, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('dynamicDescriptor') } }
        # Specifies the nature and initiator of a transaction. 
        # 
        # Crucial for recurring and merchant-initiated transactions as per card scheme rules. 
        # Omit for customer-initiated e-commerce transactions.
        field :transaction_source, Crystalline::Nilable.new(Models::Components::TransactionSource), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionSource'), 'decoder': Utils.enum_from_string(Models::Components::TransactionSource, true) } }

        field :initiated_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('initiatedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :confirmed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('confirmedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :settled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('settledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :failed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('failedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :canceled_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('canceledOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :completed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The program assigned by the card network that determines the interchange rate for the transfer.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :interchange_qualification, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('interchangeQualification') } }
        # The program assigned by the card network that determines the interchange rate for the transfer.
        field :fee_program, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeProgram') } }
        # An alphanumeric code generated by the card network to demonstrate approval for the transaction.
        field :authorization_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizationCode') } }

        sig { params(status: Models::Components::CardTransactionStatus, failure_code: T.nilable(Models::Components::CardTransactionFailureCode), dynamic_descriptor: T.nilable(::String), transaction_source: T.nilable(Models::Components::TransactionSource), initiated_on: T.nilable(::DateTime), confirmed_on: T.nilable(::DateTime), settled_on: T.nilable(::DateTime), failed_on: T.nilable(::DateTime), canceled_on: T.nilable(::DateTime), completed_on: T.nilable(::DateTime), interchange_qualification: T.nilable(::String), fee_program: T.nilable(::String), authorization_code: T.nilable(::String)).void }
        def initialize(status:, failure_code: nil, dynamic_descriptor: nil, transaction_source: nil, initiated_on: nil, confirmed_on: nil, settled_on: nil, failed_on: nil, canceled_on: nil, completed_on: nil, interchange_qualification: nil, fee_program: nil, authorization_code: nil)
          @status = status
          @failure_code = failure_code
          @dynamic_descriptor = dynamic_descriptor
          @transaction_source = transaction_source
          @initiated_on = initiated_on
          @confirmed_on = confirmed_on
          @settled_on = settled_on
          @failed_on = failed_on
          @canceled_on = canceled_on
          @completed_on = completed_on
          @interchange_qualification = interchange_qualification
          @fee_program = fee_program
          @authorization_code = authorization_code
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @failure_code == other.failure_code
          return false unless @dynamic_descriptor == other.dynamic_descriptor
          return false unless @transaction_source == other.transaction_source
          return false unless @initiated_on == other.initiated_on
          return false unless @confirmed_on == other.confirmed_on
          return false unless @settled_on == other.settled_on
          return false unless @failed_on == other.failed_on
          return false unless @canceled_on == other.canceled_on
          return false unless @completed_on == other.completed_on
          return false unless @interchange_qualification == other.interchange_qualification
          return false unless @fee_program == other.fee_program
          return false unless @authorization_code == other.authorization_code
          true
        end
      end
    end
  end
end
