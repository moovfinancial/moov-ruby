# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class VolumeShareByCustomerTypeError
        extend T::Sig
        include Crystalline::MetadataFields


        field :business, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('business') } }

        field :consumer, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('consumer') } }

        field :p2p, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('p2p') } }

        sig { params(business: T.nilable(::String), consumer: T.nilable(::String), p2p: T.nilable(::String)).void }
        def initialize(business: nil, consumer: nil, p2p: nil)
          @business = business
          @consumer = consumer
          @p2p = p2p
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @business == other.business
          return false unless @consumer == other.consumer
          return false unless @p2p == other.p2p
          true
        end
      end
    end
  end
end
