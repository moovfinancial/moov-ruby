# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class CreateEvidenceText
        extend T::Sig
        include Crystalline::MetadataFields

        # The text to associate with the dispute as evidence.
        field :text, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('text'), required: true } }

        field :evidence_type, Models::Components::EvidenceType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('evidenceType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::EvidenceType, false) } }

        sig { params(text: ::String, evidence_type: Models::Components::EvidenceType).void }
        def initialize(text:, evidence_type:)
          @text = text
          @evidence_type = evidence_type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @text == other.text
          return false unless @evidence_type == other.evidence_type
          true
        end
      end
    end
  end
end
