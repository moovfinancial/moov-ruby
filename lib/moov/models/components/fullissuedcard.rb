# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # The full details of an issued card, including PAN and CVV.
      class FullIssuedCard
        extend T::Sig
        include Crystalline::MetadataFields


        field :issued_card_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('issuedCardID'), required: true } }
        # The card brand.
        field :brand, Models::Components::CardBrand, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('brand'), required: true, 'decoder': Utils.enum_from_string(Models::Components::CardBrand, false) } }

        field :last_four_card_number, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('lastFourCardNumber'), required: true } }
        # The expiration date of the card or token.
        field :expiration, Models::Components::CardExpiration, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration'), required: true } }
        # Fields for identifying an authorized individual.
        field :authorized_user, Models::Components::AuthorizedUser, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizedUser'), required: true } }
        # Unique identifier for the wallet funding the card.
        field :funding_wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundingWalletID'), required: true } }
        # The `state` represents the operational status of an issued card. A card can only approve incoming authorizations if it is in an active state.
        # 
        # - `active`: The card is operational and approves authorizations. Generally becomes active shortly after card creation.
        # - `inactive`: The card cannot approve authorizations. This is currently a temporary state assigned post-creation during the activation process.
        # - `closed`: The card is permanently deactivated and cannot approve authorizations. A card can be closed by request or when it expires.
        # - `pending-verification`: Awaiting additional authorized user verification before the card can be activated.
        field :state, Models::Components::IssuedCardState, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('state'), required: true, 'decoder': Utils.enum_from_string(Models::Components::IssuedCardState, false) } }
        # Specifies the type of spend card to be issued. Presently supports virtual only, providing a digital number without a physical card.
        field :form_factor, Models::Components::IssuedCardFormFactor, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('formFactor'), required: true, 'decoder': Utils.enum_from_string(Models::Components::IssuedCardFormFactor, false) } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The issued card's Primary Account Number (PAN)
        field :pan, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pan'), required: true } }
        # The issued card's 3- or 4-digit Card Verification Value (CVV).
        field :cvv, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cvv'), required: true } }
        # Optional descriptor for the card.
        field :memo, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('memo') } }

        field :controls, Crystalline::Nilable.new(Models::Components::IssuingControls), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('controls') } }

        sig { params(issued_card_id: ::String, brand: Models::Components::CardBrand, last_four_card_number: ::String, expiration: Models::Components::CardExpiration, authorized_user: Models::Components::AuthorizedUser, funding_wallet_id: ::String, state: Models::Components::IssuedCardState, form_factor: Models::Components::IssuedCardFormFactor, created_on: ::DateTime, pan: ::String, cvv: ::String, memo: T.nilable(::String), controls: T.nilable(Models::Components::IssuingControls)).void }
        def initialize(issued_card_id:, brand:, last_four_card_number:, expiration:, authorized_user:, funding_wallet_id:, state:, form_factor:, created_on:, pan:, cvv:, memo: nil, controls: nil)
          @issued_card_id = issued_card_id
          @brand = brand
          @last_four_card_number = last_four_card_number
          @expiration = expiration
          @authorized_user = authorized_user
          @funding_wallet_id = funding_wallet_id
          @state = state
          @form_factor = form_factor
          @created_on = created_on
          @pan = pan
          @cvv = cvv
          @memo = memo
          @controls = controls
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @issued_card_id == other.issued_card_id
          return false unless @brand == other.brand
          return false unless @last_four_card_number == other.last_four_card_number
          return false unless @expiration == other.expiration
          return false unless @authorized_user == other.authorized_user
          return false unless @funding_wallet_id == other.funding_wallet_id
          return false unless @state == other.state
          return false unless @form_factor == other.form_factor
          return false unless @created_on == other.created_on
          return false unless @pan == other.pan
          return false unless @cvv == other.cvv
          return false unless @memo == other.memo
          return false unless @controls == other.controls
          true
        end
      end
    end
  end
end
