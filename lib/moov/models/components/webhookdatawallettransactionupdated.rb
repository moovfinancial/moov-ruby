# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class WebhookDataWalletTransactionUpdated
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountID'), required: true } }

        field :wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletID'), required: true } }

        field :transaction_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionID'), required: true } }

        field :status, Models::Components::WalletTransactionStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WalletTransactionStatus, false) } }

        field :available_balance, Crystalline::Nilable.new(Models::Components::WalletAvailableBalance), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('availableBalance') } }

        sig { params(account_id: ::String, wallet_id: ::String, transaction_id: ::String, status: Models::Components::WalletTransactionStatus, available_balance: T.nilable(Models::Components::WalletAvailableBalance)).void }
        def initialize(account_id:, wallet_id:, transaction_id:, status:, available_balance: nil)
          @account_id = account_id
          @wallet_id = wallet_id
          @transaction_id = transaction_id
          @status = status
          @available_balance = available_balance
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @wallet_id == other.wallet_id
          return false unless @transaction_id == other.transaction_id
          return false unless @status == other.status
          return false unless @available_balance == other.available_balance
          true
        end
      end
    end
  end
end
