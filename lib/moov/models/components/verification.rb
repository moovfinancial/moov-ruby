# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Describes identity verification status and relevant identity verification documents.
      class Verification
        extend T::Sig
        include Crystalline::MetadataFields

        # Possible states an account verification can be in.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :status, Models::Components::VerificationStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::VerificationStatus, false) } }
        # Possible states an account verification can be in.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :verification_status, Crystalline::Nilable.new(Models::Components::AccountVerificationStatus), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('verificationStatus'), 'decoder': Utils.enum_from_string(Models::Components::AccountVerificationStatus, true) } }
        # Additional detail for a verification status.
        # 
        # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
        field :details, Crystalline::Nilable.new(Models::Components::VerificationStatusDetail), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('details'), 'decoder': Utils.enum_from_string(Models::Components::VerificationStatusDetail, true) } }

        field :documents, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::Document)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('documents') } }

        sig { params(status: Models::Components::VerificationStatus, verification_status: T.nilable(Models::Components::AccountVerificationStatus), details: T.nilable(Models::Components::VerificationStatusDetail), documents: T.nilable(T::Array[Models::Components::Document])).void }
        def initialize(status:, verification_status: nil, details: nil, documents: nil)
          @status = status
          @verification_status = verification_status
          @details = details
          @documents = documents
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @verification_status == other.verification_status
          return false unless @details == other.details
          return false unless @documents == other.documents
          true
        end
      end
    end
  end
end
