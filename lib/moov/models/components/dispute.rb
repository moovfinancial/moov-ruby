# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # Details of a card transaction dispute.
      class Dispute
        extend T::Sig
        include Crystalline::MetadataFields


        field :dispute_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputeID'), required: true } }

        field :merchant_account_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantAccountID'), required: true } }

        field :amount, Models::Components::Amount, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount'), required: true } }
        # Indicates the card network's category for the dispute. 
        # 
        # These codes may differ between card brands. You can find more information on the code from the networkReasonDescription field.
        field :network_reason_code, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('networkReasonCode'), required: true } }

        field :transfer, Models::Components::DisputeTransferDetails, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transfer'), required: true } }

        field :respond_by, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('respondBy'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # The status of a particular dispute. 
        # 
        # Read our [disputes guide](https://docs.moov.io/guides/money-movement/accept-payments/card-acceptance/disputes/#dispute-statuses) to learn what each status means.
        field :status, Models::Components::DisputeStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::DisputeStatus, false) } }
        # The phase of a dispute within the dispute lifecycle.
        field :phase, Models::Components::DisputePhase, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('phase'), required: true, 'decoder': Utils.enum_from_string(Models::Components::DisputePhase, false) } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # Provides detail on the card network's categorization of the dispute.
        field :network_reason_description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('networkReasonDescription') } }

        field :submitted_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('submittedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(dispute_id: ::String, merchant_account_id: ::String, amount: Models::Components::Amount, network_reason_code: ::String, transfer: Models::Components::DisputeTransferDetails, respond_by: ::DateTime, status: Models::Components::DisputeStatus, phase: Models::Components::DisputePhase, created_on: ::DateTime, network_reason_description: T.nilable(::String), submitted_on: T.nilable(::DateTime)).void }
        def initialize(dispute_id:, merchant_account_id:, amount:, network_reason_code:, transfer:, respond_by:, status:, phase:, created_on:, network_reason_description: nil, submitted_on: nil)
          @dispute_id = dispute_id
          @merchant_account_id = merchant_account_id
          @amount = amount
          @network_reason_code = network_reason_code
          @transfer = transfer
          @respond_by = respond_by
          @status = status
          @phase = phase
          @created_on = created_on
          @network_reason_description = network_reason_description
          @submitted_on = submitted_on
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @dispute_id == other.dispute_id
          return false unless @merchant_account_id == other.merchant_account_id
          return false unless @amount == other.amount
          return false unless @network_reason_code == other.network_reason_code
          return false unless @transfer == other.transfer
          return false unless @respond_by == other.respond_by
          return false unless @status == other.status
          return false unless @phase == other.phase
          return false unless @created_on == other.created_on
          return false unless @network_reason_description == other.network_reason_description
          return false unless @submitted_on == other.submitted_on
          true
        end
      end
    end
  end
end
