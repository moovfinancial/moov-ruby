# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class PaymentLinkPayoutDetailsUpdate
        extend T::Sig
        include Crystalline::MetadataFields

        # A list of payment methods that should be supported for this payment link.
        field :allowed_methods, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::DisbursementPaymentMethodType)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('allowedMethods') } }
        # Specify the intended recipient of the payout.
        # 
        # This information will be used to authenticate the end user when they follow the payment link.
        field :recipient, Crystalline::Nilable.new(Models::Components::PayoutRecipientUpdate), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('recipient') } }

        sig { params(allowed_methods: T.nilable(T::Array[Models::Components::DisbursementPaymentMethodType]), recipient: T.nilable(Models::Components::PayoutRecipientUpdate)).void }
        def initialize(allowed_methods: nil, recipient: nil)
          @allowed_methods = allowed_methods
          @recipient = recipient
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @allowed_methods == other.allowed_methods
          return false unless @recipient == other.recipient
          true
        end
      end
    end
  end
end
