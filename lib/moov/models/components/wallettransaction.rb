# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    
      # A transaction that funds or deducts from the wallet.
      class WalletTransaction
        extend T::Sig
        include Crystalline::MetadataFields


        field :wallet_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('walletID'), required: true } }

        field :transaction_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionID'), required: true } }

        field :transaction_type, Models::Components::WalletTransactionType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WalletTransactionType, false) } }

        field :source_type, Models::Components::WalletTransactionSourceType, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sourceType'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WalletTransactionSourceType, false) } }
        # The ID of the Moov object to which this transaction is related.
        field :source_id, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sourceID'), required: true } }

        field :status, Models::Components::WalletTransactionStatus, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Components::WalletTransactionStatus, false) } }
        # Detailed description of the transaction.
        field :memo, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('memo'), required: true } }

        field :created_on, ::DateTime, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('createdOn'), required: true, 'decoder': Utils.datetime_from_iso_format(false) } }
        # A 3-letter ISO 4217 currency code.
        field :currency, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('currency'), required: true } }
        # The total transaction amount. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
        field :gross_amount, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('grossAmount'), required: true } }
        # The total transaction amount. Same as `grossAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
        field :gross_amount_decimal, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('grossAmountDecimal'), required: true } }
        # Total fees paid for the transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
        field :fee, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fee'), required: true } }
        # Total fees paid for the transaction. Same as `fee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
        field :fee_decimal, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeDecimal'), required: true } }
        # Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. The amount is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
        field :net_amount, ::Integer, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('netAmount'), required: true } }
        # Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. Same as `netAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
        field :net_amount_decimal, ::String, { 'format_json': { 'letter_case': ::Moov::Utils.field_name('netAmountDecimal'), required: true } }

        field :completed_on, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('completedOn'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # The IDs of the fees paid for the transaction.
        field :fee_i_ds, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feeIDs') } }
        # The wallet's total available balance after recording a completed transaction. The value is in the smallest unit of the specified currency. In USD this is cents, for example, $12.04 is 1204 and $0.99 is 99.
        field :available_balance, Crystalline::Nilable.new(::Integer), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('availableBalance') } }
        # The wallet's total available balance after recording a completed transaction. Same as `availableBalance`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.
        field :available_balance_decimal, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('availableBalanceDecimal') } }
        # ID of the sweep this transaction accrued in.
        field :sweep_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('sweepID') } }

        sig { params(wallet_id: ::String, transaction_id: ::String, transaction_type: Models::Components::WalletTransactionType, source_type: Models::Components::WalletTransactionSourceType, source_id: ::String, status: Models::Components::WalletTransactionStatus, memo: ::String, created_on: ::DateTime, currency: ::String, gross_amount: ::Integer, gross_amount_decimal: ::String, fee: ::Integer, fee_decimal: ::String, net_amount: ::Integer, net_amount_decimal: ::String, completed_on: T.nilable(::DateTime), fee_i_ds: T.nilable(T::Array[::String]), available_balance: T.nilable(::Integer), available_balance_decimal: T.nilable(::String), sweep_id: T.nilable(::String)).void }
        def initialize(wallet_id:, transaction_id:, transaction_type:, source_type:, source_id:, status:, memo:, created_on:, currency:, gross_amount:, gross_amount_decimal:, fee:, fee_decimal:, net_amount:, net_amount_decimal:, completed_on: nil, fee_i_ds: nil, available_balance: nil, available_balance_decimal: nil, sweep_id: nil)
          @wallet_id = wallet_id
          @transaction_id = transaction_id
          @transaction_type = transaction_type
          @source_type = source_type
          @source_id = source_id
          @status = status
          @memo = memo
          @created_on = created_on
          @currency = currency
          @gross_amount = gross_amount
          @gross_amount_decimal = gross_amount_decimal
          @fee = fee
          @fee_decimal = fee_decimal
          @net_amount = net_amount
          @net_amount_decimal = net_amount_decimal
          @completed_on = completed_on
          @fee_i_ds = fee_i_ds
          @available_balance = available_balance
          @available_balance_decimal = available_balance_decimal
          @sweep_id = sweep_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @wallet_id == other.wallet_id
          return false unless @transaction_id == other.transaction_id
          return false unless @transaction_type == other.transaction_type
          return false unless @source_type == other.source_type
          return false unless @source_id == other.source_id
          return false unless @status == other.status
          return false unless @memo == other.memo
          return false unless @created_on == other.created_on
          return false unless @currency == other.currency
          return false unless @gross_amount == other.gross_amount
          return false unless @gross_amount_decimal == other.gross_amount_decimal
          return false unless @fee == other.fee
          return false unless @fee_decimal == other.fee_decimal
          return false unless @net_amount == other.net_amount
          return false unless @net_amount_decimal == other.net_amount_decimal
          return false unless @completed_on == other.completed_on
          return false unless @fee_i_ds == other.fee_i_ds
          return false unless @available_balance == other.available_balance
          return false unless @available_balance_decimal == other.available_balance_decimal
          return false unless @sweep_id == other.sweep_id
          true
        end
      end
    end
  end
end
