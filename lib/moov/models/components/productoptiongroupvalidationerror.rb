# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Components
    

      class ProductOptionGroupValidationError
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        field :min_select, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minSelect') } }

        field :max_select, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('maxSelect') } }

        field :options, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, Models::Components::ProductOptionValidationError)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('options') } }

        sig { params(name: T.nilable(::String), description: T.nilable(::String), min_select: T.nilable(::String), max_select: T.nilable(::String), options: T.nilable(T::Hash[Symbol, Models::Components::ProductOptionValidationError])).void }
        def initialize(name: nil, description: nil, min_select: nil, max_select: nil, options: nil)
          @name = name
          @description = description
          @min_select = min_select
          @max_select = max_select
          @options = options
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @description == other.description
          return false unless @min_select == other.min_select
          return false unless @max_select == other.max_select
          return false unless @options == other.options
          true
        end
      end
    end
  end
end
