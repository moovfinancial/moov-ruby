# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Operations
    

      class ListDisputesRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'path_param': { 'field_name': 'accountID', 'style': 'simple', 'explode': false } }

        field :skip, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': false } }

        field :count, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'count', 'style': 'form', 'explode': false } }
        # Optional date-time parameter to filter all disputes created on and after the provided date and time.
        field :start_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'startDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time parameter to filter all disputes created on and before the provided date and time.
        field :end_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'endDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time which exclusively filters all disputes with respond by before this date-time.
        field :respond_start_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'respondStartDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time which exclusively filters all disputes with respond by before this date-time.
        field :respond_end_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'respondEndDateTime', 'style': 'form', 'explode': false } }
        # Optional dispute status by which to filter the disputes.
        field :status, Crystalline::Nilable.new(Models::Components::DisputeStatus), { 'query_param': { 'field_name': 'status', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by merchant account ID.
        field :merchant_account_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'merchantAccountID', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by cardholder account ID.
        field :cardholder_account_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'cardholderAccountID', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by a comma separated list of dispute IDs.
        field :dispute_i_ds, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'query_param': { 'field_name': 'disputeIDs', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by a comma separated list of transfer IDs.
        field :transfer_i_ds, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'query_param': { 'field_name': 'transferIDs', 'style': 'form', 'explode': false } }

        field :order_by, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'orderBy', 'style': 'form', 'explode': false } }
        # Specify an API version.
        # 
        # API versioning follows the format `vYYYY.QQ.BB`, where 
        #   - `YYYY` is the year
        #   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
        #   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
        #     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
        # 
        # The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
        field :x_moov_version, Crystalline::Nilable.new(::String), { 'header': { 'field_name': 'X-Moov-Version', 'style': 'simple', 'explode': false } }

        sig { params(account_id: ::String, skip: T.nilable(::Integer), count: T.nilable(::Integer), start_date_time: T.nilable(::DateTime), end_date_time: T.nilable(::DateTime), respond_start_date_time: T.nilable(::DateTime), respond_end_date_time: T.nilable(::DateTime), status: T.nilable(Models::Components::DisputeStatus), merchant_account_id: T.nilable(::String), cardholder_account_id: T.nilable(::String), dispute_i_ds: T.nilable(T::Array[::String]), transfer_i_ds: T.nilable(T::Array[::String]), order_by: T.nilable(::String), x_moov_version: T.nilable(::String)).void }
        def initialize(account_id:, skip: nil, count: nil, start_date_time: nil, end_date_time: nil, respond_start_date_time: nil, respond_end_date_time: nil, status: nil, merchant_account_id: nil, cardholder_account_id: nil, dispute_i_ds: nil, transfer_i_ds: nil, order_by: nil, x_moov_version: 'v2024.01.00')
          @account_id = account_id
          @skip = skip
          @count = count
          @start_date_time = start_date_time
          @end_date_time = end_date_time
          @respond_start_date_time = respond_start_date_time
          @respond_end_date_time = respond_end_date_time
          @status = status
          @merchant_account_id = merchant_account_id
          @cardholder_account_id = cardholder_account_id
          @dispute_i_ds = dispute_i_ds
          @transfer_i_ds = transfer_i_ds
          @order_by = order_by
          @x_moov_version = x_moov_version
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @skip == other.skip
          return false unless @count == other.count
          return false unless @start_date_time == other.start_date_time
          return false unless @end_date_time == other.end_date_time
          return false unless @respond_start_date_time == other.respond_start_date_time
          return false unless @respond_end_date_time == other.respond_end_date_time
          return false unless @status == other.status
          return false unless @merchant_account_id == other.merchant_account_id
          return false unless @cardholder_account_id == other.cardholder_account_id
          return false unless @dispute_i_ds == other.dispute_i_ds
          return false unless @transfer_i_ds == other.transfer_i_ds
          return false unless @order_by == other.order_by
          return false unless @x_moov_version == other.x_moov_version
          true
        end
      end
    end
  end
end
