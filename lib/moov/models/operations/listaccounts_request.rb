# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Operations
    

      class ListAccountsRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Filter connected accounts by name.
        # 
        # If provided, this query will attempt to find matches against the following Account and Profile fields:
        # <ul>
        #   <li>Account `displayName`</li>
        #   <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>
        #   <li>Business Profile `legalBusinessName`</li>
        # </ul>
        field :name, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'name', 'style': 'form', 'explode': false } }
        #   Filter connected accounts by email address.
        # 
        #   Provide the full email address to filter by email.
        field :email, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'email', 'style': 'form', 'explode': false } }
        #   Filter connected accounts by AccountType.
        # 
        #   If the `type` parameter is used in combination with `name`, only the corresponding type's name fields will
        #   be searched. For example, if `type=business` and `name=moov`, the search will attempt to find matches against
        #   the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).
        # 
        #   Filtering by `type=guest` is not currently supported.
        field :type, Crystalline::Nilable.new(Models::Components::CreateAccountType), { 'query_param': { 'field_name': 'type', 'style': 'form', 'explode': false } }
        #   Serves as an optional alias from a foreign/external system which can be used to reference this resource.
        field :foreign_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'foreignID', 'style': 'form', 'explode': false } }
        # Filter disconnected accounts.
        # 
        # If true, the response will include disconnected accounts.
        field :include_disconnected, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'includeDisconnected', 'style': 'form', 'explode': false } }
        #   Filter connected accounts by the capability.
        field :capability, Crystalline::Nilable.new(Models::Components::CapabilityID), { 'query_param': { 'field_name': 'capability', 'style': 'form', 'explode': false } }
        #   Filter connected accounts by the capability.
        field :capability_status, Crystalline::Nilable.new(Models::Components::CapabilityStatus), { 'query_param': { 'field_name': 'capabilityStatus', 'style': 'form', 'explode': false } }

        field :skip, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': false } }

        field :count, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'count', 'style': 'form', 'explode': false } }
        # Specify an API version.
        # 
        # API versioning follows the format `vYYYY.QQ.BB`, where 
        #   - `YYYY` is the year
        #   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
        #   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
        #     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
        # 
        # The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
        field :x_moov_version, Crystalline::Nilable.new(::String), { 'header': { 'field_name': 'x-moov-version', 'style': 'simple', 'explode': false } }

        sig { params(name: T.nilable(::String), email: T.nilable(::String), type: T.nilable(Models::Components::CreateAccountType), foreign_id: T.nilable(::String), include_disconnected: T.nilable(T::Boolean), capability: T.nilable(Models::Components::CapabilityID), capability_status: T.nilable(Models::Components::CapabilityStatus), skip: T.nilable(::Integer), count: T.nilable(::Integer), x_moov_version: T.nilable(::String)).void }
        def initialize(name: nil, email: nil, type: nil, foreign_id: nil, include_disconnected: nil, capability: nil, capability_status: nil, skip: nil, count: nil, x_moov_version: 'v2024.01.00')
          @name = name
          @email = email
          @type = type
          @foreign_id = foreign_id
          @include_disconnected = include_disconnected
          @capability = capability
          @capability_status = capability_status
          @skip = skip
          @count = count
          @x_moov_version = x_moov_version
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @email == other.email
          return false unless @type == other.type
          return false unless @foreign_id == other.foreign_id
          return false unless @include_disconnected == other.include_disconnected
          return false unless @capability == other.capability
          return false unless @capability_status == other.capability_status
          return false unless @skip == other.skip
          return false unless @count == other.count
          return false unless @x_moov_version == other.x_moov_version
          true
        end
      end
    end
  end
end
