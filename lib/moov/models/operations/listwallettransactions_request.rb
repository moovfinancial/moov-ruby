# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Operations
    

      class ListWalletTransactionsRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'path_param': { 'field_name': 'accountID', 'style': 'simple', 'explode': false } }

        field :wallet_id, ::String, { 'path_param': { 'field_name': 'walletID', 'style': 'simple', 'explode': false } }

        field :skip, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': false } }

        field :count, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'count', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by transaction type.
        field :transaction_type, Crystalline::Nilable.new(Models::Components::WalletTransactionType), { 'query_param': { 'field_name': 'transactionType', 'style': 'form', 'explode': false } }
        # Optional, comma-separated parameter to filter by transaction types.
        field :transaction_types, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::WalletTransactionType)), { 'query_param': { 'field_name': 'transactionTypes', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction).
        field :source_type, Crystalline::Nilable.new(Models::Components::WalletTransactionSourceType), { 'query_param': { 'field_name': 'sourceType', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by source ID.
        field :source_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'sourceID', 'style': 'form', 'explode': false } }
        # Optional parameter to filter by status (`pending` or `completed`).
        field :status, Crystalline::Nilable.new(Models::Components::WalletTransactionStatus), { 'query_param': { 'field_name': 'status', 'style': 'form', 'explode': false } }
        # Optional date-time which inclusively filters all transactions created after this date-time.
        field :created_start_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'createdStartDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time which exclusively filters all transactions created before this date-time.
        field :created_end_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'createdEndDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time which inclusively filters all transactions completed after this date-time.
        field :completed_start_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'completedStartDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time which exclusively filters all transactions completed before this date-time.
        field :completed_end_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'completedEndDateTime', 'style': 'form', 'explode': false } }
        # Optional ID to filter for transactions accrued in a sweep.
        field :sweep_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'sweepID', 'style': 'form', 'explode': false } }
        # Specify an API version.
        # 
        # API versioning follows the format `vYYYY.QQ.BB`, where 
        #   - `YYYY` is the year
        #   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
        #   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
        #     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
        # 
        # The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
        field :x_moov_version, Crystalline::Nilable.new(::String), { 'header': { 'field_name': 'x-moov-version', 'style': 'simple', 'explode': false } }

        sig { params(account_id: ::String, wallet_id: ::String, skip: T.nilable(::Integer), count: T.nilable(::Integer), transaction_type: T.nilable(Models::Components::WalletTransactionType), transaction_types: T.nilable(T::Array[Models::Components::WalletTransactionType]), source_type: T.nilable(Models::Components::WalletTransactionSourceType), source_id: T.nilable(::String), status: T.nilable(Models::Components::WalletTransactionStatus), created_start_date_time: T.nilable(::DateTime), created_end_date_time: T.nilable(::DateTime), completed_start_date_time: T.nilable(::DateTime), completed_end_date_time: T.nilable(::DateTime), sweep_id: T.nilable(::String), x_moov_version: T.nilable(::String)).void }
        def initialize(account_id:, wallet_id:, skip: nil, count: nil, transaction_type: nil, transaction_types: nil, source_type: nil, source_id: nil, status: nil, created_start_date_time: nil, created_end_date_time: nil, completed_start_date_time: nil, completed_end_date_time: nil, sweep_id: nil, x_moov_version: 'v2024.01.00')
          @account_id = account_id
          @wallet_id = wallet_id
          @skip = skip
          @count = count
          @transaction_type = transaction_type
          @transaction_types = transaction_types
          @source_type = source_type
          @source_id = source_id
          @status = status
          @created_start_date_time = created_start_date_time
          @created_end_date_time = created_end_date_time
          @completed_start_date_time = completed_start_date_time
          @completed_end_date_time = completed_end_date_time
          @sweep_id = sweep_id
          @x_moov_version = x_moov_version
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @wallet_id == other.wallet_id
          return false unless @skip == other.skip
          return false unless @count == other.count
          return false unless @transaction_type == other.transaction_type
          return false unless @transaction_types == other.transaction_types
          return false unless @source_type == other.source_type
          return false unless @source_id == other.source_id
          return false unless @status == other.status
          return false unless @created_start_date_time == other.created_start_date_time
          return false unless @created_end_date_time == other.created_end_date_time
          return false unless @completed_start_date_time == other.completed_start_date_time
          return false unless @completed_end_date_time == other.completed_end_date_time
          return false unless @sweep_id == other.sweep_id
          return false unless @x_moov_version == other.x_moov_version
          true
        end
      end
    end
  end
end
