# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Operations
    

      class ListTransfersRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, ::String, { 'path_param': { 'field_name': 'accountID', 'style': 'simple', 'explode': false } }
        # Optional, comma-separated account IDs by which the response is filtered based on whether the account ID is the source or destination.
        field :account_i_ds, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'query_param': { 'field_name': 'accountIDs', 'style': 'form', 'explode': false } }
        # Optional parameter for filtering transfers by status.
        field :status, Crystalline::Nilable.new(Models::Components::TransferStatus), { 'query_param': { 'field_name': 'status', 'style': 'form', 'explode': false } }
        # Optional date-time which inclusively filters all transfers created after this date-time.
        field :start_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'startDateTime', 'style': 'form', 'explode': false } }
        # Optional date-time which exclusively filters all transfers created before this date-time.
        field :end_date_time, Crystalline::Nilable.new(::DateTime), { 'query_param': { 'field_name': 'endDateTime', 'style': 'form', 'explode': false } }
        # Optional ID to filter for transfers in the same group.
        field :group_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'groupID', 'style': 'form', 'explode': false } }
        # Optional ID to filter for transfer occurrences belonging to the same schedule.
        field :schedule_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'scheduleID', 'style': 'form', 'explode': false } }
        # Optional code to filter for transfers associated with the payment link.
        field :payment_link_code, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'paymentLinkCode', 'style': 'form', 'explode': false } }
        # Optional parameter to only return refunded transfers.
        field :refunded, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'refunded', 'style': 'form', 'explode': false } }
        # Optional parameter to only return disputed transfers.
        field :disputed, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'query_param': { 'field_name': 'disputed', 'style': 'form', 'explode': false } }
        # Optional alias from a foreign/external system which can be used to reference this resource.
        field :foreign_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'foreignID', 'style': 'form', 'explode': false } }

        field :skip, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': false } }

        field :count, Crystalline::Nilable.new(::Integer), { 'query_param': { 'field_name': 'count', 'style': 'form', 'explode': false } }
        # Specify an API version.
        # 
        # API versioning follows the format `vYYYY.QQ.BB`, where 
        #   - `YYYY` is the year
        #   - `QQ` is the two-digit month for the first month of the quarter (e.g., 01, 04, 07, 10)
        #   - `BB` is the build number, starting at `.01`, for subsequent builds in the same quarter. 
        #     - For example, `v2024.01.00` is the initial release of the first quarter of 2024.
        # 
        # The `latest` version represents the most recent development state. It may include breaking changes and should be treated as a beta release.
        field :x_moov_version, Crystalline::Nilable.new(::String), { 'header': { 'field_name': 'X-Moov-Version', 'style': 'simple', 'explode': false } }

        sig { params(account_id: ::String, account_i_ds: T.nilable(T::Array[::String]), status: T.nilable(Models::Components::TransferStatus), start_date_time: T.nilable(::DateTime), end_date_time: T.nilable(::DateTime), group_id: T.nilable(::String), schedule_id: T.nilable(::String), payment_link_code: T.nilable(::String), refunded: T.nilable(T::Boolean), disputed: T.nilable(T::Boolean), foreign_id: T.nilable(::String), skip: T.nilable(::Integer), count: T.nilable(::Integer), x_moov_version: T.nilable(::String)).void }
        def initialize(account_id:, account_i_ds: nil, status: nil, start_date_time: nil, end_date_time: nil, group_id: nil, schedule_id: nil, payment_link_code: nil, refunded: nil, disputed: nil, foreign_id: nil, skip: nil, count: nil, x_moov_version: 'v2024.01.00')
          @account_id = account_id
          @account_i_ds = account_i_ds
          @status = status
          @start_date_time = start_date_time
          @end_date_time = end_date_time
          @group_id = group_id
          @schedule_id = schedule_id
          @payment_link_code = payment_link_code
          @refunded = refunded
          @disputed = disputed
          @foreign_id = foreign_id
          @skip = skip
          @count = count
          @x_moov_version = x_moov_version
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @account_i_ds == other.account_i_ds
          return false unless @status == other.status
          return false unless @start_date_time == other.start_date_time
          return false unless @end_date_time == other.end_date_time
          return false unless @group_id == other.group_id
          return false unless @schedule_id == other.schedule_id
          return false unless @payment_link_code == other.payment_link_code
          return false unless @refunded == other.refunded
          return false unless @disputed == other.disputed
          return false unless @foreign_id == other.foreign_id
          return false unless @skip == other.skip
          return false unless @count == other.count
          return false unless @x_moov_version == other.x_moov_version
          true
        end
      end
    end
  end
end
