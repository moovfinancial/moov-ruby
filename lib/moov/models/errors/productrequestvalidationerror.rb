# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class ProductRequestValidationError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('title') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        field :base_price, Crystalline::Nilable.new(Models::Components::AmountDecimalValidationError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('basePrice') } }

        field :images, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, Models::Components::AssignProductImageValidationError)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('images') } }

        field :option_groups, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, Models::Components::ProductOptionGroupValidationError)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('optionGroups') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(title: T.nilable(::String), description: T.nilable(::String), base_price: T.nilable(Models::Components::AmountDecimalValidationError), images: T.nilable(T::Hash[Symbol, Models::Components::AssignProductImageValidationError]), option_groups: T.nilable(T::Hash[Symbol, Models::Components::ProductOptionGroupValidationError]), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(title: nil, description: nil, base_price: nil, images: nil, option_groups: nil, raw_response: nil)
          @title = title
          @description = description
          @base_price = base_price
          @images = images
          @option_groups = option_groups
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @title == other.title
          return false unless @description == other.description
          return false unless @base_price == other.base_price
          return false unless @images == other.images
          return false unless @option_groups == other.option_groups
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
