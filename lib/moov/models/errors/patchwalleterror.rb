# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class PatchWalletError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('name') } }

        field :status, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }

        field :metadata, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('metadata') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(name: T.nilable(::String), status: T.nilable(::String), description: T.nilable(::String), metadata: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(name: nil, status: nil, description: nil, metadata: nil, raw_response: nil)
          @name = name
          @status = status
          @description = description
          @metadata = metadata
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @status == other.status
          return false unless @description == other.description
          return false unless @metadata == other.metadata
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
