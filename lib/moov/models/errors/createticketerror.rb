# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class CreateTicketError
        extend T::Sig
        include Crystalline::MetadataFields


        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('title') } }

        field :body, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('body') } }

        field :contact, Crystalline::Nilable.new(Models::Components::CreateTicketContactError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('contact') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(title: T.nilable(::String), body: T.nilable(::String), contact: T.nilable(Models::Components::CreateTicketContactError), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(title: nil, body: nil, contact: nil, raw_response: nil)
          @title = title
          @body = body
          @contact = contact
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @title == other.title
          return false unless @body == other.body
          return false unless @contact == other.contact
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
