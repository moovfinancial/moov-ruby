# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class PatchSweepConfigError
        extend T::Sig
        include Crystalline::MetadataFields


        field :status, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status') } }

        field :push_payment_method_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pushPaymentMethodID') } }

        field :pull_payment_method_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('pullPaymentMethodID') } }

        field :statement_descriptor, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('statementDescriptor') } }

        field :minimum_balance, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('minimumBalance') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(status: T.nilable(::String), push_payment_method_id: T.nilable(::String), pull_payment_method_id: T.nilable(::String), statement_descriptor: T.nilable(::String), minimum_balance: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(status: nil, push_payment_method_id: nil, pull_payment_method_id: nil, statement_descriptor: nil, minimum_balance: nil, raw_response: nil)
          @status = status
          @push_payment_method_id = push_payment_method_id
          @pull_payment_method_id = pull_payment_method_id
          @statement_descriptor = statement_descriptor
          @minimum_balance = minimum_balance
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @push_payment_method_id == other.push_payment_method_id
          return false unless @pull_payment_method_id == other.pull_payment_method_id
          return false unless @statement_descriptor == other.statement_descriptor
          return false unless @minimum_balance == other.minimum_balance
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
