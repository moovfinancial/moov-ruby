# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class ListTransfersValidationError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_i_ds, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('accountIDs') } }

        field :status, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('status') } }

        field :start_date_time, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('startDateTime') } }

        field :end_date_time, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('endDateTime') } }

        field :skip, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('skip') } }

        field :count, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('count') } }

        field :group_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('groupID') } }

        field :foreign_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('foreignID') } }

        field :schedule_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scheduleID') } }

        field :payment_link_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentLinkCode') } }

        field :refunded, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('refunded') } }

        field :disputed, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('disputed') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(account_i_ds: T.nilable(::String), status: T.nilable(::String), start_date_time: T.nilable(::String), end_date_time: T.nilable(::String), skip: T.nilable(::String), count: T.nilable(::String), group_id: T.nilable(::String), foreign_id: T.nilable(::String), schedule_id: T.nilable(::String), payment_link_code: T.nilable(::String), refunded: T.nilable(::String), disputed: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(account_i_ds: nil, status: nil, start_date_time: nil, end_date_time: nil, skip: nil, count: nil, group_id: nil, foreign_id: nil, schedule_id: nil, payment_link_code: nil, refunded: nil, disputed: nil, raw_response: nil)
          @account_i_ds = account_i_ds
          @status = status
          @start_date_time = start_date_time
          @end_date_time = end_date_time
          @skip = skip
          @count = count
          @group_id = group_id
          @foreign_id = foreign_id
          @schedule_id = schedule_id
          @payment_link_code = payment_link_code
          @refunded = refunded
          @disputed = disputed
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_i_ds == other.account_i_ds
          return false unless @status == other.status
          return false unless @start_date_time == other.start_date_time
          return false unless @end_date_time == other.end_date_time
          return false unless @skip == other.skip
          return false unless @count == other.count
          return false unless @group_id == other.group_id
          return false unless @foreign_id == other.foreign_id
          return false unless @schedule_id == other.schedule_id
          return false unless @payment_link_code == other.payment_link_code
          return false unless @refunded == other.refunded
          return false unless @disputed == other.disputed
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
