# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class LinkApplePayError
        extend T::Sig
        include Crystalline::MetadataFields

        # Describes an error that wasn't attributable to a single request field.
        field :error, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('error') } }
        # Describes an error within the `token.paymentData` request field.
        field :payment_data, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentData') } }
        # Describes an error within the `token.paymentMethod` request field.
        field :payment_method, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('paymentMethod') } }
        # Describes an error within the `token.transactionIdentifier` request field.
        field :transaction_identifier, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('transactionIdentifier') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(error: T.nilable(::String), payment_data: T.nilable(::String), payment_method: T.nilable(::String), transaction_identifier: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(error: nil, payment_data: nil, payment_method: nil, transaction_identifier: nil, raw_response: nil)
          @error = error
          @payment_data = payment_data
          @payment_method = payment_method
          @transaction_identifier = transaction_identifier
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @error == other.error
          return false unless @payment_data == other.payment_data
          return false unless @payment_method == other.payment_method
          return false unless @transaction_identifier == other.transaction_identifier
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
