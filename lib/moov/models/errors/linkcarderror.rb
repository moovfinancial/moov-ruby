# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class LinkCardError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :error, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('error') } }

        field :e2ee, Crystalline::Nilable.new(Models::Components::End2EndEncryptionError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('e2ee') } }

        field :card_number, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardNumber') } }

        field :card_cvv, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardCvv') } }

        field :expiration, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration') } }

        field :holder_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('holderName') } }

        field :billing_address, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('billingAddress') } }

        field :card_on_file, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('cardOnFile') } }

        field :merchant_account_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('merchantAccountID') } }

        field :verify_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('verifyName') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(error: T.nilable(::String), e2ee: T.nilable(Models::Components::End2EndEncryptionError), card_number: T.nilable(::String), card_cvv: T.nilable(::String), expiration: T.nilable(::String), holder_name: T.nilable(::String), billing_address: T.nilable(::String), card_on_file: T.nilable(::String), merchant_account_id: T.nilable(::String), verify_name: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(error: nil, e2ee: nil, card_number: nil, card_cvv: nil, expiration: nil, holder_name: nil, billing_address: nil, card_on_file: nil, merchant_account_id: nil, verify_name: nil, raw_response: nil)
          @error = error
          @e2ee = e2ee
          @card_number = card_number
          @card_cvv = card_cvv
          @expiration = expiration
          @holder_name = holder_name
          @billing_address = billing_address
          @card_on_file = card_on_file
          @merchant_account_id = merchant_account_id
          @verify_name = verify_name
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @error == other.error
          return false unless @e2ee == other.e2ee
          return false unless @card_number == other.card_number
          return false unless @card_cvv == other.card_cvv
          return false unless @expiration == other.expiration
          return false unless @holder_name == other.holder_name
          return false unless @billing_address == other.billing_address
          return false unless @card_on_file == other.card_on_file
          return false unless @merchant_account_id == other.merchant_account_id
          return false unless @verify_name == other.verify_name
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
