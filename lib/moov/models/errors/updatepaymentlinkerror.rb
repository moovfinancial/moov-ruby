# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class UpdatePaymentLinkError
        extend T::Sig
        include Crystalline::MetadataFields


        field :amount, Crystalline::Nilable.new(Models::Components::AmountValidationError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('amount') } }

        field :expires_on, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiresOn') } }

        field :display, Crystalline::Nilable.new(Models::Components::DisplayOptionsError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('display') } }

        field :payment, Crystalline::Nilable.new(Models::Components::PaymentDetailsError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payment') } }

        field :payout, Crystalline::Nilable.new(Models::Components::PayoutDetailsError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('payout') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(amount: T.nilable(Models::Components::AmountValidationError), expires_on: T.nilable(::String), display: T.nilable(Models::Components::DisplayOptionsError), payment: T.nilable(Models::Components::PaymentDetailsError), payout: T.nilable(Models::Components::PayoutDetailsError), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(amount: nil, expires_on: nil, display: nil, payment: nil, payout: nil, raw_response: nil)
          @amount = amount
          @expires_on = expires_on
          @display = display
          @payment = payment
          @payout = payout
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @expires_on == other.expires_on
          return false unless @display == other.display
          return false unless @payment == other.payment
          return false unless @payout == other.payout
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
