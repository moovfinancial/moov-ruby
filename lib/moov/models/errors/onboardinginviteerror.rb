# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class OnboardingInviteError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :return_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('returnURL') } }

        field :terms_of_service_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('termsOfServiceURL') } }

        field :scopes, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('scopes') } }

        field :capabilities, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('capabilities') } }

        field :fee_plan_codes, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('feePlanCodes') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(return_url: T.nilable(::String), terms_of_service_url: T.nilable(::String), scopes: T.nilable(T::Hash[Symbol, ::String]), capabilities: T.nilable(T::Hash[Symbol, ::String]), fee_plan_codes: T.nilable(T::Hash[Symbol, ::String]), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(return_url: nil, terms_of_service_url: nil, scopes: nil, capabilities: nil, fee_plan_codes: nil, raw_response: nil)
          @return_url = return_url
          @terms_of_service_url = terms_of_service_url
          @scopes = scopes
          @capabilities = capabilities
          @fee_plan_codes = fee_plan_codes
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @return_url == other.return_url
          return false unless @terms_of_service_url == other.terms_of_service_url
          return false unless @scopes == other.scopes
          return false unless @capabilities == other.capabilities
          return false unless @fee_plan_codes == other.fee_plan_codes
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
