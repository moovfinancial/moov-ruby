# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class AddCapabilitiesError
        extend T::Sig
        include Crystalline::MetadataFields


        field :error, Crystalline::Nilable.new(Models::Components::CapabilitiesError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('error') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(error: T.nilable(Models::Components::CapabilitiesError), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(error: nil, raw_response: nil)
          @error = error
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @error == other.error
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
