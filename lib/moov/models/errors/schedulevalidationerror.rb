# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class ScheduleValidationError
        extend T::Sig
        include Crystalline::MetadataFields


        field :occurrences, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::String)), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('occurrences') } }

        field :recur, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('recur') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('description') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(occurrences: T.nilable(T::Hash[Symbol, ::String]), recur: T.nilable(::String), description: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(occurrences: nil, recur: nil, description: nil, raw_response: nil)
          @occurrences = occurrences
          @recur = recur
          @description = description
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @occurrences == other.occurrences
          return false unless @recur == other.recur
          return false unless @description == other.description
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
