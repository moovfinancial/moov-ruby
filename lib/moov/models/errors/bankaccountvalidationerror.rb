# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class BankAccountValidationError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :account, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('account') } }

        field :plaid, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('plaid') } }

        field :plaid_link, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('plaidLink') } }

        field :mx, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('mx') } }

        field :error, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('error') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(account: T.nilable(::String), plaid: T.nilable(::String), plaid_link: T.nilable(::String), mx: T.nilable(::String), error: T.nilable(::String), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(account: nil, plaid: nil, plaid_link: nil, mx: nil, error: nil, raw_response: nil)
          @account = account
          @plaid = plaid
          @plaid_link = plaid_link
          @mx = mx
          @error = error
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account == other.account
          return false unless @plaid == other.plaid
          return false unless @plaid_link == other.plaid_link
          return false unless @mx == other.mx
          return false unless @error == other.error
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
