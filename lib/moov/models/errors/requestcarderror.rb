# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Moov
  module Models
    module Errors
    

      class RequestCardError < StandardError
        extend T::Sig
        include Crystalline::MetadataFields


        field :funding_wallet_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('fundingWalletID') } }

        field :form_factor, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('formFactor') } }

        field :authorized_user, Crystalline::Nilable.new(Models::Components::CreateAuthorizedUserError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('authorizedUser') } }

        field :memo, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('memo') } }

        field :expiration, Crystalline::Nilable.new(Models::Components::CardExpirationError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('expiration') } }

        field :controls, Crystalline::Nilable.new(Models::Components::IssuingControlsError), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('controls') } }
        # Raw HTTP response; suitable for custom response parsing
        field :raw_response, Crystalline::Nilable.new(::Faraday::Response), { 'format_json': { 'letter_case': ::Moov::Utils.field_name('-') } }

        sig { params(funding_wallet_id: T.nilable(::String), form_factor: T.nilable(::String), authorized_user: T.nilable(Models::Components::CreateAuthorizedUserError), memo: T.nilable(::String), expiration: T.nilable(Models::Components::CardExpirationError), controls: T.nilable(Models::Components::IssuingControlsError), raw_response: T.nilable(::Faraday::Response)).void }
        def initialize(funding_wallet_id: nil, form_factor: nil, authorized_user: nil, memo: nil, expiration: nil, controls: nil, raw_response: nil)
          @funding_wallet_id = funding_wallet_id
          @form_factor = form_factor
          @authorized_user = authorized_user
          @memo = memo
          @expiration = expiration
          @controls = controls
          @raw_response = raw_response
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @funding_wallet_id == other.funding_wallet_id
          return false unless @form_factor == other.form_factor
          return false unless @authorized_user == other.authorized_user
          return false unless @memo == other.memo
          return false unless @expiration == other.expiration
          return false unless @controls == other.controls
          return false unless @raw_response == other.raw_response
          true
        end
      end
    end
  end
end
